{"version":3,"file":"sdk.cjs.production.min.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/common/error.ts","../src/common/ipfs.ts","../src/common/chain.ts","../src/common/contract.ts","../src/common/currency.ts","../src/common/module-type.ts","../src/common/chainlink.ts","../src/common/nft.ts","../src/common/role.ts","../src/core/events.ts","../src/common/gas-price.ts","../src/common/invariant.ts","../src/common/sign.ts","../src/core/module.ts","../src/modules/signature-mint-1155.ts","../src/common/address.ts","../src/common/forwarder.ts","../src/common/permit.ts","../src/types/module-deployments/CommonModuleMetadata.ts","../src/types/module-deployments/BundleDropModuleMetadata.ts","../src/types/module-deployments/BundleModuleMetadata.ts","../src/types/module-deployments/CurrencyModuleMetadata.ts","../src/types/module-deployments/DatastoreModuleMetadata.ts","../src/types/module-deployments/DropModuleMetadata.ts","../src/types/module-deployments/MarketModuleMetadata.ts","../src/types/module-deployments/MarketplaceModuleMetadata.ts","../src/types/module-deployments/NftModuleMetadata.ts","../src/types/module-deployments/PackModuleMetadata.ts","../src/types/module-deployments/SplitsModuleMetadata.ts","../src/types/module-deployments/TokenModuleMetadata.ts","../src/types/module-deployments/VoteModuleMetadata.ts","../src/utils/blockTimeEstimator.ts","../src/modules/token.ts","../src/modules/app.ts","../src/enums/marketplace/ListingType.ts","../src/enums/ClaimConditionType.ts","../src/enums/vote/ProposalState.ts","../src/enums/vote/Vote.ts","../src/enums/ClaimEligibility.ts","../src/modules/bundle.ts","../src/common/isMetadataEqual.ts","../src/factories/ClaimConditionPhase.ts","../src/factories/ClaimConditionFactory.ts","../src/types/snapshots/ClaimProof.ts","../src/types/snapshots/Snapshot.ts","../src/modules/bundleDrop.ts","../src/modules/datastore.ts","../src/modules/drop.ts","../src/types/QueryParams.ts","../src/modules/market.ts","../src/modules/marketplace.ts","../src/modules/pack.ts","../src/modules/nft.ts","../src/modules/royalty.ts","../src/modules/vote.ts","../src/storage/IpfsStorage.ts","../src/core/registry.ts","../src/core/index.ts","../src/index.ts","../src/utils/merkle/generateRoot.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { BigNumberish } from \"ethers\";\n/**\n * Error that may get thrown if IPFS returns nothing for a given uri.\n * @public\n */\nexport class NotFoundError extends Error {\n  /** @internal */\n  constructor(identifier?: string) {\n    super(identifier ? `Object with id ${identifier} NOT FOUND` : \"NOT_FOUND\");\n  }\n}\n\n/**\n * Error that may get thrown if an invalid address was passed\n * @public\n */\nexport class InvalidAddressError extends Error {\n  /** @internal */\n  constructor(address?: string) {\n    super(\n      address ? `'${address}' is an invalid address` : \"Invalid address passed\",\n    );\n  }\n}\n\nexport class MissingRoleError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(address: string, role: string) {\n    super(`MISSING ROLE: ${address} does not have the '${role}' role`);\n  }\n}\n\nexport class AssetNotFoundError extends Error {\n  /** @internal */\n  /** @internal */\n  constructor(message = \"The asset you're trying to use could not be found.\") {\n    super(`message: ${message}`);\n  }\n}\n\nexport class UploadError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`UPLOAD_FAILED: ${message}`);\n  }\n}\n\nexport class FileNameMissingError extends Error {\n  /** @internal */\n  constructor() {\n    super(\"File name is required when object is not a `File` type object.\");\n  }\n}\n\nexport class DuplicateFileNameError extends Error {\n  /** @internal */\n  constructor(fileName: string) {\n    super(\n      `DUPLICATE_FILE_NAME_ERROR: File name ${fileName} was passed for more than one file.`,\n    );\n  }\n}\n\nexport class NotEnoughTokensError extends Error {\n  /** @internal */\n  constructor(contractAddress: string, quantity: number, available: number) {\n    super(\n      `BALANCE ERROR: you do not have enough balance on contract ${contractAddress} to use ${quantity} tokens. You have ${available} tokens available.`,\n    );\n  }\n}\n\nexport class MissingOwnerRoleError extends Error {\n  /** @internal */\n  constructor() {\n    super(`LIST ERROR: you should be the owner of the token to list it.`);\n  }\n}\n\nexport class QuantityAboveLimitError extends Error {\n  /** @internal */\n  constructor(quantity: string) {\n    super(`BUY ERROR: You cannot buy more than ${quantity} tokens`);\n  }\n}\n\n/**\n * Thrown when data fails to fetch from storage.\n */\nexport class FetchError extends Error {\n  public innerError?: Error;\n\n  /** @internal */\n  constructor(message: string, innerError?: Error) {\n    super(`FETCH_FAILED: ${message}`);\n    this.innerError = innerError;\n  }\n}\n\n/**\n * Thrown when attempting to create a snapshot with duplicate leafs\n */\nexport class DuplicateLeafsError extends Error {\n  constructor(message?: string) {\n    super(`DUPLICATE_LEAFS${message ? ` : ${message}` : \"\"}`);\n  }\n}\n\n/**\n * Thrown when attempting to update/cancel an auction that already started\n */\nexport class AuctionAlreadyStartedError extends Error {\n  constructor(id?: string) {\n    super(\n      `Auction already started with existing bid${id ? `, id: ${id}` : \"\"}`,\n    );\n  }\n}\n\nexport class FunctionDeprecatedError extends Error {\n  /** @internal */\n  constructor(message: string) {\n    super(`FUNCTION DEPRECATED. ${message ? `Use ${message} instead` : \"\"}`);\n  }\n}\n/**\n * Thrown when trying to retrieve a listing from a marketplace that doesn't exist\n */\nexport class ListingNotFoundError extends Error {\n  constructor(marketplaceContractAddress: string, listingId?: string) {\n    super(\n      `Could not find listing.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when trying to retrieve a listing of the wrong type\n */\nexport class WrongListingTypeError extends Error {\n  constructor(\n    marketplaceContractAddress: string,\n    listingId?: string,\n    actualType?: string,\n    expectedType?: string,\n  ) {\n    super(\n      `Incorrect listing type. Are you sure you're using the right method?.${\n        marketplaceContractAddress\n          ? ` marketplace address: ${marketplaceContractAddress}`\n          : \"\"\n      }${listingId ? ` listing id: ${listingId}` : \"\"}${\n        expectedType ? ` expected type: ${expectedType}` : \"\"\n      }${actualType ? ` actual type: ${actualType}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to transfer an asset that has restricted transferability\n */\nexport class RestrictedTransferError extends Error {\n  constructor(assetAddress?: string) {\n    super(\n      `Failed to transfer asset, transfer is restricted.${\n        assetAddress ? ` Address : ${assetAddress}` : \"\"\n      }`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to execute an admin-role function.\n */\nexport class AdminRoleMissingError extends Error {\n  constructor(\n    address?: string,\n    contractAddress?: string,\n    message = \"Failed to execute transaction\",\n  ) {\n    super(\n      `${message}, admin role is missing${\n        address ? ` on address: ${address}` : \"\"\n      }${contractAddress ? ` on contract: ${contractAddress}` : \"\"}`,\n    );\n  }\n}\n\n/**\n * Thrown when attempting to close an auction that has not ended\n */\nexport class AuctionHasNotEndedError extends Error {\n  constructor(id?: string, endTime?: BigNumberish) {\n    super(\n      `Auction has not ended yet${id ? `, id: ${id}` : \"\"}${\n        endTime ? `, end time: ${endTime.toString()}` : \"\"\n      }`,\n    );\n  }\n}\n","import { MetadataURIOrObject } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport { UploadError } from \"./error\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nif (!globalThis.File) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.File = require(\"@web-std/file\").File;\n}\n\n/**\n *\n * @param ipfsUrl - the ipfs:// uri\n * @param gatewayUrl - the gateway url\n * @returns the fully formed IPFS url\n * @internal\n */\nexport function replaceIpfsWithGateway(ipfsUrl: string, gatewayUrl: string) {\n  if (!ipfsUrl || typeof ipfsUrl !== \"string\") {\n    return \"\";\n  }\n  if (!gatewayUrl.endsWith(\"/\")) {\n    gatewayUrl = `${gatewayUrl}/`;\n  }\n  return ipfsUrl.replace(\"ipfs://\", gatewayUrl);\n}\nexport function recursiveResolveGatewayUrl(json: any, storage: IStorage) {\n  if (typeof json === \"object\") {\n    const keylist = Object.keys(json);\n    keylist.forEach((key: string) => {\n      if (typeof json[key] === \"object\") {\n        json[key] = recursiveResolveGatewayUrl(json[key], storage);\n      } else if (typeof json[key] === \"string\") {\n        json[key] = storage.resolveFullUrl(json[key]);\n      }\n    });\n  }\n  return json;\n}\n\n/**\n * A helper function to upload arbitrary data to IPFS and return the resulting IPFS uri.\n * @param data - stringified JSON || File\n * @param contractAddress - (Optional) the contract address to associate the data with\n * @param signerAddress - (Optional) the wallet address of the actor that is uploading the file\n * @returns The `ipfs://<hash>` uri of the uploaded file\n * @public\n */\nexport async function uploadToIPFS(\n  data: string | File | FileOrBuffer,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  const headers = {\n    \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    \"X-Public-Address\": signerAddress || \"\",\n  };\n  const formData = new FormData();\n  formData.append(\"file\", data as any);\n  const res = await fetch(\"https://upload.nftlabs.co/upload\", {\n    method: \"POST\",\n    body: formData as any,\n    headers,\n  });\n  try {\n    const body = await res.json();\n    return body.IpfsUri;\n  } catch (e) {\n    throw new UploadError(`Failed to upload to IPFS: ${e}`);\n  }\n}\n\n/**\n * @internal\n */\nexport async function uploadMetadata(\n  metadata: MetadataURIOrObject,\n  contractAddress?: string,\n  signerAddress?: string,\n): Promise<string> {\n  if (typeof metadata === \"string\") {\n    return metadata;\n  }\n  async function _fileHandler(object: any) {\n    const keys = Object.keys(object);\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n\n      if (shouldUpload) {\n        object[keys[key]] = await uploadToIPFS(\n          object[keys[key]],\n          contractAddress,\n          signerAddress,\n        );\n      }\n      if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n        throw new Error(\"Upload to IPFS failed\");\n      }\n      if (typeof val === \"object\") {\n        object[keys[key]] = await _fileHandler(object[keys[key]]);\n      }\n    }\n    return object;\n  }\n\n  metadata = await _fileHandler(metadata);\n\n  return await uploadToIPFS(\n    JSON.stringify(metadata),\n    contractAddress,\n    signerAddress,\n  );\n}\n","export enum ChainId {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Goerli = 5,\n  Kovan = 42,\n  BSC = 56,\n  xDai = 100,\n  Polygon = 137,\n  Moonriver = 1285,\n  Mumbai = 80001,\n  Harmony = 1666600000,\n  Localhost = 1337,\n  Hardhat = 31337,\n  Fantom = 250,\n  FantomTestnet = 4002,\n  Avalanche = 43114,\n  AvalancheFujiTestnet = 43113,\n}\n\nexport type SUPPORTED_CHAIN_ID =\n  | ChainId.Mainnet\n  | ChainId.Rinkeby\n  | ChainId.Mumbai\n  | ChainId.Polygon\n  | ChainId.Fantom\n  | ChainId.FantomTestnet\n  | ChainId.Avalanche\n  | ChainId.AvalancheFujiTestnet;\n\nexport const SUPPORTED_CHAIN_IDS: SUPPORTED_CHAIN_ID[] = [\n  ChainId.Mainnet,\n  ChainId.Rinkeby,\n  ChainId.Polygon,\n  ChainId.Mumbai,\n  ChainId.Fantom,\n  ChainId.FantomTestnet,\n  ChainId.Avalanche,\n  ChainId.AvalancheFujiTestnet,\n];\n","import { arrayify } from \"@ethersproject/bytes\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { recursiveResolveGatewayUrl } from \"./ipfs\";\n\n/**\n * The typical contract metadata found on the modules.\n * @public\n */\nexport interface ContractMetadata {\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_link?: string;\n  seller_fee_basis_points?: number;\n  fee_recipient?: string;\n  [key: string]: any;\n}\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC721 = arrayify(\"0x80ac58cd\");\n\n/**\n * @internal\n */\nexport const InterfaceId_IERC1155 = arrayify(\"0xd9b67a26\");\n\nconst contractUriABI = [\n  {\n    inputs: [] as [],\n    name: \"contractURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nexport async function getContractMetadata(\n  provider: ProviderOrSigner,\n  address: string,\n  storage: IStorage,\n  resolveGateway = false,\n): Promise<ContractMetadata> {\n  const contract = new Contract(address, contractUriABI, provider);\n  const uri = await contract.contractURI();\n  const meta = await storage.get(uri);\n\n  try {\n    let json = JSON.parse(meta);\n    if (resolveGateway) {\n      json = recursiveResolveGatewayUrl(json, storage);\n    }\n    const entity: ContractMetadata = {\n      ...json,\n    };\n    return entity;\n  } catch (e) {\n    console.error(\n      `Failed to parse metadata for contract ${address} with uri ${uri}`,\n    );\n    console.error(e);\n    // return error contract metadata\n    return {\n      uri: \"\",\n      name: \"Failed to module load metadata\",\n      description:\n        \"Something went wrong when loading this module's metadata, you can check your console logs for more information.\",\n    } as ContractMetadata;\n  }\n}\n\n/**\n * @internal\n */\nexport async function isContract(\n  provider: Provider,\n  address: string,\n): Promise<boolean> {\n  return (await provider.getCode(address)) !== \"0x\";\n}\n","import { ERC20__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BigNumberish, Signer } from \"ethers\";\nimport { ProviderOrSigner } from \"../core/types\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\n/**\n * Currency metadata.\n * @public\n */\nexport interface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n}\n\nexport interface NativeToken extends Currency {\n  wrapped: {\n    address: string;\n    name: string;\n    symbol: string;\n  };\n}\n\n/**\n * Currency metadata & value.\n * @public\n */\nexport interface CurrencyValue extends Currency {\n  value: string;\n  displayValue: string;\n}\n\n/**\n * @internal\n */\nexport const NATIVE_TOKEN_ADDRESS =\n  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\nconst NATIVE_TOKENS: Record<SUPPORTED_CHAIN_ID | ChainId.Hardhat, NativeToken> =\n  {\n    [ChainId.Mainnet]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Rinkeby]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n    [ChainId.Polygon]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Mumbai]: {\n      name: \"Matic\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889\",\n        name: \"Wrapped Matic\",\n        symbol: \"WMATIC\",\n      },\n    },\n    [ChainId.Avalanche]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.AvalancheFujiTestnet]: {\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n        name: \"Wrapped AVAX\",\n        symbol: \"WAVAX\",\n      },\n    },\n    [ChainId.Fantom]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.FantomTestnet]: {\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      wrapped: {\n        address: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n        name: \"Wrapped Fantom\",\n        symbol: \"WFTM\",\n      },\n    },\n    [ChainId.Hardhat]: {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      wrapped: {\n        address: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n        name: \"Wrapped Ether\",\n        symbol: \"WETH\",\n      },\n    },\n  };\n\n/**\n * @internal\n */\nexport async function getCurrencyMetadata(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n): Promise<Currency> {\n  try {\n    if (isNativeToken(asset)) {\n      let provider: Provider;\n      if (Signer.isSigner(providerOrSigner)) {\n        provider = (providerOrSigner as Signer).provider as Provider;\n      } else {\n        provider = providerOrSigner as Provider;\n      }\n      const network = await provider.getNetwork();\n      const nativeToken = getNativeTokenByChainId(network.chainId);\n      return {\n        name: nativeToken.name,\n        symbol: nativeToken.symbol,\n        decimals: nativeToken.decimals,\n      };\n    } else {\n      const erc20 = ERC20__factory.connect(asset, providerOrSigner);\n      const [name, symbol, decimals] = await Promise.all([\n        erc20.name(),\n        erc20.symbol(),\n        erc20.decimals(),\n      ]);\n      return {\n        name,\n        symbol,\n        decimals,\n      };\n    }\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return {\n    name: \"\",\n    symbol: \"\",\n    decimals: 0,\n  };\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyValue(\n  providerOrSigner: ProviderOrSigner,\n  asset: string,\n  price: BigNumberish,\n): Promise<CurrencyValue> {\n  const metadata = await getCurrencyMetadata(providerOrSigner, asset);\n  return {\n    ...metadata,\n    value: price.toString(),\n    displayValue: formatUnits(price, metadata.decimals),\n  };\n}\n\n/**\n * @internal\n */\nexport function isNativeToken(tokenAddress: string): boolean {\n  return (\n    tokenAddress.toLowerCase() === NATIVE_TOKEN_ADDRESS ||\n    tokenAddress.toLowerCase() === AddressZero\n  );\n}\n\n/**\n * @internal\n */\nexport async function getCurrencyBalance(\n  providerOrSigner: ProviderOrSigner,\n  tokenAddress: string,\n  walletAddress: string,\n): Promise<CurrencyValue> {\n  const provider = getProvider(providerOrSigner);\n  let balance;\n  if (isNativeToken(tokenAddress)) {\n    balance = await provider.getBalance(walletAddress);\n  } else {\n    try {\n      const erc20 = ERC20__factory.connect(tokenAddress, provider);\n      balance = await erc20.balanceOf(walletAddress);\n    } catch (e) {\n      console.error(e);\n      throw new Error(\"invalid ERC20 token address\");\n    }\n  }\n\n  return getCurrencyValue(providerOrSigner, tokenAddress, balance);\n}\n\nfunction getProvider(providerOrSigner: ProviderOrSigner): Provider {\n  if (Signer.isSigner(providerOrSigner)) {\n    return (providerOrSigner as Signer).provider as Provider;\n  } else {\n    return providerOrSigner as Provider;\n  }\n}\n\nexport function getNativeTokenByChainId(chainId: ChainId): NativeToken {\n  return NATIVE_TOKENS[chainId as SUPPORTED_CHAIN_ID];\n}\n","import { $enum } from \"ts-enum-util\";\n\n/**\n * The type of Modules that are available.\n * @public\n */\nexport enum ModuleType {\n  CURRENCY = 0,\n  TOKEN = 0,\n  COLLECTION = 1,\n  BUNDLE = 1,\n  NFT = 2,\n  DYNAMIC_NFT = 3,\n  ACCESS_NFT = 4,\n  PACK = 5,\n  MARKET = 6,\n  DROP = 7,\n  DATASTORE = 8,\n  SPLITS = 9,\n  VOTE = 10,\n  BUNDLE_DROP = 11,\n  MARKETPLACE = 12,\n  BUNDLE_SIGNATURE = 13,\n}\n/**\n *\n * @param moduleName - a supported module name\n * @returns The {@link ModuleType} or undefined\n * @public\n */\n\nexport function convertNameToModuleType(\n  moduleName?: string,\n): ModuleType | undefined {\n  return $enum(ModuleType).getValueOrDefault(\n    moduleName?.toUpperCase(),\n    undefined,\n  );\n}\n\n/**\n *\n * @param moduleType - A {@link ModuleType}\n * @returns The name of the given {@link ModuleType} or undefined\n * @public\n */\nexport function convertModuleTypeToName(\n  moduleType: ModuleType,\n): keyof typeof ModuleType | undefined {\n  return $enum(ModuleType).getKeyOrDefault(moduleType, undefined);\n}\n","import { BigNumber, ethers } from \"ethers\";\nimport { ChainId } from \"./chain\";\n\n/**\n *\n * @internal\n */\nexport type ChainlinkInfo = {\n  vrfCoordinator: string;\n  linkTokenAddress: string;\n  keyHash: string;\n  fees: BigNumber;\n};\n\n/**\n *\n * @internal\n */\nexport const ChainlinkVrf: Record<number, ChainlinkInfo> = {\n  [ChainId.Polygon]: {\n    vrfCoordinator: \"0x3d2341ADb2D31f1c5530cDC622016af293177AE0\",\n    linkTokenAddress: \"0xb0897686c545045aFc77CF20eC7A532E3120E0F1\",\n    keyHash:\n      \"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Mumbai]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n  [ChainId.Rinkeby]: {\n    vrfCoordinator: \"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B\",\n    linkTokenAddress: \"0x01be23585060835e02b77ef475b0cc51aa1e0709\",\n    keyHash:\n      \"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311\",\n    fees: ethers.utils.parseEther(\"0.1\"),\n  },\n  [ChainId.Mainnet]: {\n    vrfCoordinator: \"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952\",\n    linkTokenAddress: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    keyHash:\n      \"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445\",\n    fees: ethers.utils.parseEther(\"2\"),\n  },\n  [ChainId.Hardhat]: {\n    vrfCoordinator: \"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255\",\n    linkTokenAddress: \"0x326C977E6efc84E512bB9C30f76E30c160eD06FB\",\n    keyHash:\n      \"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4\",\n    fees: ethers.utils.parseEther(\"0.0001\"),\n  },\n};\n","import {\n  LazyMintERC1155,\n  LazyMintERC721,\n  LazyNFT,\n  NFT,\n  NFTCollection,\n  SignatureMint1155,\n} from \"@3rdweb/contracts\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { JSONValue, ProviderOrSigner } from \"../core/types\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { NotFoundError } from \"./error\";\nimport { recursiveResolveGatewayUrl } from \"./ipfs\";\n\n// support erc721 and erc1155\nconst tokenUriABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"uri\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n/**\n * The shared NFT metadata.\n * @public\n */\nexport interface NFTMetadata {\n  id: string;\n  uri: string;\n  name?: string;\n  description?: string;\n  image?: string;\n  external_url?: string;\n  animation_url?: string;\n  properties?: Record<string, JSONValue>;\n}\n\n/**\n * The shared NFT metadata, including the current owner address.\n * @public\n */\nexport interface NFTMetadataOwner {\n  owner: string;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nexport type NFTContractTypes =\n  | NFT\n  | NFTCollection\n  | LazyNFT\n  | LazyMintERC721\n  | LazyMintERC1155\n  | SignatureMint1155;\n\n/**\n/* @internal\n */\nexport async function getMetadataWithoutContract(\n  provider: ProviderOrSigner,\n  contractAddress: string,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n  return getTokenMetadata(contract, tokenId, storage);\n}\n\n/**\n/* @internal\n */\nexport async function getTokenMetadata(\n  contract: NFTContractTypes,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n\n  try {\n    const meta = await storage.get(uri);\n    const json = recursiveResolveGatewayUrl(JSON.parse(meta), storage);\n    const entity: NFTMetadata = {\n      ...json,\n      id: tokenId,\n      uri,\n    };\n    return entity;\n  } catch (e) {\n    console.error(\"failed to fetch nft\", e);\n    return {\n      id: tokenId,\n      uri,\n    };\n  }\n}\n\nexport async function getTokenMetadataUsingStorage(\n  contractAddress: string,\n  provider: ProviderOrSigner,\n  tokenId: string,\n  storage: IStorage,\n): Promise<NFTMetadata> {\n  const contract = new Contract(contractAddress, tokenUriABI, provider) as NFT;\n\n  const uri = await getTokenUri(contract, tokenId);\n  if (!uri) {\n    throw new NotFoundError();\n  }\n  try {\n    const json = JSON.parse(await storage.get(uri));\n    const entity: NFTMetadata = {\n      ...json,\n      id: tokenId,\n    };\n    return entity;\n  } catch (e) {\n    console.error(\"failed to fetch nft\", e);\n    return {\n      id: tokenId,\n      uri,\n    };\n  }\n}\n\n/**\n/* @internal\n */\nexport async function getTokenUri(\n  contract: NFTContractTypes,\n  tokenId: string,\n): Promise<string> {\n  let uri = \"\";\n  try {\n    uri = await contract.tokenURI(tokenId);\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n\n  if (!uri) {\n    try {\n      uri = await (contract as NFTCollection).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n\n  if (!uri) {\n    try {\n      uri = await (contract as SignatureMint1155).uri(tokenId);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n  return uri;\n}\n","import { BytesLike, ethers } from \"ethers\";\n\n/**\n * Roles are used to handle permissions on modules that extend {@link ModuleWithRoles}.\n * @public\n */\nexport interface IRoles {\n  /**\n   * This admin role allows the wallet to modify contract metadata and {@link ModuleWithRoles.grantRole | grant} and {@link ModuleWithRoles.revokeRole | revoke} Roles.\n   * @public\n   */\n  admin: \"admin\";\n  /**\n   * The minter role allows the wallet to mint new assets.\n   * ({@link NFTModule.mint | NFTs}, {@link TokenModule.mint | Tokens}, {@link PackModule.create | Packs}, etc)\n   * @public\n   */\n  minter: \"minter\";\n  /**\n   * The pauser role allows the wallet to pause all external contract interactions.\n   * @public\n   */\n  pauser: \"pauser\";\n  /**\n   * The transfer role allows the wallet to transfer and receive assets\n   * **even** when the module is set to be non-transferrable.\n   * @public\n   */\n  transfer: \"transfer\";\n  /**\n   * The editor role allows the wallet to edit data in the {@link DatastoreModule}.\n   * @alpha\n   */\n  editor: \"editor\";\n  /**\n   * The lister role allows the wallet to list assets on the {@link MarketModule}.\n   * @public\n   */\n  lister: \"lister\";\n\n  /**\n   * The contract address allowed to list assets from\n   * @internal\n   */\n  asset: \"asset\";\n}\n\n/**\n * {@inheritDoc IRoles}\n * @public\n */\nexport type Role = keyof IRoles;\n\nexport type SetAllRoles = {\n  [key in keyof IRoles]?: string[];\n};\n\n/**\n *\n * @internal\n */\nexport const RolesMap: IRoles = {\n  admin: \"admin\",\n  minter: \"minter\",\n  pauser: \"pauser\",\n  transfer: \"transfer\",\n  editor: \"editor\",\n  lister: \"lister\",\n  asset: \"asset\",\n} as const;\n\n/**\n *\n * @internal\n */\nconst _role: Record<Role, string> = {\n  admin: \"\",\n  transfer: \"TRANSFER_ROLE\",\n  minter: \"MINTER_ROLE\",\n  pauser: \"PAUSER_ROLE\",\n  editor: \"EDITOR_ROLE\",\n  lister: \"LISTER_ROLE\",\n  asset: \"ASSET_ROLE\",\n};\n\n/**\n * @internal\n */\nexport function getRoleHash(role: Role): BytesLike {\n  if (role === \"admin\") {\n    return ethers.utils.hexZeroPad([0], 32);\n  }\n  return ethers.utils.id(_role[role]);\n}\n","export enum EventType {\n  /**\n   * The event is triggered when the transaction is submitted and completed.\n   * The transaction is submitted when it is sent to the relayer or the blockchain.\n   * The transaction is completed when it is confirmed by the blockchain.\n   *\n   * status: \"submitted\" | \"completed\"\n   * transactionHash: string of the transaction hash\n   */\n  Transaction = \"transaction\",\n\n  /**\n   * The event is triggered when wallet sign message is requested and completed.\n   *\n   * status: \"submitted\" | \"completed\"\n   * message: message to sign\n   * signature: signature of the message (only available when status is \"completed\")\n   */\n  Signature = \"signature\",\n}\n","import { ChainId } from \"./chain\";\n\n/**\n * @internal\n */\nfunction getGasStationUrl(chainId?: number): string | null {\n  if (!chainId) {\n    return null;\n  }\n\n  if (chainId === ChainId.Polygon) {\n    return \"https://gasstation-mainnet.matic.network\";\n  }\n\n  return null;\n}\n\n/**\n *\n * @returns the gas price\n * @internal\n */\nexport async function getGasPriceForChain(\n  chainId: number,\n  speed: string,\n  maxGasPrice: number,\n): Promise<number | null> {\n  const gasStationUrl = getGasStationUrl(chainId);\n  if (!gasStationUrl) {\n    return null;\n  }\n  try {\n    const data = await (await fetch(gasStationUrl)).json();\n    let gas = data[speed];\n\n    if (chainId === ChainId.Polygon || chainId === ChainId.Mumbai) {\n      // the minimum gas on chain is 30, +1 for priority. prevent gas station report false price and cause tx to fail.\n      gas = Math.max(gas, 31);\n    }\n    if (gas > 0) {\n      return Math.min(gas, maxGasPrice);\n    }\n  } catch (e) {\n    console.error(\"failed to fetch gas\", e);\n  }\n  return null;\n}\n","const genericMessage = \"Invariant Violation\";\n\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\n/**\n * Error that may get thrown when an invariant assummption fails.\n * @public\n */\nexport class InvariantError extends Error {\n  /**\n   * @internal\n   */\n  framesToPop = 1;\n  /**\n   * @internal\n   */\n  name = genericMessage;\n  /**\n   * @internal\n   */\n  constructor(message: string = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message,\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n/**\n * @internal\n * @param condition - any truthy condition to assert\n * @param message  - optional message to use if the condition is falsy\n */\nexport function invariant(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","import { TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"@ethersproject/providers\";\nimport { ethers, Signer } from \"ethers\";\n\n/**\n * @internal\n */\nexport interface EIP712StandardDomain {\n  name: string;\n  version: string;\n  chainId: number;\n  verifyingContract: string;\n}\n\n/**\n * @internal\n */\nexport interface EIP712PolygonDomain {\n  name: string;\n  version: string;\n  verifyingContract: string;\n  salt: string;\n}\n\n/**\n * @internal\n */\nexport type EIP712Domain = EIP712StandardDomain | EIP712PolygonDomain;\n\n/**\n * eip712 sign typed data with different wallet handling including ledger live\n * @internal\n */\nexport async function signTypedData(\n  signer: Signer,\n  domain: EIP712Domain,\n  types: Record<string, Array<TypedDataField>>,\n  message: Record<string, any>,\n) {\n  const provider = signer?.provider as JsonRpcProvider;\n  if (!provider) {\n    throw new Error(\"missing provider\");\n  }\n\n  const payload = ethers.utils._TypedDataEncoder.getPayload(\n    domain,\n    types,\n    message,\n  );\n\n  let signature = \"\";\n\n  // an indirect way for accessing walletconnect's underlying provider\n  if ((provider as any)?.provider?.isWalletConnect) {\n    signature = await provider.send(\"eth_signTypedData\", [\n      (await signer.getAddress()).toLowerCase(),\n      JSON.stringify(payload),\n    ]);\n  } else {\n    try {\n      signature = await (signer as JsonRpcSigner)._signTypedData(\n        domain,\n        types,\n        message,\n      );\n    } catch (err: any) {\n      if (err?.message?.includes(\"Method eth_signTypedData_v4 not supported\")) {\n        signature = await provider.send(\"eth_signTypedData\", [\n          (await signer.getAddress()).toLowerCase(),\n          JSON.stringify(payload),\n        ]);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // fix ledger live where signature result in v = 0, 1. ethers magically fix it in split/join.\n  return {\n    payload,\n    signature: ethers.utils.joinSignature(\n      ethers.utils.splitSignature(signature),\n    ),\n  };\n}\n","import { AccessControlEnumerable } from \"@3rdweb/contracts\";\nimport { Log, TransactionReceipt } from \"@ethersproject/providers\";\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  ethers,\n  Signer,\n} from \"ethers\";\nimport { getContractMetadata, isContract } from \"../common/contract\";\nimport { MissingRoleError } from \"../common/error\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { uploadMetadata } from \"../common/ipfs\";\nimport { ModuleType } from \"../common/module-type\";\nimport { getRoleHash, Role, SetAllRoles } from \"../common/role\";\nimport { signTypedData } from \"../common/sign\";\nimport { ISDKOptions } from \"../interfaces/ISdkOptions\";\nimport { ModuleMetadata } from \"../types/ModuleMetadata\";\nimport { EventType } from \"./events\";\nimport { ThirdwebSDK } from \"./index\";\nimport type {\n  GaslessTransaction,\n  MetadataURIOrObject,\n  ProviderOrSigner,\n} from \"./types\";\n\n/**\n * The root Module class. All other Modules extend this.\n * @remarks This should never be instantiated directly.\n * @public\n */\nexport class Module<TContract extends BaseContract = BaseContract> {\n  /**\n   * @readonly\n   */\n  public readonly address: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly ipfsGatewayUrl: string;\n  /**\n   * @internal\n   * @readonly\n   */\n  protected readonly options: ISDKOptions;\n\n  protected readonly sdk: ThirdwebSDK;\n\n  /**\n   * @internal\n   */\n  private _providerOrSigner: ProviderOrSigner | null = null;\n  /**\n   * @internal\n   */\n  protected get providerOrSigner(): ProviderOrSigner {\n    return this.signer || this._providerOrSigner || this.getProviderOrSigner();\n  }\n\n  private set providerOrSigner(value: ProviderOrSigner) {\n    this._providerOrSigner = value;\n  }\n\n  /**\n   * @internal\n   */\n  private _signer: Signer | null = null;\n  /**\n   * @internal\n   */\n  protected get signer(): Signer | null {\n    return this._signer;\n  }\n\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  /**\n   * Contract connects to the SDK signer or provider\n   * @internal\n   */\n  public contract: TContract;\n  /**\n   * Contract connects to the {@link ISDKOptions.readOnlyRpcUrl} if provided, otherwise connect to signer or provider\n   * @internal\n   */\n  public readOnlyContract: TContract;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    this.address = address;\n    this.options = options;\n    this.ipfsGatewayUrl = options.ipfsGatewayUrl;\n    this.setProviderOrSigner(providerOrSigner);\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n    this.sdk = sdk;\n  }\n\n  /**\n   * @public\n   * @returns whether the given contract exists on-chain\n   */\n  public async exists(): Promise<boolean> {\n    const provider = await this.getProvider();\n    invariant(provider, \"exists() -- No Provider\");\n    return isContract(provider, this.address);\n  }\n\n  /**\n   * @public\n   * Get the metadata of the contract.\n   *\n   * @param resolveUrls - Whether to resolve the urls in the metadata to a gateway.\n   */\n  public async getMetadata(resolveUrls = true): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const contract = this.connectContract();\n    const type = this.getModuleType();\n\n    return {\n      metadata: await getContractMetadata(\n        await this.getProvider(),\n        contract.address,\n        this.sdk.getStorage(),\n        resolveUrls,\n      ),\n      address: contract.address,\n      type,\n    };\n  }\n\n  /**\n   * @public\n   * Set new metadata on the contract and return it if successful.\n   * @param metadata - The metadata to set.\n   */\n  public async setMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<ModuleMetadata> {\n    invariant(await this.exists(), \"contract does not exist\");\n    const uri = await uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n    return this.getMetadata();\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    this.providerOrSigner = providerOrSigner;\n    if (Signer.isSigner(providerOrSigner)) {\n      this.signer = providerOrSigner;\n    }\n    this.contract = this.connectContract();\n    this.readOnlyContract = this.options.readOnlyRpcUrl\n      ? (this.contract.connect(\n          ethers.getDefaultProvider(this.options.readOnlyRpcUrl),\n        ) as TContract)\n      : this.contract;\n  }\n\n  /**\n   * @internal\n   */\n  public clearSigner(): void {\n    this.signer = null;\n  }\n\n  /**\n   * @internal\n   */\n  private getProviderOrSigner(): ProviderOrSigner {\n    return this.signer || this.providerOrSigner;\n  }\n\n  /**\n   * @internal\n   */\n  protected getSigner(): Signer | null {\n    if (Signer.isSigner(this.signer)) {\n      return this.signer;\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  protected hasValidSigner(): boolean {\n    return Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @internal\n   */\n  protected async getSignerAddress(): Promise<string> {\n    const signer = this.getSigner();\n    invariant(signer, \"Cannot get signer address without valid signer\");\n    return await signer.getAddress();\n  }\n\n  /**\n   * @internal\n   */\n  protected async getProvider() {\n    return this.readOnlyContract.provider;\n  }\n\n  /**\n   * @internal\n   */\n  protected async getChainID(): Promise<number> {\n    const provider = await this.getProvider();\n    invariant(provider, \"getChainID() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected connectContract(): TContract {\n    throw new Error(\"connectContract has to be implemented\");\n  }\n\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    throw new Error(\"getModuleType has to be implemented\");\n  }\n\n  /**\n   * @internal\n   */\n  protected async getCallOverrides(): Promise<CallOverrides> {\n    const chainId = await this.getChainID();\n    const speed = this.options.gasSpeed;\n    const maxGasPrice = this.options.maxGasPriceInGwei;\n    const gasPriceChain = await getGasPriceForChain(\n      chainId,\n      speed,\n      maxGasPrice,\n    );\n    if (!gasPriceChain) {\n      return {};\n    }\n    // TODO: support EIP-1559 by try-catch, provider.getFeeData();\n    return {\n      gasPrice: ethers.utils.parseUnits(gasPriceChain.toString(), \"gwei\"),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private emitTransactionEvent(\n    status: \"submitted\" | \"completed\",\n    transactionHash: string,\n  ) {\n    this.sdk.event.emit(EventType.Transaction, {\n      status,\n      transactionHash,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendTransaction(\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    return this.sendContractTransaction(this.contract, fn, args, callOverrides);\n  }\n\n  /**\n   * @internal\n   */\n  protected async sendContractTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides?: CallOverrides,\n  ): Promise<TransactionReceipt> {\n    if (!callOverrides) {\n      callOverrides = await this.getCallOverrides();\n    }\n\n    if (\n      this.options.transactionRelayerUrl ||\n      this.options.gasless.biconomy.apiKey\n    ) {\n      const provider = await this.getProvider();\n      const txHash = await this.sendGaslessTransaction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", txHash);\n      const receipt = await provider.waitForTransaction(txHash);\n      this.emitTransactionEvent(\"completed\", txHash);\n      return receipt;\n    } else {\n      const tx = await this.sendTransactionByFunction(\n        contract,\n        fn,\n        args,\n        callOverrides,\n      );\n      this.emitTransactionEvent(\"submitted\", tx.hash);\n      const receipt = tx.wait();\n      this.emitTransactionEvent(\"completed\", tx.hash);\n      return receipt;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private async sendTransactionByFunction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<ContractTransaction> {\n    const func: ethers.ContractFunction = contract.functions[fn];\n    if (!func) {\n      throw new Error(\"invalid function\");\n    }\n    return await func(...args, callOverrides);\n  }\n\n  /**\n   * @internal\n   */\n  private async sendGaslessTransaction(\n    contract: BaseContract,\n    fn: string,\n    args: any[],\n    callOverrides: CallOverrides,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    invariant(\n      signer,\n      \"Cannot execute gasless transaction without valid signer\",\n    );\n    const provider = await this.getProvider();\n    invariant(provider, \"no provider to execute transaction\");\n    const chainId = await this.getChainID();\n    const from = await this.getSignerAddress();\n    const to = this.address;\n    const value = callOverrides?.value || 0;\n\n    if (BigNumber.from(value).gt(0)) {\n      throw new Error(\n        \"Cannot send native token value with gasless transaction\",\n      );\n    }\n\n    const data = contract.interface.encodeFunctionData(fn, args);\n\n    const gasEstimate = await contract.estimateGas[fn](...args);\n    let gas = gasEstimate.mul(2);\n\n    // in some cases WalletConnect doesn't properly gives an estimate for how much gas it would actually use.\n    // it'd estimate ~21740 on polygon.\n    // as a fix, we're setting it to a high arbitrary number (500k) as the gas limit that should cover for most function calls.\n    if (gasEstimate.lt(25000)) {\n      gas = BigNumber.from(500000);\n    }\n\n    const tx: GaslessTransaction = {\n      from,\n      to,\n      data,\n      chainId,\n      gasLimit: gas,\n      functionName: fn,\n      functionArgs: args,\n      callOverrides,\n    };\n\n    const txHash = await this.options.gaslessSendFunction(contract, tx);\n    return txHash;\n  }\n\n  /**\n   * @internal\n   */\n  protected async signTypedDataEmitEvent(\n    signer: ethers.Signer,\n    domain: {\n      name: string;\n      version: string;\n      chainId: number;\n      verifyingContract: string;\n    },\n    types: any,\n    message: any,\n  ): Promise<BytesLike> {\n    let signature = \"\";\n\n    this.sdk.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature,\n    });\n\n    const { signature: sig } = await signTypedData(\n      signer,\n      domain,\n      types,\n      message,\n    );\n    signature = sig;\n\n    this.sdk.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n    return signature;\n  }\n\n  protected parseEventLogs(eventName: string, logs?: Log[]): any {\n    if (!logs) {\n      return null;\n    }\n    for (const log of logs) {\n      try {\n        const event = this.contract.interface.decodeEventLog(\n          eventName,\n          log.data,\n          log.topics,\n        );\n        return event;\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    return null;\n  }\n\n  protected parseLogs<T = any>(\n    eventName: string,\n    logs?: Log[],\n    contract: BaseContract = this.contract,\n  ): T[] {\n    if (!logs || logs.length === 0) {\n      return [];\n    }\n    const topic = contract.interface.getEventTopic(eventName);\n    const parsedLogs = logs.filter((x) => x.topics.indexOf(topic) >= 0);\n    return parsedLogs.map(\n      (l) => contract.interface.parseLog(l) as unknown as T,\n    );\n  }\n}\n\n/**\n * Extends the {@link Module} class to add {@link Role} functionality.\n *\n * @public\n */\nexport class ModuleWithRoles<\n  TContract extends AccessControlEnumerable = AccessControlEnumerable,\n> extends Module<TContract> {\n  /**\n   * @virtual\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    throw new Error(\"getModuleRoles has to be implemented by a subclass\");\n  }\n\n  /**\n   * @internal\n   */\n  private get roles() {\n    return this.getModuleRoles();\n  }\n\n  /** @internal */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * Call this to get a list of addresses that are members of a specific role.\n   *\n   * @param role - The {@link IRoles | role} to to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @see {@link ModuleWithRoles.getAllRoleMembers | getAllRoleMembers} to get get a list of addresses for all supported roles on the module.\n   * @example Say you want to get the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * ```\n   *\n   * @public\n   */\n  public async getRoleMembers(role: Role): Promise<string[]> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const contract = this.readOnlyContract;\n    const roleHash = getRoleHash(role);\n    const count = (await contract.getRoleMemberCount(roleHash)).toNumber();\n    return await Promise.all(\n      Array.from(Array(count).keys()).map((i) =>\n        contract.getRoleMember(roleHash, i),\n      ),\n    );\n  }\n\n  /**\n   * Call this to get get a list of addresses for all supported roles on the module.\n   *\n   * @see {@link ModuleWithRoles.getRoleMembers | getRoleMembers} to get a list of addresses that are members of a specific role.\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the module does not support roles this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async getAllRoleMembers(): Promise<Partial<Record<Role, string[]>>> {\n    invariant(this.roles.length, \"this module has no support for roles\");\n    const roles: Partial<Record<Role, string[]>> = {};\n    for (const role of this.roles) {\n      roles[role] = await this.getRoleMembers(role);\n    }\n    return roles;\n  }\n  /**\n   * Call this to OVERWRITE the list of addresses that are members of specific roles.\n   *\n   * Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ModuleWithRoles.grantRole | grantRole} and {@link ModuleWithRoles.grantRole | revokeRole} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requestiong a role that does not exist on the module this will throw an {@link InvariantError}.\n   * @example Say you want to overwrite the list of addresses that are members of the {@link IRoles.minter | minter} role.\n   * ```typescript\n   * const minterAddresses: string[] = await module.getRoleMemberList(\"minter\");\n   * await module.setAllRoleMembers({\n   *  minter: []\n   * });\n   * console.log(await module.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   *\n   * */\n  public async setAllRoleMembers(\n    rolesWithAddresses: SetAllRoles,\n  ): Promise<any> {\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(\n      roles.every((role) => this.roles.includes(role as Role)),\n      \"this module does not support the given role\",\n    );\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    // add / rmove admin role at the end so we don't revoke admin then grant\n    roles\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        const addresses = rolesWithAddresses[role as Role] || [];\n        const currentAddresses = currentRoles[role as Role] || [];\n        const toAdd = addresses.filter(\n          (address) => !currentAddresses.includes(address),\n        );\n        const toRemove = currentAddresses.filter(\n          (address) => !addresses.includes(address),\n        );\n        if (toAdd.length) {\n          toAdd.forEach((address) => {\n            encoded.push(\n              this.contract.interface.encodeFunctionData(\"grantRole\", [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n        if (toRemove.length) {\n          toRemove.forEach(async (address) => {\n            const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n              address,\n            )) as any;\n            encoded.push(\n              this.contract.interface.encodeFunctionData(revokeFunctionName, [\n                getRoleHash(role as Role),\n                address,\n              ]),\n            );\n          });\n        }\n      });\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  /**\n   *\n   * Call this to revoke all roles given to a specific address.\n   * @param address - The address to revoke all roles for.\n   * @returns A list of roles that were revoked.\n   *\n   * @public\n   *\n   */\n\n  public async revokeAllRolesFromAddress(address: string): Promise<Role[]> {\n    const currentRoles = await this.getAllRoleMembers();\n    const encoded: string[] = [];\n    const rolesRemoved: Role[] = [];\n    // revoke / renounce admin role at the end\n    Object.keys(currentRoles)\n      .sort((role) => (role === \"admin\" ? 1 : -1))\n      .forEach(async (role) => {\n        if (currentRoles[role as Role]?.includes(address)) {\n          const revokeFunctionName = (await this.getRevokeRoleFunctionName(\n            address,\n          )) as any;\n          encoded.push(\n            this.contract.interface.encodeFunctionData(revokeFunctionName, [\n              getRoleHash(role as Role),\n              address,\n            ]),\n          );\n          rolesRemoved.push(role as Role);\n        }\n      });\n    await this.sendTransaction(\"multicall\", [encoded]);\n    return rolesRemoved;\n  }\n\n  /**\n   * Call this to grant a role to a specific address.\n   *\n   * @remarks\n   *\n   * Make sure you are sure you want to grant the role to the address.\n   *\n   * @param role - The {@link IRoles | role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async grantRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    return await this.sendTransaction(\"grantRole\", [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  /**\n   * Call this to revoke a role from a specific address.\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the {@link IRoles.admin | admin} role, you will no longer be able to administer the module.\n   * There is no way to recover from this.\n   *\n   * @param role - The {@link IRoles | role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an {@link InvariantError}.\n   *\n   * @public\n   */\n  public async revokeRole(\n    role: Role,\n    address: string,\n  ): Promise<TransactionReceipt> {\n    invariant(\n      this.roles.includes(role),\n      `this module does not support the \"${role}\" role`,\n    );\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(address);\n    return await this.sendTransaction(revokeFunctionName, [\n      getRoleHash(role),\n      address,\n    ]);\n  }\n\n  private async getRevokeRoleFunctionName(address: string): Promise<string> {\n    const signerAddress = await this.getSignerAddress();\n    if (signerAddress.toLowerCase() === address.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n\n  /**\n   * Prepares any set of metadata for uploading by recursively converting all Buffer|Blob|File objects\n   * into a hash of the object after its been uploaded to distributed storage (e.g. IPFS). After uploading\n   * any File|Buffer|Blob, the metadata is serialized to a string.\n   *\n   * @param metadata - The list of metadata to prepare for upload.\n   * @returns - The serialized metadata object.\n   */\n  public async prepareMetadata(metadata: MetadataURIOrObject): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    const _fileHandler = async (object: any) => {\n      const keys = Object.keys(object);\n      for (const key in keys) {\n        const val = object[keys[key]];\n        const shouldUpload = val instanceof File || val instanceof Buffer;\n        if (shouldUpload) {\n          object[keys[key]] = await this.sdk\n            .getStorage()\n            .upload(object[keys[key]]);\n        }\n        if (shouldUpload && typeof object[keys[key]] !== \"string\") {\n          throw new Error(\"Upload to IPFS failed\");\n        }\n        if (typeof val === \"object\") {\n          object[keys[key]] = await _fileHandler(object[keys[key]]);\n        }\n      }\n      return object;\n    };\n\n    metadata = await _fileHandler(metadata);\n    // TODO: use json2typescript to convert metadata to string\n    return JSON.stringify(metadata);\n  }\n\n  /**\n   * Prepares a list of metadata for uploading.\n   *\n   * @param metadata - List of metadata to prepare for upload.\n   * @returns - List of metadata prepared for upload.\n   */\n  public async prepareBatchMetadata(\n    metadata: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    return await Promise.all(\n      metadata.map(async (m) => await this.prepareMetadata(m)),\n    );\n  }\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   */\n  protected async onlyRoles(roles: Role[], address: string): Promise<void> {\n    await Promise.all(\n      roles.map(async (role) => {\n        const members = await this.getRoleMembers(role);\n        if (\n          !members.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n        ) {\n          throw new MissingRoleError(address, role);\n        }\n      }),\n    );\n  }\n}\n","import { AddressZero } from \"@ethersproject/constants\";\nimport {\n  ERC20__factory,\n  ERC721__factory,\n  SignatureMint1155,\n  SignatureMint1155__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike, ethers, Signer } from \"ethers\";\nimport { ModuleType, NATIVE_TOKEN_ADDRESS, Role, RolesMap } from \"../common\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport {\n  MintRequestStructOutput,\n  MintWithSignatureEvent,\n} from \"@3rdweb/contracts/dist/SignatureMint1155\";\nimport {\n  Erc1155SignaturePayload,\n  NewErc1155SignaturePayload,\n} from \"../types/signature-minting\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes } from \"ethers/lib/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface TokenERC1155Metadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  quantityOwnedByAddress: BigNumber;\n}\n\n/**\n * @beta\n */\n\nexport interface TokenERC1155CreateAndMintArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\nexport interface TokenERC1155AlreadyMintedArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nconst MintRequest = [\n  { name: \"to\", type: \"address\" },\n  { name: \"royaltyRecipient\", type: \"address\" },\n  { name: \"royaltyBps\", type: \"uint256\" },\n  { name: \"primarySaleRecipient\", type: \"address\" },\n  { name: \"tokenId\", type: \"uint256\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"quantity\", type: \"uint256\" },\n  { name: \"pricePerToken\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\n/**\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class SignatureMint1155Module\n  extends ModuleWithRoles<SignatureMint1155>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.BUNDLE_SIGNATURE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return SignatureMint1155Module.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): SignatureMint1155 {\n    return SignatureMint1155__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SignatureMint1155Module.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(\n    tokenId: string,\n    address?: string,\n  ): Promise<TokenERC1155Metadata> {\n    const [metadata, supply, ownedByAddress] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage()),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n    ]);\n    return {\n      supply,\n      metadata,\n      quantityOwnedByAddress: BigNumber.from(ownedByAddress),\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // You can get every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   *\n   * // Or you can get optionally get the NFTs owned by a specific wallet\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\n   * const ownedNfts = await module.getAll(address);\n   * console.log(ownedNfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(address?: string): Promise<TokenERC1155Metadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  public async createAndMint(args: TokenERC1155CreateAndMintArgs) {\n    await this.createAndMintTo(await this.getSignerAddress(), args);\n  }\n\n  public async createAndMintTo(\n    to: string,\n    args: TokenERC1155CreateAndMintArgs,\n  ) {\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n    await this.sendTransaction(\"mintTo\", [\n      to,\n      ethers.constants.MaxUint256,\n      uri,\n      args.supply,\n    ]);\n  }\n\n  public async createAndMintBatch(args: TokenERC1155CreateAndMintArgs[]) {\n    await this.createAndMintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async createAndMintBatchTo(\n    to: string,\n    args: TokenERC1155CreateAndMintArgs[],\n  ) {\n    const metadatas = args.map((a) => a.metadata);\n    const amounts = args.map((a) => a.supply);\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const encoded = uris.map((uri, index) =>\n      this.readOnlyContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        ethers.constants.MaxUint256,\n        uri,\n        amounts[index],\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async mintAdditionalCopiesTo(\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs,\n  ) {\n    await this.sendTransaction(\"mintTo\", [to, args.tokenId, \"\", args.amount]);\n  }\n\n  public async mintAdditionalCopiesBatchTo(\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    const encoded = ids.map((id, index) =>\n      this.readOnlyContract.interface.encodeFunctionData(\"mintTo\", [\n        to,\n        id,\n        \"\",\n        amounts[index],\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   * // The number of specified NFTs you want to burn\n   * const amount = 1\n   *\n   * await module.burn({ tokenId, amount });\n   * ```\n   */\n  public async burn(\n    args: TokenERC1155AlreadyMintedArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: TokenERC1155AlreadyMintedArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: TokenERC1155AlreadyMintedArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Transfer Many NFTs\n   *\n   * @remarks Transfer NFTs from the one wallet to another.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to send the NFT from\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The data of the NFTs you want to send\n   * const data = [{\n   *   tokenId: 1, // The token ID of the NFT you want to send\n   *   amount: 1, // The number of this NFT you want to send\n   * }, {\n   *   tokenId: 2,\n   *   amount: 1,\n   * }]\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\n   * ```\n   */\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: TokenERC1155AlreadyMintedArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  /**\n   * Set the royalty recipient and fee for this contract\n   * @param recipientAddress\n   * @param fee\n   */\n  public async setDefaultRoyaltyInfo(\n    recipientAddress: string,\n    fee: number,\n  ): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.fee_recipient = recipientAddress;\n    metadata.seller_fee_basis_points = fee;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setDefaultRoyaltyInfo\", [\n        recipientAddress,\n        fee,\n      ]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Set the royalty recipient and fee for a particular token\n   * @param recipientAddress\n   * @param fee\n   */\n  public async setTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n    recipientAddress: string,\n    fee: number,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setRoyaltyInfoForToken\", [\n      tokenId,\n      recipientAddress,\n      fee,\n    ]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<TokenERC1155Metadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenIdToMint();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (item) => {\n        const token = await this.get(item.tokenId.toString());\n        return { ...token, ownedByAddress: item.balance };\n      }),\n    );\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of the contract\n   *\n   * @returns - The royalty recipient and BPS\n   */\n  public async getDefaultRoyaltyInfo(): Promise<[string, number]> {\n    return await this.readOnlyContract.getDefaultRoyaltyInfo();\n  }\n\n  /**\n   * Gets the royalty recipient and BPS (basis points) of a particular token\n   *\n   * @returns - The royalty recipient and BPS\n   */\n  public async getTokenRoyaltyInfo(\n    tokenId: BigNumberish,\n  ): Promise<[string, number]> {\n    return await this.readOnlyContract.getRoyaltyInfoForToken(tokenId);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  // Signature based minting\n\n  public async mintWithSignature(\n    req: Erc1155SignaturePayload,\n    signature: string,\n  ): Promise<BigNumber> {\n    const message = { ...this.mapPayload(req), uri: req.uri };\n    const overrides = await this.getCallOverrides();\n    await this.setAllowance(\n      BigNumber.from(message.pricePerToken).mul(req.quantity),\n      req.currencyAddress,\n      overrides,\n    );\n\n    const receipt = await this.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n\n    const t = await this.parseLogs<MintWithSignatureEvent>(\n      \"MintWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n\n    return t[0].args.tokenIdMinted;\n  }\n\n  public async verify(\n    mintRequest: Erc1155SignaturePayload,\n    signature: string,\n  ): Promise<boolean> {\n    const message = this.mapPayload(mintRequest);\n    const v = await this.readOnlyContract.verify(\n      { ...message, uri: mintRequest.uri },\n      signature,\n    );\n    return v[0];\n  }\n\n  public async generateSignatureBatch(\n    payloads: NewErc1155SignaturePayload[],\n  ): Promise<{ payload: Erc1155SignaturePayload; signature: string }[]> {\n    const resolveId = (mintRequest: NewErc1155SignaturePayload): string => {\n      if (mintRequest.id === undefined) {\n        const buffer = Buffer.alloc(16);\n        uuidv4({}, buffer);\n        return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n      } else {\n        return hexlify(mintRequest.id as string);\n      }\n    };\n\n    await this.onlyRoles([\"minter\"], await this.getSignerAddress());\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(payloads.map((r) => r.metadata));\n\n    const chainId = await this.getChainID();\n    const signer = this.getSigner() as Signer;\n\n    return await Promise.all(\n      payloads.map(async (m, i) => {\n        const id = resolveId(m);\n        const uri = uris[i];\n        return {\n          payload: {\n            ...m,\n            id,\n            uri,\n          },\n          signature: (\n            await this.signTypedDataEmitEvent(\n              signer,\n              {\n                name: \"SignatureMint1155\",\n                version: \"1\",\n                chainId,\n                verifyingContract: this.address,\n              },\n              { MintRequest },\n              {\n                uri,\n                ...(this.mapPayload(m) as any),\n                uid: id,\n              },\n            )\n          ).toString(),\n        };\n      }),\n    );\n  }\n\n  public async generateSignature(\n    mintRequest: NewErc1155SignaturePayload,\n  ): Promise<{ payload: Erc1155SignaturePayload; signature: string }> {\n    return (await this.generateSignatureBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private mapPayload(\n    mintRequest: Erc1155SignaturePayload | NewErc1155SignaturePayload,\n  ): MintRequestStructOutput {\n    return {\n      to: mintRequest.to,\n      royaltyRecipient: mintRequest.royaltyRecipient,\n      royaltyBps: mintRequest.royaltyBps,\n      primarySaleRecipient: mintRequest.primarySaleRecipient,\n      tokenId: mintRequest.tokenId,\n      quantity: mintRequest.quantity,\n      pricePerToken: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id,\n    } as MintRequestStructOutput;\n  }\n\n  // TODO: write in common place and stop duping\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (\n      currencyAddress === NATIVE_TOKEN_ADDRESS ||\n      currencyAddress === AddressZero\n    ) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n      return overrides;\n    }\n  }\n}\n","import { ethers } from \"ethers\";\nimport { ChainId, SUPPORTED_CHAIN_ID } from \"./chain\";\n\nexport const FORWARDER_ADDRESS = \"0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81\";\nexport const CONTRACT_ADDRESSES: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  Record<\"registry\" | \"biconomyForwarder\", string>\n> = {\n  [ChainId.Mainnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693\",\n  },\n  [ChainId.Rinkeby]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0xFD4973FeB2031D4409fB57afEE5dF2051b171104\",\n  },\n  [ChainId.Polygon]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8\",\n  },\n  [ChainId.Mumbai]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b\",\n  },\n  [ChainId.Avalanche]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x64CD353384109423a966dCd3Aa30D884C9b2E057\",\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: \"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF\",\n  },\n  [ChainId.Fantom]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n  [ChainId.FantomTestnet]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n  [ChainId.Hardhat]: {\n    registry: \"0x902a29f2cfe9f8580ad672AaAD7E917d85ca9a2E\",\n    biconomyForwarder: ethers.constants.AddressZero,\n  },\n};\n\nexport function getContractAddressByChainId(\n  chainId: ChainId,\n  contractName: \"registry\" | \"biconomyForwarder\" = \"registry\",\n): string | undefined {\n  return CONTRACT_ADDRESSES[chainId as SUPPORTED_CHAIN_ID][contractName];\n}\n","import { BaseContract, BigNumber } from \"ethers\";\n\n/**\n * @internal\n */\nexport const ForwardRequest = [\n  { name: \"from\", type: \"address\" },\n  { name: \"to\", type: \"address\" },\n  { name: \"value\", type: \"uint256\" },\n  { name: \"gas\", type: \"uint256\" },\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"data\", type: \"bytes\" },\n];\n\n/**\n * @internal\n */\nexport const BiconomyForwarderAbi = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"from\", type: \"address\" },\n      { internalType: \"uint256\", name: \"batchId\", type: \"uint256\" },\n    ],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _nonces: Record<string, BigNumber> = {};\nconst _noncesSyncTimestamp: Record<string, number> = {};\n\n/**\n * @internal\n */\nexport async function getAndIncrementNonce(\n  forwarder: BaseContract,\n  forwarderFunction: string,\n  forwarderArgs: any[],\n): Promise<BigNumber> {\n  // address is only used for internal caching :)\n  const address = forwarderArgs.join(\"|\");\n\n  const timestamp = _noncesSyncTimestamp[address];\n  // if it's within 2 seconds we're optimistically increment the nonce\n  // should we always sync?\n  const shouldSync = Date.now() - timestamp >= 2000;\n\n  if (!(address in _nonces) || shouldSync) {\n    const nonceResult = await forwarder.functions[forwarderFunction](\n      ...forwarderArgs,\n    );\n    if (Array.isArray(nonceResult) && nonceResult.length > 0) {\n      _nonces[address] = BigNumber.from(nonceResult[0]);\n    } else {\n      _nonces[address] = BigNumber.from(nonceResult);\n    }\n    _noncesSyncTimestamp[address] = Date.now();\n  }\n\n  const nonce = _nonces[address];\n  _nonces[address] = BigNumber.from(_nonces[address]).add(1);\n  return nonce;\n}\n","import { BigNumber, BigNumberish, Contract, ethers, Signer } from \"ethers\";\nimport { EIP712Domain, EIP712StandardDomain, signTypedData } from \"./sign\";\n\nconst NAME_ABI = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst DOMAIN_SEPARATOR_ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getDomainSeperator\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst NONCES_ABI = [\n  {\n    inputs: [{ internalType: \"address\", name: \"owner\", type: \"address\" }],\n    name: \"nonces\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"user\", type: \"address\" }],\n    name: \"getNonce\",\n    outputs: [{ internalType: \"uint256\", name: \"nonce\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nasync function getSignerNonce(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, NONCES_ABI, signer);\n  try {\n    return await contract.nonces(await signer.getAddress());\n  } catch (err) {\n    return await contract.getNonce(await signer.getAddress());\n  }\n}\n\nasync function getDomainSeperator(signer: Signer, contractAddress: string) {\n  const contract = new Contract(contractAddress, DOMAIN_SEPARATOR_ABI, signer);\n  try {\n    return await contract.DOMAIN_SEPARATOR();\n  } catch (err) {\n    return await contract.getDomainSeperator();\n  }\n}\n\nasync function getTokenName(signer: Signer, contractAddress: string) {\n  return new Contract(contractAddress, NAME_ABI, signer).name();\n}\n\n/**\n * Polygon chain has different EIP712 domain separator for USDC, DAI compared to other chains and slightly different than EIP-2612.\n */\nasync function getChainDomainSeperator(\n  signer: Signer,\n  domain: EIP712StandardDomain,\n) {\n  const contractDomainSeparator = await getDomainSeperator(\n    signer,\n    domain.verifyingContract,\n  );\n\n  const polygonDomain: EIP712Domain = {\n    name: domain.name,\n    version: domain.version,\n    verifyingContract: domain.verifyingContract,\n    salt: ethers.utils.hexZeroPad(\n      BigNumber.from(domain.chainId).toHexString(),\n      32,\n    ),\n  };\n\n  if (\n    ethers.utils._TypedDataEncoder.hashDomain(polygonDomain) ===\n    contractDomainSeparator\n  ) {\n    return polygonDomain;\n  }\n\n  return domain;\n}\n\n/**\n * @internal\n */\nexport async function signDAIPermit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  allowed = true,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    nonce,\n    deadline,\n    value: 0,\n    allowed,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"holder\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"expiry\", type: \"uint256\" },\n      { name: \"allowed\", type: \"bool\" },\n    ],\n  };\n\n  const { signature } = await signTypedData(signer, domain, types, {\n    holder: owner,\n    spender,\n    nonce,\n    expiry: deadline,\n    allowed,\n  });\n\n  return {\n    message,\n    signature,\n  };\n}\n\n/**\n * @internal\n */\nexport async function signEIP2612Permit(\n  signer: Signer,\n  currencyAddress: string,\n  owner: string,\n  spender: string,\n  value: BigNumberish,\n  deadline?: BigNumberish,\n  nonce?: BigNumberish,\n) {\n  const domain = await getChainDomainSeperator(signer, {\n    name: await getTokenName(signer, currencyAddress),\n    version: \"1\",\n    chainId: await signer.getChainId(),\n    verifyingContract: currencyAddress,\n  });\n\n  nonce = nonce ?? (await getSignerNonce(signer, currencyAddress)).toString();\n  deadline = deadline ?? ethers.constants.MaxUint256;\n\n  const message = {\n    owner,\n    spender,\n    value,\n    nonce,\n    deadline,\n  };\n\n  const types = {\n    Permit: [\n      { name: \"owner\", type: \"address\" },\n      { name: \"spender\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"nonce\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n  };\n\n  const { signature } = await signTypedData(signer, domain, types, message);\n  return {\n    message,\n    signature,\n  };\n}\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport FileOrBuffer from \"../FileOrBuffer\";\n\n/**\n * CommonModuleMetadata defines the common properties of a module deployment.\n */\n@JsonObject(\"CommonModuleMetadata\")\nexport class CommonModuleMetadata {\n  /**\n   * The name of the module.\n   */\n  @JsonProperty(\"name\", String)\n  name = \"\";\n\n  /**\n   * The description of the module.\n   */\n  @JsonProperty(\"description\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  description?: string = undefined;\n\n  /**\n   * An image for the module.\n   *\n   * If the image is a File or Buffer, it will be uploaded to IPFS.\n   * If the image is a string, it will be used as-is (in case you already uploaded it to IPFS\n   * and the property is the IPFS hash uri).\n   */\n  @JsonProperty(\"image\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  image?: string | FileOrBuffer = undefined;\n\n  /**\n   * An external link for the module.\n   */\n  @JsonProperty(\"external_link\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  externalLink?: string = undefined;\n}\n\nexport default CommonModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"BundleDropModuleMetadata\")\nexport class BundleDropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints? = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\"primary_sale_recipient_address\", String)\n  primarySaleRecipientAddress = \"\";\n}\n\n// For backwards compatibility\nexport default BundleDropModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CollectionModuleMetadata\")\nexport class BundleModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n\nexport type CollectionModuleMetadata = BundleModuleMetadata;\n\nexport default BundleModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"CurrencyModuleMetadata\")\nexport class CurrencyModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n\nexport default CurrencyModuleMetadata;\n","import { JsonObject } from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DatastoreModuleMetadata\")\nexport class DatastoreModuleMetadata extends CommonModuleMetadata {}\n\nexport default DatastoreModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport { CommonModuleMetadata } from \"./CommonModuleMetadata\";\n\n@JsonObject(\"DropModuleMetadata\")\nexport class DropModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints? = 0;\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"primary_sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the Drop Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The max supply\n   *\n   * @deprecated - No longer applicable. This value is ignored.\n   */\n  @JsonProperty(\"max_supply\", Number, PropertyConvertingMode.IGNORE_NULLABLE)\n  maxSupply? = 1;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\"primary_sale_recipient_address\", String)\n  primarySaleRecipientAddress = \"\";\n\n  /**\n   * The IPFS base URI thats prepended to all token URIs. This allows\n   * you to batch upload all the metadata for the tokens ahead of time\n   * so they can be lazy minted later\n   *\n   * e.g. if a Drop Collection has a token URI of /ipfs/BOREDAPES/TOKEN1, then the IPFS base URI is /BOREDAPES/\n   *\n   * @deprecated - No longer applicable. This value is ignored.\n   */\n  @JsonProperty(\n    \"base_token_uri\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  baseTokenUri? = \"\";\n}\n\nexport default DropModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketModuleMetadata\")\nexport class MarketModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n\nexport default MarketModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"MarketplaceModuleMetadata\")\nexport class MarketplaceModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The fee collected on all sales out of this marketplace. This fee\n   * only applies to items sold from the marketplace and does not\n   * include any resale royalties that occur outside of this marketplace.\n   * The default is 0 (no fees).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  marketFeeBasisPoints = 0;\n}\n\nexport default MarketplaceModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"NftModuleMetadata\")\nexport class NftModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n\n  /**\n   * The symbol for the NFT Collection\n   */\n  @JsonProperty(\"symbol\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  symbol?: string;\n\n  /**\n   * The address of the receiver of the initial sale.You can use this field to\n   * distribute the initial sale proceeds. All drop contracts are required to set this field,\n   * even if the tokens are planned to be free. If you plan to do a free drop, you can set this\n   * field to `AddressZero`\n   *\n   * This does not effect royalties in any way.\n   *\n   * For example, if a token is sold for $100, and there is a 0% fee,\n   * then $100 will be distributed to the address set on this property.\n   *\n   * If the token is sold for $100, and there is a 10% primary sale fee,\n   * then $90 will be distributed to the address set on this property.\n   *\n   * All secondary sales will use the `sellerFeeBasisPoints` and royalty recipient address.\n   */\n  @JsonProperty(\n    \"default_sale_recipient_address\",\n    String,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  defaultSaleRecipientAddress? = \"\";\n\n  /**\n   * The amount of fees collected on the primary sale, represented as basis points. The default is 0.\n   *\n   * For example, if the primary sale is $100 and the primary fee is 1000 BPS, then the primary fee of $10\n   * is distributed to the primary sale recipient.\n   *\n   * The destination for this fee is either the project address, or a Splits contract address\n   * if it was set using the `setModuleRoyaltyTreasury` method.\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"sale_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  primarySaleFeeBasisPoints? = 0;\n}\n\nexport default NftModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"PackModuleMetadata\")\nexport class PackModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The amount of royalty collected on all royalties represented as basis points.\n   * The default is 0 (no royalties).\n   *\n   * 1 basis point = 0.01%\n   *\n   * For example: if this value is 100, then the royalty is 1% of the total sales.\n   */\n  @JsonProperty(\n    \"seller_fee_basis_points\",\n    Number,\n    PropertyConvertingMode.IGNORE_NULLABLE,\n  )\n  sellerFeeBasisPoints = 0;\n\n  /**\n   * The address of the royalty recipient. All royalties will be sent\n   * to this address.\n   */\n  @JsonProperty(\"fee_recipient\", String, PropertyConvertingMode.IGNORE_NULLABLE)\n  feeRecipient?: string = undefined;\n}\n\nexport default PackModuleMetadata;\n","import {\n  JsonObject,\n  JsonProperty,\n  PropertyConvertingMode,\n} from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\nimport { NewSplitRecipient } from \"./NewSplitRecipient\";\n\n@JsonObject(\"SplitsModuleMetadata\")\nexport class SplitsModuleMetadata extends CommonModuleMetadata {\n  recipientSplits: NewSplitRecipient[] = [];\n\n  @JsonProperty(\"is_royalty\", Boolean, PropertyConvertingMode.IGNORE_NULLABLE)\n  isRoyalty?: boolean = false;\n}\n\nexport default SplitsModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"TokenModuleMetadata\")\nexport class TokenModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The symbol for the Currency (required)\n   */\n  @JsonProperty(\"symbol\", String)\n  symbol = \"\";\n}\n\nexport default TokenModuleMetadata;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport CommonModuleMetadata from \"./CommonModuleMetadata\";\n\n@JsonObject(\"VoteModuleMetadata\")\nexport class VoteModuleMetadata extends CommonModuleMetadata {\n  /**\n   * The wait time before a proposal can begin being voted on (seconds).\n   */\n  @JsonProperty(\"proposal_start_time_in_seconds\", Number)\n  proposalStartWaitTimeInSeconds = 0;\n\n  /**\n   * How long a proposal is open for voting (seconds).\n   */\n  @JsonProperty(\"proposal_voting_time_in_seconds\", Number)\n  proposalVotingTimeInSeconds = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * Every proposal will wait `votingDelay` number of blocks before it can be voted on.\n   */\n  @JsonProperty(\"voting_delay\", Number)\n  votingDelay? = 0;\n\n  /**\n   * **Do not set this property directly. It will be set by the SDK. Unless you know what you're doing.**\n   *\n   * The voting period is the number of blocks that a proposal will be open for voting.\n   * This varies by chain.\n   */\n  @JsonProperty(\"voting_period\", Number)\n  votingPeriod? = 0;\n\n  /**\n   * The ERC20 token address that is used in the voting process.\n   */\n  @JsonProperty(\"voting_token_address\", String)\n  votingTokenAddress = \"\";\n\n  /**\n   * Quorum required for a proposal to be successful. This value should be between 0-100 and represents a percentage.\n   *\n   * By default it is set to 0.\n   */\n  @JsonProperty(\"voting_quorum_fraction\", Number)\n  votingQuorumFraction = 0;\n\n  /**\n   * The minimum number of tokens required to propose a proposal.\n   */\n  @JsonProperty(\"proposal_token_threshold\", String)\n  minimumNumberOfTokensNeededToPropose = \"0\";\n}\n\nexport default VoteModuleMetadata;\n","import { Provider } from \"@ethersproject/providers\";\nimport {\n  ChainId,\n  SUPPORTED_CHAIN_ID,\n  SUPPORTED_CHAIN_IDS,\n} from \"../common/chain\";\nimport { invariant } from \"../common/invariant\";\n\n/**\n * Fallback map of default block mining times in seconds.\n\n */\nexport const DEFAULT_BLOCK_TIMES_FALLBACK: Record<\n  SUPPORTED_CHAIN_ID | ChainId.Hardhat,\n  { secondsBetweenBlocks: number; synced: boolean }\n> = {\n  [ChainId.Mainnet]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Rinkeby]: {\n    secondsBetweenBlocks: 15,\n    synced: false,\n  },\n  [ChainId.Polygon]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Mumbai]: {\n    secondsBetweenBlocks: 2.5,\n    synced: false,\n  },\n  [ChainId.Fantom]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.FantomTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Avalanche]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.AvalancheFujiTestnet]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n  [ChainId.Hardhat]: {\n    secondsBetweenBlocks: 1,\n    synced: false,\n  },\n};\n\n/**\n * Given a time in second, return the block number that the time is in.\n *\n * @param timeInEpochSeconds - The time in seconds.\n * @param chainId - The chain id.\n * @returns - The block number.\n */\nexport async function estimateBlockAtTime(\n  timeInEpochSeconds: number,\n  provider: Provider,\n): Promise<number> {\n  const secondsUntil = Math.floor(timeInEpochSeconds - Date.now() / 1000);\n\n  const chainId = (await provider.getNetwork()).chainId as SUPPORTED_CHAIN_ID;\n  invariant(\n    SUPPORTED_CHAIN_IDS.includes(chainId),\n    `Chain id ${chainId} is not supported`,\n  );\n\n  invariant(\n    timeInEpochSeconds >= Date.now() / 1000,\n    \"This function should not be used to estimate past block times\",\n  );\n\n  const estimateSecondsBetweenBlocks = async (): Promise<number> => {\n    const blockTimes = [];\n\n    const latest = await provider.getBlock(\"latest\");\n    for (let i = 0; i < 5; i++) {\n      const current = await provider.getBlock(latest.number - i);\n      const previous = await provider.getBlock(latest.number - i - 1);\n\n      const diff = current.timestamp - previous.timestamp;\n      blockTimes.push(diff);\n    }\n\n    const sum = blockTimes.reduce((result, a) => result + a, 0);\n    return sum / blockTimes.length;\n  };\n\n  if (DEFAULT_BLOCK_TIMES_FALLBACK[chainId].synced) {\n    return DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  const latestBlock = await provider.getBlock(\"latest\");\n\n  let secondsBetweenBlocks: number;\n  try {\n    secondsBetweenBlocks = await estimateSecondsBetweenBlocks();\n    DEFAULT_BLOCK_TIMES_FALLBACK[chainId] = {\n      synced: true,\n      secondsBetweenBlocks,\n    };\n  } catch (err) {\n    secondsBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId].secondsBetweenBlocks;\n  }\n\n  console.log(\"Seconds until block\", secondsUntil);\n  const blocksUntil = Math.ceil(secondsUntil / secondsBetweenBlocks);\n  return latestBlock.number + blocksUntil;\n}\n","import { Coin, Coin__factory } from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\n\nexport interface ITokenMintArgs {\n  address: string;\n  amount: BigNumberish;\n}\n\nexport interface ITokenMintFromArgs extends ITokenMintArgs {\n  fromAddress: string;\n}\n\n/**\n * Create a standard crypto token or crypto currency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getTokenModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class TokenModule\n  extends ModuleWithRoles<Coin>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.CURRENCY as const;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return TokenModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Coin {\n    return Coin__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return TokenModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  public async getValue(value: BigNumberish): Promise<CurrencyValue> {\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      this.address,\n      BigNumber.from(value),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  public async balance(): Promise<CurrencyValue> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  /**\n   * Get Token Balance\n   *\n   * @remarks Get a wallets token balance.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check token balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of a specific wallet.\n   */\n  public async balanceOf(address: string): Promise<CurrencyValue> {\n    return await this.getValue(await this.readOnlyContract.balanceOf(address));\n  }\n\n  public async allowance(spender: string): Promise<BigNumber> {\n    return await this.allowanceOf(await this.getSignerAddress(), spender);\n  }\n\n  /**\n   * Get Token Allowance\n   *\n   * @remarks Get the allowance of one wallet over another's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the connected wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet who owns the funds\n   * const address = \"{{wallet_address}}\";\n   *\n   * // Address of the wallet to check token allowance\n   * const otherAddress = \"0x...\";\n   *\n   * const allowance = await module.allowanceOf(address, otherAddress);\n   * console.log(allowance);\n   * ```\n   *\n   * @returns The allowance of one wallet over anothers funds.\n   */\n  public async allowanceOf(owner: string, spender: string): Promise<BigNumber> {\n    return await this.readOnlyContract.allowance(owner, spender);\n  }\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  public async getVoteBalance(): Promise<BigNumber> {\n    return await this.getVoteBalanceOf(await this.getSignerAddress());\n  }\n\n  public async getVoteBalanceOf(account: string): Promise<BigNumber> {\n    return await this.readOnlyContract.getVotes(account);\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  public async getDelegation(): Promise<string> {\n    return await this.getDelegationOf(await this.getSignerAddress());\n  }\n\n  public async getDelegationOf(account: string): Promise<string> {\n    return await this.readOnlyContract.delegates(account);\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  public async delegateTo(\n    delegateeAddress: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"delegate\", [delegateeAddress]);\n  }\n\n  /**\n   * Transfer Tokens\n   *\n   * @remarks Transfer tokens from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   *\n   * // The amount of tokens you want to send\n   * const amount = 0;\n   *\n   * await module.transfer(toAddress, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transfer\", [to, amount]);\n  }\n\n  public async setAllowance(\n    spender: string,\n    amount: BigNumber,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"approve\", [spender, amount]);\n  }\n\n  // owner functions\n  public async mint(amount: BigNumberish) {\n    await this.mintTo(await this.getSignerAddress(), amount);\n  }\n\n  /**\n   * Mint Tokens\n   *\n   * @remarks Mint tokens to a specified address\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the tokens to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to mint\n   * const amount = ethers.utils.parseEther(\"1.5\");\n   *\n   * await module.mintTo(toAddress, amount);\n   * ```\n   */\n  public async mintTo(to: string, amount: BigNumberish) {\n    await this.sendTransaction(\"mint\", [to, amount]);\n  }\n\n  /**\n   * Mint Tokens To Many Wallets\n   *\n   * @remarks Mint tokens to many different wallets\n   *\n   * @example\n   * ```javascript\n   * // Data of the tokens you want to mint\n   * const data = [\n   *   {\n   *     address: \"{{wallet_address}}\", // Address to mint tokens to\n   *     amount: 100, // How many tokens to mint to specified address\n   *   },\n   *  {\n   *    address: \"0x...\",\n   *    amount: 100,\n   *  }\n   * ]\n   *\n   * await module.mintBatchTo(data);\n   * ```\n   */\n  public async mintBatchTo(args: ITokenMintArgs[]) {\n    const encoded = [];\n    for (const arg of args) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"mint\", [\n          arg.address,\n          arg.amount,\n        ]),\n      );\n    }\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Lets you get a all token holders and their corresponding balances\n   * @beta - This can be very slow for large numbers of token holders\n   * @param queryParams - Optional query params\n   * @returns - A JSON object of all token holders and their corresponding balances\n   */\n  public async getAllHolderBalances(): Promise<Record<string, BigNumber>> {\n    const a = await this.contract.queryFilter(this.contract.filters.Transfer());\n    const txns = a.map((b) => b.args);\n    const balances: {\n      [key: string]: BigNumber;\n    } = {};\n    txns.forEach((item) => {\n      const from = item.from;\n      const to = item.to;\n      const amount = item.value;\n\n      if (!(from === AddressZero)) {\n        if (!(from in balances)) {\n          balances[from] = BigNumber.from(0);\n        }\n        balances[from] = balances[from].sub(amount);\n      }\n      if (!(to === AddressZero)) {\n        if (!(to in balances)) {\n          balances[to] = BigNumber.from(0);\n        }\n        balances[to] = balances[to].add(amount);\n      }\n    });\n    return balances;\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 100;\n   *\n   * await module.burn(amount);\n   * ```\n   */\n  public async burn(amount: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [amount]);\n  }\n\n  public async burnFrom(\n    from: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burnFrom\", [from, amount]);\n  }\n\n  /**\n   * Transfer Tokens From Address\n   *\n   * @remarks Transfer tokens from one wallet to another\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the tokens to\n   * const toAddress = \"0x...\";\n   * // The number of tokens you want to send\n   * const amount = 100\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferFrom(fromAddress, toAddress, amount);\n   * ```\n   */\n  public async transferFrom(\n    from: string,\n    to: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, amount]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async transferBatch(args: ITokenMintArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transfer\", [\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async transferFromBatch(args: ITokenMintFromArgs[]) {\n    const encoded = args.map((arg) =>\n      this.contract.interface.encodeFunctionData(\"transferFrom\", [\n        arg.fromAddress,\n        arg.address,\n        arg.amount,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n\n/**\n * @deprecated - see {@link TokenModule}\n */\nexport class CurrencyModule extends TokenModule {}\n","import { SignatureMint1155Module } from \"./signature-mint-1155\";\nimport {\n  Coin__factory,\n  DataStore__factory,\n  IERC20__factory,\n  LazyMintERC1155__factory,\n  LazyMintERC721__factory,\n  Marketplace__factory,\n  Market__factory,\n  NFTCollection__factory,\n  Pack__factory,\n  ProtocolControl,\n  ProtocolControl__factory,\n  Royalty__factory,\n  SignatureMint1155__factory,\n  SignatureMint721__factory,\n  Splits__factory,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, Contract, ethers, Signer } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  ChainlinkVrf,\n  CurrencyValue,\n  getCurrencyValue,\n  isNativeToken,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport { getContractMetadata } from \"../common/contract\";\nimport {\n  getCurrencyBalance,\n  getNativeTokenByChainId,\n} from \"../common/currency\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleType } from \"../common/module-type\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport IAppModule from \"../interfaces/IAppModule\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport {\n  BundleDropModuleMetadata,\n  BundleModuleMetadata,\n  CommonModuleMetadata,\n  CurrencyModuleMetadata,\n  DatastoreModuleMetadata,\n  DropModuleMetadata,\n  MarketModuleMetadata,\n  NewSplitRecipient,\n  NftModuleMetadata,\n  PackModuleMetadata,\n  SplitsModuleMetadata,\n  TokenModuleMetadata,\n  VoteModuleMetadata,\n} from \"../types/module-deployments\";\nimport MarketplaceModuleMetadata from \"../types/module-deployments/MarketplaceModuleMetadata\";\nimport { ModuleMetadata, ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { DEFAULT_BLOCK_TIMES_FALLBACK } from \"../utils/blockTimeEstimator\";\nimport { BundleDropModule } from \"./bundleDrop\";\nimport { CollectionModule } from \"./collection\";\nimport { DatastoreModule } from \"./datastore\";\nimport { DropModule } from \"./drop\";\nimport { MarketModule } from \"./market\";\nimport { MarketplaceModule } from \"./marketplace\";\nimport { NFTModule } from \"./nft\";\nimport { PackModule } from \"./pack\";\nimport { SplitsModule } from \"./royalty\";\nimport { CurrencyModule, TokenModule } from \"./token\";\nimport { VoteModule } from \"./vote\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getAppModule}\n * @public\n */\nexport class AppModule\n  extends ModuleWithRoles<ProtocolControl>\n  implements IAppModule\n{\n  private _shouldCheckVersion = true;\n  private _isV1 = false;\n  private jsonConvert = new JsonConvert();\n\n  public static roles = [RolesMap.admin] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return CurrencyModule.roles;\n  }\n\n  /**\n   * The internal module type for the app module.\n   * We do not treat it as a fully fledged module on the contract level, so it does not have a real type.\n   * @internal\n   * @readonly\n   */\n  private moduleType: ModuleType = -1;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): ProtocolControl {\n    return ProtocolControl__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return this.moduleType;\n  }\n\n  /**\n   * @internal\n   *\n   */\n  private async getModuleAddress(moduleType: ModuleType): Promise<string[]> {\n    return await this.readOnlyContract.getAllModulesOfType(moduleType);\n  }\n\n  private async getNFTAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.NFT);\n  }\n\n  private async getBundleAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.BUNDLE);\n  }\n\n  private async getPackAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.PACK);\n  }\n\n  private async getCurrencyAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.CURRENCY);\n  }\n\n  private async getMarketAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.MARKET);\n  }\n\n  private async getDropAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DROP);\n  }\n\n  private async getDatastoreAddress(): Promise<string[]> {\n    return this.getModuleAddress(ModuleType.DATASTORE);\n  }\n\n  public async getRoyaltyTreasury(address?: string): Promise<string> {\n    return await this.readOnlyContract.getRoyaltyTreasury(\n      address || AddressZero,\n    );\n  }\n\n  /**\n   * @internal\n   * @param addresses - The addresses of the modules to get metadata for.\n   */\n  public async getAllContractMetadata(\n    addresses: string[],\n    resolveGateway = true,\n  ): Promise<ModuleMetadataNoType[]> {\n    const metadatas = await Promise.all(\n      addresses.map((address) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          address,\n          this.sdk.getStorage(),\n          resolveGateway,\n        ).catch((err) => {\n          console.error(\n            `failed to load metadata for contract: ${address}`,\n            err,\n          );\n          return undefined;\n        }),\n      ),\n    );\n    return addresses\n      .filter((d) => d)\n      .map((address, i) => {\n        return {\n          address,\n          metadata: metadatas[i],\n        };\n      });\n  }\n\n  /**\n   * Method to get a list of pack module metadata.\n   * @returns A promise of an array of Pack modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getPackModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getPackAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.PACK,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of NFT module metadata.\n   * @returns A promise of an array of NFT modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getNFTModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getNFTAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.NFT,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of Bundle module metadata.\n   * @returns A promise of an array of Bundle modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCollectionModules(): Promise<ModuleMetadata[]> {\n    return await this.getBundleModules();\n  }\n\n  public async getBundleModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getBundleAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.BUNDLE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Currency module metadata.\n   * @returns A promise of an array of Currency modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getCurrencyModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getCurrencyAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.CURRENCY,\n    }));\n  }\n\n  /**\n   * Method to get a list of Datastore module metadata.\n   * @alpha\n   * @returns A promise of an array of Datastore modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDatastoreModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getDatastoreAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.DATASTORE,\n    }));\n  }\n\n  /**\n   * Method to get a list of Market module metadata.\n   * @returns A promise of an array of Market modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getMarketModules(): Promise<ModuleMetadata[]> {\n    return (\n      await this.getAllContractMetadata(await this.getMarketAddress())\n    ).map((m) => ({\n      ...m,\n      type: ModuleType.MARKET,\n    }));\n  }\n\n  /**\n   * Method to get a list of Drop module metadata.\n   * @returns A promise of an array of Drop modules.\n   * @deprecated - Use {@link AppModule.getAllModuleMetadata} instead\n   */\n  public async getDropModules(): Promise<ModuleMetadata[]> {\n    return (await this.getAllContractMetadata(await this.getDropAddress())).map(\n      (m) => ({\n        ...m,\n        type: ModuleType.DROP,\n      }),\n    );\n  }\n\n  /**\n   * Method to get a list of all module metadata on a given app.\n   * @public\n   * @param filterByModuleType - Optional array of {@link ModuleType} to filter by.\n   * @returns Array of module metadata\n   */\n  public async getAllModuleMetadata(\n    filterByModuleType?: ModuleType[],\n    resolveGateway = true,\n  ): Promise<ModuleMetadata[]> {\n    const moduleTypesToGet = filterByModuleType || [\n      ModuleType.NFT,\n      ModuleType.BUNDLE,\n      ModuleType.PACK,\n      ModuleType.TOKEN,\n      ModuleType.MARKET,\n      ModuleType.DATASTORE,\n      ModuleType.DROP,\n      ModuleType.BUNDLE_DROP,\n      ModuleType.VOTE,\n    ];\n    return (\n      await Promise.all(\n        moduleTypesToGet.map(async (moduleType) => {\n          const moduleAddresses = await this.getModuleAddress(moduleType);\n          return (\n            await this.getAllContractMetadata(moduleAddresses, resolveGateway)\n          ).map((m) => ({\n            ...m,\n            type: moduleType,\n          }));\n        }),\n      )\n    ).reduce((acc, curr) => acc.concat(curr), []);\n  }\n\n  /**\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\n   *\n   * @returns The address of the trusted forwarder contract\n   */\n  public async getForwarder(): Promise<string> {\n    return await this.readOnlyContract.getForwarder();\n  }\n\n  // owner functions\n  /**\n   * Set trusted forwarder for the modules. Every module that is deployed after this call will use the new forwarder.\n   * Trusted forwarder is used to forward gasless transactions. Trusted Forwarder of each module cannot be changed once it is deployed.\n   *\n   * @param address - The address of the trusted forwarder contract\n   */\n  public async setForwarder(address: string): Promise<void> {\n    await this.contract.setForwarder(address);\n  }\n\n  /**\n   * @deprecated - Use setMetadata() instead\n   */\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyTreasury(\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    try {\n      return await this.sendTransaction(\"setRoyaltyTreasury\", [treasury]);\n    } catch (e: any) {\n      if (e?.message?.includes(\"provider shares too low\")) {\n        throw new Error(\n          `Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \"deployRoyaltySplitsModule({...})\".`,\n        );\n      }\n      throw e;\n    }\n  }\n\n  public async setModuleRoyaltyTreasury(\n    moduleAddress: string,\n    treasury: string,\n  ): Promise<TransactionReceipt> {\n    // Note: connecting module address contract. Only need to access setContractURI abi\n    // any Interface with setContractURI can be used.\n    const moduleContract = new Contract(\n      moduleAddress,\n      ProtocolControl__factory.createInterface(),\n      this.providerOrSigner,\n    );\n\n    const metadata = await getContractMetadata(\n      this.providerOrSigner,\n      moduleAddress,\n      this.sdk.getStorage(),\n      false,\n    );\n    const uri = await this.sdk.getStorage().uploadMetadata({\n      ...metadata,\n      fee_recipient: treasury,\n    });\n\n    // static call to make sure the call won't fail.\n    try {\n      await this.contract.callStatic.setModuleRoyaltyTreasury(\n        moduleAddress,\n        treasury,\n      );\n      await moduleContract.callStatic.setContractURI(uri);\n    } catch (e: any) {\n      if (e?.message?.includes(\"provider shares too low\")) {\n        throw new Error(\n          `Missing thirdweb fees. Please set it to a Royalty Splits address, which can deployed using \"deployRoyaltySplitsModule({...})\".`,\n        );\n      }\n      throw e;\n    }\n\n    // can't multicall cause 2 different modules. sad.\n    await this.sendContractTransaction(moduleContract, \"setContractURI\", [uri]);\n    return await this.sendTransaction(\"setModuleRoyaltyTreasury\", [\n      moduleAddress,\n      treasury,\n    ]);\n  }\n\n  /**\n   * Checks to see if an address is either the current protocol\n   * control address, or a splits module address.\n   *\n   * @internal\n   * @param address - The address to check.\n   * @returns - True if the address is of this protocol control or if its a split module.\n   */\n  private async isValidRoyaltyRecipient(address: string): Promise<boolean> {\n    if (address.toLowerCase() === this.address.toLowerCase()) {\n      return true;\n    }\n\n    const contract = this.sdk.getSplitsModule(address);\n    try {\n      await contract.balanceOf(this.address);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  public async withdrawFunds(\n    to: string,\n    currency: string,\n  ): Promise<TransactionReceipt> {\n    const provider = this.readOnlyContract.provider;\n    let lastTransaction: TransactionReceipt | null = null;\n    const isNative = isNativeToken(currency);\n    if (isNative) {\n      currency = ethers.constants.AddressZero;\n    }\n\n    // should fetch for contract only, not treasury\n    const balance = await getCurrencyBalance(provider, currency, this.address);\n    const bn = BigNumber.from(balance.value);\n\n    // tries to withdraw from the project\n    if (bn.gt(0)) {\n      // v1 erc20 doesn't work, so check for v2 or native\n      const isV2 = !(await this.isV1());\n      if (isV2 || isNative) {\n        lastTransaction = await this.sendTransaction(\"withdrawFunds\", [\n          to,\n          currency,\n        ]);\n      }\n    }\n\n    // tries to withdraw from the splits\n    const treasury = await this.getRoyaltyTreasury();\n    if (treasury !== this.address) {\n      const treasuryBalance = await getCurrencyBalance(\n        provider,\n        currency,\n        treasury,\n      );\n      if (BigNumber.from(treasuryBalance.value).gt(0)) {\n        const royalty = Royalty__factory.connect(\n          treasury,\n          this.getSigner() as Signer,\n        );\n        if (isNative) {\n          lastTransaction = await this.sendContractTransaction(\n            royalty,\n            \"distribute()\",\n            [],\n          );\n        } else {\n          lastTransaction = await this.sendContractTransaction(\n            royalty,\n            \"distribute(address)\",\n            [currency],\n          );\n        }\n      }\n    }\n\n    if (!lastTransaction) {\n      throw new Error(\"no funds to withdraw\");\n    }\n\n    return lastTransaction;\n  }\n\n  /**\n   * Helper method that handles `image` property uploads if its a file\n   *\n   * @param metadata - The metadata of the module to be deployed\n   * @returns - The sanitized metadata with an uploaded image ipfs hash\n   */\n  private async _prepareMetadata(metadata: CommonModuleMetadata): Promise<any> {\n    if (typeof metadata.image === \"string\") {\n      return Promise.resolve(metadata);\n    }\n    if (metadata.image === undefined) {\n      return Promise.resolve(metadata);\n    }\n\n    metadata.image = await this.sdk\n      .getStorage()\n      .upload(\n        metadata.image as FileOrBuffer,\n        this.address,\n        await this.getSignerAddress(),\n      );\n    return Promise.resolve(metadata);\n  }\n\n  /**\n   * Helper method that deploys a module and returns its address\n   *\n   * @internal\n   *\n   * @param moduleType - The ModuleType to deploy\n   * @param args - Constructor arguments for the module\n   * @param factory - The ABI factory used to call the `deploy` method\n   * @returns The address of the deployed module\n   */\n  private async _deployModule<T extends ModuleType>(\n    moduleType: T,\n    args: any[],\n    factory: any,\n  ): Promise<string> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    const gasPrice = await this.sdk.getGasPrice();\n    const txOpts = gasPrice\n      ? { gasPrice: ethers.utils.parseUnits(gasPrice.toString(), \"gwei\") }\n      : {};\n\n    const tx = await new ethers.ContractFactory(factory.abi, factory.bytecode)\n      .connect(this.signer as Signer)\n      .deploy(...args, txOpts);\n\n    await tx.deployed();\n    const contractAddress = tx.address;\n\n    const addModuleTx = await this.contract.addModule(\n      contractAddress,\n      moduleType,\n      txOpts,\n    );\n    await addModuleTx.wait();\n    return contractAddress;\n  }\n\n  /**\n   * Throws an error if metadata is invalid\n   *\n   * @param metadata - The metadata to validate\n   */\n  private async verifyMetadata(metadata: {\n    feeRecipient?: string;\n  }): Promise<void> {\n    const shouldUpdateRecipient =\n      metadata.feeRecipient && metadata.feeRecipient !== this.address;\n\n    const isValidFeeRecipient = await this.isValidRoyaltyRecipient(\n      metadata.feeRecipient ? metadata.feeRecipient : this.address,\n    );\n    if (shouldUpdateRecipient && !isValidFeeRecipient) {\n      throw new Error(\n        \"Invalid fee recipient, can only be the Project address or a Splits module address\",\n      );\n    }\n  }\n\n  /**\n   * Deploys a collection module.\n   *\n   * @param metadata - Metadata about the module.\n   * @returns A promise with the newly created module.\n   */\n  public async deployBundleModule(\n    metadata: BundleModuleMetadata,\n  ): Promise<CollectionModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      BundleModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.COLLECTION,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        BigNumber.from(\n          metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        ),\n      ],\n      NFTCollection__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n\n    return this.sdk.getBundleModule(address);\n  }\n\n  /**\n   * Deploys a Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deploySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      metadata.isRoyalty ? Royalty__factory : Splits__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a Royalty Splits module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed splits module\n   */\n  public async deployRoyaltySplitsModule(\n    metadata: SplitsModuleMetadata,\n  ): Promise<SplitsModule> {\n    metadata.isRoyalty = true;\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      SplitsModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.SPLITS,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.recipientSplits.map((s) => s.address),\n        metadata.recipientSplits.map((s) => s.shares),\n      ],\n      Royalty__factory,\n    );\n\n    return this.sdk.getSplitsModule(address);\n  }\n\n  /**\n   * Deploys a NFT module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed NFT module\n   */\n  public async deployNftModule(\n    metadata: NftModuleMetadata,\n  ): Promise<NFTModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      NftModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.NFT,\n      [\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.defaultSaleRecipientAddress\n          ? metadata.defaultSaleRecipientAddress\n          : await this.getSignerAddress(),\n        metadata.sellerFeeBasisPoints,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      SignatureMint721__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getNFTModule(address);\n  }\n\n  /**\n   * Deploys a currency module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployCurrencyModule(\n    metadata: CurrencyModuleMetadata,\n  ): Promise<CurrencyModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getCurrencyModule(address);\n  }\n\n  /**\n   * Deploys a token module.\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed currency module\n   */\n  public async deployTokenModule(\n    metadata: TokenModuleMetadata,\n  ): Promise<TokenModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      CurrencyModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.CURRENCY,\n      [\n        this.address,\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      Coin__factory,\n    );\n\n    return this.sdk.getTokenModule(address);\n  }\n\n  /**\n   * Deploys a Marketplace module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Marketplace module\n   */\n  public async deployMarketModule(\n    metadata: MarketModuleMetadata,\n  ): Promise<MarketModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.MARKET,\n      [\n        this.address,\n        await this.getForwarder(),\n        metadataUri,\n        metadata.marketFeeBasisPoints ? metadata.marketFeeBasisPoints : 0,\n      ],\n      Market__factory,\n    );\n\n    return this.sdk.getMarketModule(address);\n  }\n\n  /**\n   * Deploys a Pack module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Pack module\n   */\n  public async deployPackModule(\n    metadata: PackModuleMetadata,\n  ): Promise<PackModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      PackModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const chainId = await this.getChainID();\n    const { vrfCoordinator, linkTokenAddress, keyHash, fees } =\n      ChainlinkVrf[chainId as keyof typeof ChainlinkVrf];\n\n    const address = await this._deployModule(\n      ModuleType.PACK,\n      [\n        this.address,\n        metadataUri,\n        vrfCoordinator,\n        linkTokenAddress,\n        keyHash,\n        fees,\n        await this.getForwarder(),\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n      ],\n      Pack__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getPackModule(address);\n  }\n\n  /**\n   * Deploys a Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Drop module\n   */\n  public async deployDropModule(\n    metadata: DropModuleMetadata,\n  ): Promise<DropModule> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.DROP,\n      [\n        metadata.name,\n        metadata.symbol ? metadata.symbol : \"\",\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      LazyMintERC721__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getDropModule(address);\n  }\n\n  /**\n   * Deploys a BundleSignature module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed BundleSignature module\n   */\n  public async deployBundleSignatureModule(\n    metadata: DropModuleMetadata,\n  ): Promise<SignatureMint1155Module> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const royaltyTreasury = await this.getRoyaltyTreasury();\n\n    const address = await this._deployModule(\n      ModuleType.BUNDLE_SIGNATURE,\n      [\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.feeRecipient ? metadata.feeRecipient : royaltyTreasury,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      SignatureMint1155__factory,\n    );\n    if (metadata.feeRecipient && metadata.feeRecipient !== royaltyTreasury) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getBundleSignatureModule(address);\n  }\n\n  /**\n   * Deploys a Bundle Drop module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed Bundle Drop module\n   */\n  public async deployBundleDropModule(\n    metadata: BundleDropModuleMetadata,\n  ): Promise<BundleDropModule> {\n    invariant(\n      metadata.primarySaleRecipientAddress !== \"\" &&\n        isAddress(metadata.primarySaleRecipientAddress),\n      \"Primary sale recipient address must be specified and must be a valid address\",\n    );\n\n    await this.verifyMetadata(metadata);\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DropModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.BUNDLE_DROP,\n      [\n        metadataUri,\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadata.primarySaleRecipientAddress,\n        metadata.sellerFeeBasisPoints ? metadata.sellerFeeBasisPoints : 0,\n        metadata.primarySaleFeeBasisPoints\n          ? metadata.primarySaleFeeBasisPoints\n          : 0,\n      ],\n      LazyMintERC1155__factory,\n    );\n    if (\n      metadata.feeRecipient &&\n      metadata.feeRecipient !== (await this.getRoyaltyTreasury())\n    ) {\n      await this.setModuleRoyaltyTreasury(address, metadata.feeRecipient);\n    }\n    return this.sdk.getBundleDropModule(address);\n  }\n\n  /**\n   * Deploys a Datastore module\n   *\n   * @alpha\n   * @param metadata - The module metadata\n   * @returns - The deployed Datastore module\n   */\n  public async deployDatastoreModule(\n    metadata: DatastoreModuleMetadata,\n  ): Promise<DatastoreModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      DatastoreModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.DATASTORE,\n      [this.address, await this.getForwarder(), metadataUri],\n      DataStore__factory,\n    );\n\n    return this.sdk.getDatastoreModule(address);\n  }\n\n  /**\n   * Deploys a Vote module\n   *\n   * @param metadata - The module metadata\n   * @returns - The deployed vote module\n   */\n  public async deployVoteModule(\n    metadata: VoteModuleMetadata,\n  ): Promise<VoteModule> {\n    invariant(\n      metadata.votingTokenAddress !== \"\" &&\n        isAddress(metadata.votingTokenAddress),\n      \"Voting Token Address must be a valid address\",\n    );\n    invariant(\n      metadata.votingQuorumFraction >= 0 &&\n        metadata.votingQuorumFraction <= 100,\n      \"Quofrum Fraction must be in the range of 0-100 representing percentage\",\n    );\n\n    const chainId = await this.getChainID();\n    const timeBetweenBlocks =\n      DEFAULT_BLOCK_TIMES_FALLBACK[chainId as SUPPORTED_CHAIN_ID];\n\n    const waitTimeInBlocks =\n      metadata.proposalStartWaitTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n    const votingTimeInBlocks =\n      metadata.proposalVotingTimeInSeconds /\n      timeBetweenBlocks.secondsBetweenBlocks;\n\n    metadata.votingDelay = waitTimeInBlocks;\n    metadata.votingPeriod = votingTimeInBlocks;\n\n    // verify making sure that the voting token address is valid\n    try {\n      await Coin__factory.connect(\n        metadata.votingTokenAddress,\n        this.readOnlyContract.provider,\n      ).callStatic.getPastTotalSupply(0);\n    } catch (e) {\n      invariant(false, \"Token is not compatible with the vote module\");\n    }\n\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      VoteModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const address = await this._deployModule(\n      ModuleType.VOTE,\n      [\n        metadata.name,\n        metadata.votingTokenAddress,\n        BigNumber.from(Math.ceil(metadata.votingDelay)),\n        BigNumber.from(Math.ceil(metadata.votingPeriod)),\n        BigNumber.from(metadata.minimumNumberOfTokensNeededToPropose),\n        metadata.votingQuorumFraction,\n        await this.getForwarder(),\n        metadataUri,\n      ],\n      VotingGovernor__factory,\n    );\n\n    return this.sdk.getVoteModule(address);\n  }\n\n  public async shouldUpgradeToV2(): Promise<boolean> {\n    if ((await this.isV1()) && this.hasValidSigner()) {\n      const isAdmin = await this.readOnlyContract.hasRole(\n        ethers.utils.hexZeroPad([0], 32),\n        await this.getSignerAddress(),\n      );\n      if (isAdmin && (await this.getRoyaltyTreasury()) === this.address) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public async shouldUpgradeModuleList(): Promise<ModuleMetadata[]> {\n    // if it's v1, we don't want module's fee_recipient to be set to protocol control\n    // it should be set to protocol control's `this.getRoyaltyTreasury()`\n    if (!(await this.isV1())) {\n      return [];\n    }\n\n    // not ready for upgrade yet. need to upgrade app first.\n    // otherwise royalty of sub-modules may point to wrong royalty treasury\n    if ((await this.getRoyaltyTreasury()) === this.address) {\n      return [];\n    }\n\n    const modules = await this.getAllModuleMetadata(\n      [\n        ModuleType.NFT,\n        ModuleType.BUNDLE,\n        ModuleType.PACK,\n        ModuleType.DROP,\n        ModuleType.BUNDLE_DROP,\n      ],\n      false,\n    );\n\n    return modules.filter(\n      (m) =>\n        m.metadata?.fee_recipient?.toLowerCase() === this.address.toLowerCase(),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public async upgradeModuleList(moduleAddresses: string[]) {\n    const signer = this.getSigner();\n    invariant(signer, \"needs a signer\");\n\n    // already filtered to make sure that the fee_recipient is set to the app\n    const allUpgradableModules = await this.shouldUpgradeModuleList();\n\n    // this already returns the correct metadata array with non-resolved metadata...\n    const moduleMetadatas = allUpgradableModules.filter((m) =>\n      moduleAddresses.includes(m.address),\n    );\n\n    const royaltyTreasury = await this.getRoyaltyTreasury();\n\n    // map to address, new updated metadata\n    const metadataUris = await Promise.all(\n      moduleMetadatas.map((m) => {\n        return this.sdk.getStorage().uploadMetadata({\n          ...m.metadata,\n          fee_recipient: royaltyTreasury,\n        });\n      }),\n    );\n\n    const nonce = await signer.getTransactionCount(\"pending\");\n    const txData = metadataUris.map((uri) =>\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    const txs = txData.map((data, i) => ({\n      to: moduleMetadatas[i].address,\n      nonce: nonce + i,\n      data,\n    }));\n\n    // batch send :)\n    const txns = await Promise.all(txs.map((tx) => signer.sendTransaction(tx)));\n\n    // have to actually wait for each txn to be confirmed until we're finished\n    return await Promise.all(txns.map((tx) => tx.wait()));\n  }\n\n  /**\n   *  @internal\n   * Upgrades the protocol control to v2. In v2, the royalty treasury needs to be set to be set to a splits contract.\n   *\n   * @param splitsModuleAddress - Optional. By default, it automatically creates a Splits for the project.\n   * @param splitsRecipients - Optiional. By default, it is the signer who upgrades.\n   */\n  public async upgradeToV2(\n    upgradeOptions: {\n      splitsModuleAddress?: string;\n      splitsRecipients?: NewSplitRecipient[];\n    } = {},\n  ) {\n    if (await this.isV1UpgradedOrV2()) {\n      return;\n    }\n\n    let splitsAddress = \"\";\n    if (upgradeOptions.splitsModuleAddress) {\n      splitsAddress = upgradeOptions.splitsModuleAddress;\n    } else {\n      if (!upgradeOptions.splitsRecipients) {\n        upgradeOptions.splitsRecipients = [\n          {\n            address: await this.getSignerAddress(),\n            shares: 100,\n          },\n        ];\n      }\n\n      const metadata = (await this.getMetadata()).metadata;\n      splitsAddress = (\n        await this.deploySplitsModule({\n          name: `${metadata?.name} Royalty Treasury`,\n          recipientSplits: upgradeOptions.splitsRecipients,\n          isRoyalty: true,\n        })\n      ).address;\n    }\n\n    return await this.setRoyaltyTreasury(splitsAddress);\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<BigNumber> {\n    const projectBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n\n    let treasuryBalance = BigNumber.from(0);\n    const treasury = await this.getRoyaltyTreasury();\n    if (treasury.toLowerCase() !== this.address.toLowerCase()) {\n      treasuryBalance = await this.readOnlyContract.provider.getBalance(\n        treasury,\n      );\n    }\n\n    return projectBalance.add(treasuryBalance);\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    let balance = BigNumber.from(0);\n    if (isNativeToken(tokenAddress)) {\n      balance = await this.balance();\n    } else {\n      const erc20 = IERC20__factory.connect(\n        tokenAddress,\n        this.readOnlyContract.provider,\n      );\n\n      // TODO: multicall :)\n      // only fetch project's erc20 balance if it's not v1\n      if (!(await this.isV1())) {\n        try {\n          balance = balance.add(await erc20.balanceOf(this.address));\n        } catch (e) {\n          // invalid token address\n          console.error(e);\n          throw new Error(\"invalid token address\");\n        }\n      }\n\n      // if it's not upgraded or v2, erc20 balance wont show up\n      const treasury = await this.getRoyaltyTreasury();\n      if (treasury.toLowerCase() !== this.address.toLowerCase()) {\n        try {\n          balance = balance.add(await erc20.balanceOf(treasury));\n        } catch (e) {\n          // invalid token address\n          console.error(e);\n          throw new Error(\"invalid token address\");\n        }\n      }\n    }\n\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, balance);\n  }\n\n  /**\n   * @internal\n   * Check if contract is v1 or v2. If the contract doesn't have version = v1 contract.\n   */\n  async isV1(): Promise<boolean> {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.callStatic.version();\n        this._isV1 = false;\n      } catch (e) {\n        this._isV1 = true;\n      }\n      this._shouldCheckVersion = false;\n    }\n    return this._isV1;\n  }\n\n  /**\n   * @internal\n   */\n  async isV1UpgradedOrV2(): Promise<boolean> {\n    return !(await this.isV1()) || !(await this.shouldUpgradeToV2());\n  }\n\n  public async deployMarketplaceModule(\n    metadata: MarketplaceModuleMetadata,\n  ): Promise<MarketplaceModule> {\n    const serializedMetadata = this.jsonConvert.serializeObject(\n      await this._prepareMetadata(metadata),\n      MarketplaceModuleMetadata,\n    );\n\n    const metadataUri = await this.sdk\n      .getStorage()\n      .uploadMetadata(\n        serializedMetadata,\n        this.address,\n        await this.getSignerAddress(),\n      );\n\n    const nativeTokenWrapperAddress = getNativeTokenByChainId(\n      await this.getChainID(),\n    ).wrapped.address;\n\n    const address = await this._deployModule(\n      ModuleType.MARKETPLACE,\n      [\n        this.address,\n        await this.getForwarder(),\n        nativeTokenWrapperAddress,\n        metadataUri,\n        metadata.marketFeeBasisPoints,\n      ],\n      Marketplace__factory,\n    );\n\n    return this.sdk.getMarketplaceModule(address);\n  }\n}\n","export enum ListingType {\n  Direct = 0,\n  Auction = 1,\n}\n","enum ClaimConditionType {\n  StartTime,\n  LimitPerWallet,\n  MerkleRoot,\n  WaitTimeBetweenClaims,\n}\n\n/**\n * Questions:\n *\n * 1. Can there only be a single `startTimestamp` condition? What is a `startTimestamp` condition?\n *\n * 2. What is `maxMintSupply`?\n *\n * 3. What is `currentMintSupply`?\n *\n * 4. What is `quantityLimitPerTransaction`?\n *\n * 5. What is `waitTimeSecondsLimitPerTransaction`?\n *\n * 6. Can there only be one `pricePerToken`?\n *\n * 7. Can there only be one `pricePerToken`?\n *\n */\n\nexport default ClaimConditionType;\n","export enum ProposalState {\n  Pending,\n  Active,\n  Canceled,\n  Defeated,\n  Succeeded,\n  Queued,\n  Expired,\n  Executed,\n}\n","export enum VoteType {\n  Against = 0,\n  For = 1,\n  Abstain = 2,\n}\n","export enum ClaimEligibility {\n  NotEnoughSupply = \"There is not enough supply to claim.\",\n\n  AddressNotAllowed = \"This address is not on the allowlist.\",\n\n  WaitBeforeNextClaimTransaction = \"Not enough time since last claim transaction. Please wait.\",\n\n  AlreadyClaimed = \"You have already claimed the token.\",\n\n  NotEnoughTokens = \"There are not enough tokens in the wallet to pay for the claim.\",\n\n  NoActiveClaimPhase = \"There is no active claim phase at the moment. Please check back in later.\",\n}\n","import {\n  ERC20__factory,\n  ERC721__factory,\n  NFTCollection as NFTBundleContract,\n  NFTCollection__factory,\n} from \"@3rdweb/contracts\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BytesLike } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { UnderlyingType } from \"./pack\";\n\n/**\n * @beta\n */\n\nexport interface BundleMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: BigNumber;\n  underlyingType: UnderlyingType;\n}\n\nexport interface CollectionMetadata {\n  creator: string;\n  supply: BigNumber;\n  metadata: NFTMetadata;\n  ownedByAddress: BigNumber;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTBundleCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\nexport interface INFTCollectionCreateArgs {\n  metadata: MetadataURIOrObject;\n  supply: BigNumberish;\n}\n\n/**\n * @beta\n */\n\nexport interface INFTCollectionBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\nexport interface INFTBundleBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Create a collection of NFTs that lets you optionally mint multiple copies of each NFT.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class BundleModule\n  extends ModuleWithRoles<NFTBundleContract>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.BUNDLE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): NFTBundleContract {\n    return NFTCollection__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleModule.moduleType;\n  }\n\n  /**\n   *\n   * Get a single bundle item by tokenId.\n   * @param tokenId - the unique token id of the nft\n   * @returns A promise that resolves to a `BundleMetadata`.\n   */\n  public async get(tokenId: string, address?: string): Promise<BundleMetadata> {\n    const [metadata, supply, ownedByAddress, state] = await Promise.all([\n      getTokenMetadata(this.readOnlyContract, tokenId, this.sdk.getStorage()),\n      this.readOnlyContract\n        .totalSupply(tokenId)\n        .catch(() => BigNumber.from(\"0\")),\n      address ? (await this.balanceOf(address, tokenId)).toNumber() : 0,\n      this.readOnlyContract.tokenState(tokenId),\n    ]);\n    return {\n      creator: state.creator,\n      supply,\n      metadata,\n      ownedByAddress: BigNumber.from(ownedByAddress),\n      underlyingType: state.underlyingType,\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // You can get every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   *\n   * // Or you can get optionally get the NFTs owned by a specific wallet\n   * const address = \"{{wallet_address}}\"; // The address you want to get the NFTs for;\n   * const ownedNfts = await module.getAll(address);\n   * console.log(ownedNfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(address?: string): Promise<BundleMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.get(i.toString(), address),\n      ),\n    );\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(\n      await this.getSignerAddress(),\n      tokenId,\n    );\n  }\n\n  public async isApproved(\n    address: string,\n    operator: string,\n    assetContract?: string,\n    assetId?: BigNumberish,\n  ): Promise<boolean> {\n    if (!assetContract) {\n      return await this.readOnlyContract.isApprovedForAll(address, operator);\n    }\n    if (!assetId) {\n      throw new Error(\"tokenId is required\");\n    }\n    const contract = ERC721__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n    const approved = await contract.isApprovedForAll(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    const isTokenApproved =\n      (await contract.getApproved(assetId)).toLowerCase() ===\n      this.address.toLowerCase();\n    return approved || isTokenApproved;\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.transferFrom(\n      await this.getSignerAddress(),\n      to,\n      { tokenId, amount },\n      [0],\n    );\n  }\n\n  // owner functions\n  public async create(metadata: MetadataURIOrObject): Promise<BundleMetadata> {\n    return (await this.createBatch([metadata]))[0];\n  }\n\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleMetadata[]> {\n    const metadataWithSupply = metadatas.map((m) => ({\n      metadata: m,\n      supply: 0,\n    }));\n    return this.createAndMintBatch(metadataWithSupply);\n  }\n\n  /**\n   * Mint NFT\n   *\n   * @remarks Mint an NFT with a specified supply.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * const metadataWithSupply = {\n   *   metadata,\n   *   supply: 1, // The number of this NFT you want to mint\n   * }\n   *\n   * await module.createAndMint(metadataWithSupply);\n   * ```\n   */\n  public async createAndMint(\n    metadataWithSupply: INFTBundleCreateArgs,\n  ): Promise<BundleMetadata> {\n    return (await this.createAndMintBatch([metadataWithSupply]))[0];\n  }\n\n  /**\n   * Mint Many NFTs\n   *\n   * @remarks Mint many different NFTs with specified supplies.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata and supplies of your NFTs\n   * const metadataWithSupply = [{\n   *   supply: 1, // The number of this NFT you want to mint\n   *   metadata: {\n   *     name: \"Cool NFT #1\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }, {\n   *   supply: 1,\n   *   metadata: {\n   *     name: \"Cool NFT #2\",\n   *     description: \"This is a cool NFT\",\n   *     image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   *   },\n   * }];\n   *\n   * await module.createAndMintBatch(metadataWithSupply);\n   * ```\n   */\n  public async createAndMintBatch(\n    metadataWithSupply: INFTBundleCreateArgs[],\n  ): Promise<BundleMetadata[]> {\n    const metadatas = metadataWithSupply.map((a) => a.metadata);\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const supplies = metadataWithSupply.map((a) => a.supply);\n    const to = await this.getSignerAddress();\n    const receipt = await this.sendTransaction(\"createNativeTokens\", [\n      to,\n      uris,\n      supplies,\n      [0],\n    ]);\n    const event = this.parseEventLogs(\"NativeTokens\", receipt?.logs);\n    const tokenIds = event?.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async createWithToken(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    const token = ERC20__factory.connect(tokenContract, this.providerOrSigner);\n    const allowance = await token.allowance(\n      await this.getSignerAddress(),\n      this.address,\n    );\n    if (allowance < tokenAmount) {\n      await token.increaseAllowance(this.address, tokenAmount);\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n    await this.sendTransaction(\"wrapERC20\", [\n      tokenContract,\n      tokenAmount,\n      args.supply,\n      uri,\n    ]);\n  }\n  public async createWithErc20(\n    tokenContract: string,\n    tokenAmount: BigNumberish,\n    args: INFTBundleCreateArgs,\n  ) {\n    return this.createWithToken(tokenContract, tokenAmount, args);\n  }\n\n  public async createWithNFT(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    const asset = ERC721__factory.connect(tokenContract, this.providerOrSigner);\n\n    if (\n      !(await asset.isApprovedForAll(\n        await this.getSignerAddress(),\n        this.address,\n      ))\n    ) {\n      const isTokenApproved =\n        (await asset.getApproved(tokenId)).toLowerCase() ===\n        this.address.toLowerCase();\n      if (!isTokenApproved) {\n        await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n          this.address,\n        ]);\n      }\n    }\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"wrapERC721\", [tokenContract, tokenId, uri]);\n  }\n  public async unwrapNFT(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"redeemERC721\", [tokenId]);\n  }\n  public async unwrapToken(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"redeemERC20\", [tokenId, amount]);\n  }\n\n  public async createWithERC721(\n    tokenContract: string,\n    tokenId: BigNumberish,\n    metadata: MetadataURIOrObject,\n  ) {\n    return this.createWithNFT(tokenContract, tokenId, metadata);\n  }\n\n  public async mint(args: INFTBundleBatchArgs) {\n    await this.mintTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintTo(\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"mint\", [to, args.tokenId, args.amount, data]);\n  }\n\n  public async mintBatch(args: INFTBundleBatchArgs[]) {\n    await this.mintBatchTo(await this.getSignerAddress(), args);\n  }\n\n  public async mintBatchTo(\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"mintBatch\", [to, ids, amounts, data]);\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   * // The number of specified NFTs you want to burn\n   * const amount = 1\n   *\n   * await module.burn({ tokenId, amount });\n   * ```\n   */\n  public async burn(args: INFTBundleBatchArgs): Promise<TransactionReceipt> {\n    return await this.burnFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnBatch(\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    return await this.burnBatchFrom(await this.getSignerAddress(), args);\n  }\n\n  public async burnFrom(\n    account: string,\n    args: INFTBundleBatchArgs,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [\n      account,\n      args.tokenId,\n      args.amount,\n    ]);\n  }\n\n  public async burnBatchFrom(\n    account: string,\n    args: INFTBundleBatchArgs[],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"burnBatch\", [account, ids, amounts]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Transfer Many NFTs\n   *\n   * @remarks Transfer NFTs from the one wallet to another.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to send the NFT from\n   * const fromAddress = \"{{wallet_address}}\";\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The data of the NFTs you want to send\n   * const data = [{\n   *   tokenId: 1, // The token ID of the NFT you want to send\n   *   amount: 1, // The number of this NFT you want to send\n   * }, {\n   *   tokenId: 2,\n   *   amount: 1,\n   * }]\n   *\n   * // Note that the connected wallet must have approval to transfer the tokens of the fromAddress\n   * await module.transferBatchFrom(fromAddress, toAddress, data);\n   * ```\n   */\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: INFTBundleBatchArgs[],\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    return await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (item) => {\n        const token = await this.get(item.tokenId.toString());\n        return { ...token, ownedByAddress: item.balance };\n      }),\n    );\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n","/**\n * @internal\n */\n\nexport function isMetadataEqual(old: any, changed: any): boolean {\n  if (typeof old === \"object\" && typeof changed === \"object\") {\n    const oldKeys = Object.keys(old).sort();\n    const changedKeys = Object.keys(changed).sort();\n    if (oldKeys === changedKeys) {\n      for (let i = 0; i < oldKeys.length; i++) {\n        if (!isMetadataEqual(old[oldKeys[i]], changed[changedKeys[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return old === changed;\n}\n","import { isAddress } from \"@ethersproject/address\";\nimport { BytesLike, hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { InvalidAddressError } from \"../common/error\";\nimport { invariant } from \"../common/invariant\";\nimport { PublicMintCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\n\nexport default class ClaimConditionPhase {\n  // In seconds\n  private _conditionStartTime = Math.floor(Date.now() / 1000);\n\n  private _currencyAddress = \"\";\n\n  private _price: BigNumberish = 0;\n\n  private _maxQuantity: BigNumberish = BigNumber.from(0);\n\n  private _quantityLimitPerTransaction: BigNumberish =\n    ethers.constants.MaxUint256;\n\n  private _merkleRootHash: BytesLike = hexZeroPad([0], 32);\n\n  private _merkleCondition?: SnapshotInfo = undefined;\n\n  private _snapshot?: string[] = undefined;\n\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  private _waitInSeconds: BigNumberish = 0;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Set the price claim condition for the drop.\n   *\n   * @param price - The price of the currency in wei. Must be >= 0.\n   * @param tokenAddress - The address of an ERC20 contract to use as the currency for the claim. By default this is the native currency address which is 0x0000000000000000000000000000000000000000 address.\n   */\n  public setPrice(\n    price: BigNumberish,\n    tokenAddress: string = AddressZero,\n  ): ClaimConditionPhase {\n    if (!isAddress(tokenAddress)) {\n      throw new InvalidAddressError(tokenAddress);\n    }\n    invariant(price >= 0, \"Price cannot be negative\");\n\n    this._price = price;\n    this._currencyAddress = tokenAddress;\n    return this;\n  }\n\n  /**\n   * Set the start time for the claim condition.\n   *\n   * @param startTime - The start time for the claim condition. Can be a Date object or a number of seconds since the epoch.\n   */\n  public setConditionStartTime(when: Date | number): ClaimConditionPhase {\n    if (typeof when === \"number\") {\n      this._conditionStartTime = Math.floor(when);\n    } else {\n      // if its starting in the past, just set it to now\n      this._conditionStartTime = Math.floor(when.getTime() / 1000);\n    }\n    return this;\n  }\n\n  /**\n   * Override the maxQuantity for the claim condition after creating the phase.\n   *\n   * @param maxQuantity - The max quantity NFTs that can be claimed in this phase.\n   */\n  public setMaxQuantity(maxQuantity: BigNumberish): ClaimConditionPhase {\n    this._maxQuantity = maxQuantity;\n    return this;\n  }\n\n  /**\n   * The max quantity of NFTs that can be claimed in a single transaction.\n   *\n   * @param max - The max quantity NFTs that can be claimed in a single transaction.\n   */\n  public setMaxQuantityPerTransaction(max: BigNumberish): ClaimConditionPhase {\n    const maxQuantity = BigNumber.from(max);\n    invariant(maxQuantity.gte(1), \"Max quantity per transaction must be > 0\");\n    this._quantityLimitPerTransaction = maxQuantity;\n    return this;\n  }\n\n  /**\n   * Sets a merkle root hash for the claim condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public setMerkleRoot(root: string): ClaimConditionPhase {\n    this._merkleRootHash = root;\n    return this;\n  }\n\n  /**\n   * Sets a snapshot for the claim condition. You can use a snapshot\n   * to verify a merkle tree condition.\n   *\n   * @param root - The merkle root hash\n   */\n  public setSnapshot(addresses: string[]): ClaimConditionPhase {\n    this._snapshot = addresses;\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public getSnapshot(): SnapshotInfo | undefined {\n    return this._merkleCondition;\n  }\n\n  /**\n   * Helper method that provides defaults for each claim condition.\n   * @internal\n   */\n  public async buildPublicClaimCondition(): Promise<PublicMintCondition> {\n    if (this._snapshot) {\n      this._merkleCondition = await this.createSnapshot(this._snapshot);\n    }\n\n    return {\n      startTimestamp: BigNumber.from(this._conditionStartTime.toString()),\n      pricePerToken: this._price,\n      currency: this._currencyAddress || AddressZero,\n      maxMintSupply: this._maxQuantity,\n      waitTimeSecondsLimitPerTransaction: this._waitInSeconds,\n      quantityLimitPerTransaction: this._quantityLimitPerTransaction,\n      currentMintSupply: 0,\n      merkleRoot: this._merkleCondition?.merkleRoot\n        ? this._merkleCondition.merkleRoot\n        : this._merkleRootHash,\n    };\n  }\n\n  /**\n   * Wait time enforced after calling `claim` before the next `claim` can be called.\n   *\n   * @param waitInSeconds - The wait time in seconds.\n   */\n  public setWaitTimeBetweenClaims(\n    waitInSeconds: BigNumberish,\n  ): ClaimConditionPhase {\n    this._waitInSeconds = waitInSeconds;\n    return this;\n  }\n}\n","import { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { FunctionDeprecatedError } from \"../common/error\";\nimport { PublicClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { SnapshotInfo } from \"../types/snapshots/SnapshotInfo\";\nimport ClaimConditionPhase from \"./ClaimConditionPhase\";\n\nclass ClaimConditionFactory {\n  private phases: ClaimConditionPhase[] = [];\n  private createSnapshot: (leafs: string[]) => Promise<SnapshotInfo>;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(createSnapshotFunc: (leafs: string[]) => Promise<SnapshotInfo>) {\n    this.createSnapshot = createSnapshotFunc;\n  }\n\n  /**\n   * Used internally when creating a drop module/updating\n   * the claim conditions of a drop module.\n   *\n   * @internal\n   *\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\n   */\n  public async buildConditions(): Promise<PublicClaimCondition[]> {\n    let sorted: PublicClaimCondition[] = [];\n    await Promise.all(\n      this.phases.map((c) => c.buildPublicClaimCondition()),\n    ).then((publicClaimConditions) => {\n      // TODO: write test to ensure they're sorted by start time, earliest first\n      sorted = publicClaimConditions.sort((a, b) => {\n        if (a.startTimestamp.eq(b.startTimestamp)) {\n          return 0;\n        } else if (a.startTimestamp.gt(b.startTimestamp)) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Used internally when creating a drop module/updating\n   * the claim conditions of a drop module.\n   *\n   * @internal\n   *\n   * @returns - The claim conditions that will be used when validating a users claim transaction.\n   */\n  public async buildConditionsForDropV1(): Promise<PublicClaimCondition[]> {\n    // v1 startTimestamp takes seconds from now.\n    // v2 takes unix timestamp in seconds.\n    let conditions = await Promise.all(\n      this.phases.map((c) => c.buildPublicClaimCondition()),\n    );\n\n    conditions = conditions.map((c) => {\n      const now = Math.floor(Date.now() / 1000);\n      return {\n        ...c,\n        startTimestamp: c.startTimestamp.lt(now)\n          ? BigNumber.from(0)\n          : c.startTimestamp.sub(now),\n      };\n    });\n\n    // TODO: write test to ensure they're sorted by start time, earliest first\n    const sorted = conditions.sort((a, b) => {\n      if (a.startTimestamp.eq(b.startTimestamp)) {\n        return 0;\n      } else if (a.startTimestamp.gt(b.startTimestamp)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n\n    return sorted;\n  }\n\n  /**\n   * Converts a set of generic `PublicClaimCondition`s into a `ClaimConditionFactory`\n   *\n   * @param conditions - The conditions to load, should be returned directly from the contract.\n   * @returns - The loaded claim condition factory.\n   */\n  public fromPublicClaimConditions(conditions: PublicClaimCondition[]) {\n    const phases = [];\n    for (const condition of conditions) {\n      const phase = new ClaimConditionPhase(this.createSnapshot);\n\n      // If there's a price, there must also be an associated currency\n      if (condition.currency) {\n        phase.setPrice(condition.pricePerToken, condition.currency);\n      }\n\n      if (condition.maxMintSupply) {\n        phase.setMaxQuantity(condition.maxMintSupply);\n      }\n\n      phase.setConditionStartTime(\n        new Date(condition.startTimestamp.toNumber() * 1000),\n      );\n      phases.push(phase);\n    }\n    this.phases = phases;\n    return this;\n  }\n\n  /**\n   * Creates a new claim 'phase' with its own set of claim conditions\n   *\n   * @param startTime - The start time of the phase in epoch seconds or a `Date` object.\n   * @param maxQuantity - The max quantity of the phase. By default, this is set to be infinite. In most cases, if your drop only\n   has a single phase, you don't need to override this value. If your drop has multiple phases, you should override this value and specify how many tokens are available for each specific phase.\n    * @param maxQuantityPerTransaction - The maximum number of claims that can be made in a single transaction. By default, this is set to infinite which means that there is no limit.\n   *\n   * @returns - The claim condition builder.\n   */\n  public newClaimPhase({\n    startTime,\n    maxQuantity = ethers.constants.MaxUint256,\n    maxQuantityPerTransaction = ethers.constants.MaxUint256,\n  }: {\n    startTime: Date | number;\n    maxQuantity?: BigNumberish;\n    maxQuantityPerTransaction?: BigNumberish;\n  }): ClaimConditionPhase {\n    const condition = new ClaimConditionPhase(this.createSnapshot);\n\n    condition.setConditionStartTime(startTime);\n    condition.setMaxQuantity(BigNumber.from(maxQuantity));\n    condition.setMaxQuantityPerTransaction(\n      BigNumber.from(maxQuantityPerTransaction),\n    );\n\n    this.phases.push(condition);\n    return condition;\n  }\n\n  /**\n   * Removes a claim condition phase from the factory.\n   *\n   * @param phase - The phase to remove\n   */\n  public async deleteClaimPhase(index: number): Promise<void> {\n    if (index < 0 || index >= this.phases.length) {\n      return;\n    }\n\n    const sorted = await this.buildConditions();\n    const cleared = sorted.splice(index - 1, 1);\n    this.fromPublicClaimConditions(cleared);\n  }\n\n  /**\n   * @deprecated - Use {@link ClaimConditionFactory.deleteClaimPhase} instead.\n   */\n  public removeClaimPhase(_index: number): void {\n    throw new FunctionDeprecatedError(\"deleteClaimPhase\");\n  }\n\n  /**\n   * Helper method fetches all snapshots from a factory.\n   *\n   * @returns - All snapshots in the condition factory.\n   */\n  public allSnapshots(): SnapshotInfo[] {\n    return this.phases\n      .filter((p) => p.getSnapshot() !== undefined)\n      .map((p) => p.getSnapshot() as SnapshotInfo);\n  }\n}\n\nexport default ClaimConditionFactory;\n","import { JsonObject, JsonProperty } from \"json2typescript\";\n\n/**\n * The model for a claim proof. Currently we support only an address\n * in the leaf of the merkle tree.\n */\n@JsonObject(\"ClaimProof\")\nexport class ClaimProof {\n  /**\n   * The address of the account that owns the claim.\n   */\n  @JsonProperty(\"address\", String)\n  address = \"\";\n\n  /**\n   * The proof of the claim (an array of hashes, depending on tree depth)\n   */\n  @JsonProperty(\"proof\", [String])\n  proof: string[] = [];\n}\n","import { JsonObject, JsonProperty } from \"json2typescript\";\nimport { ClaimProof } from \"./ClaimProof\";\n\n@JsonObject(\"Snapshot\")\nexport class Snapshot {\n  @JsonProperty(\"merkleRoot\", String)\n  merkleRoot = \"\";\n\n  @JsonProperty(\"claims\", [ClaimProof])\n  claims: ClaimProof[] = [];\n}\n","import {\n  ERC20__factory,\n  LazyMintERC1155 as BundleDrop,\n  LazyMintERC1155__factory as BundleDrop__factory,\n} from \"@3rdweb/contracts\";\nimport { ClaimConditionStruct } from \"@3rdweb/contracts/dist/LazyMintERC1155\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike, Contract, ethers } from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  getCurrencyValue,\n  isNativeToken,\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { isMetadataEqual } from \"../common/isMetadataEqual\";\nimport { getTokenMetadata, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ClaimEligibility } from \"../enums\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ClaimCondition } from \"../types/claim-conditions/PublicMintCondition\";\nimport { Snapshot } from \"../types/snapshots\";\n\n/**\n * @beta\n */\nexport interface BundleDropCreateClaimCondition {\n  startTimestamp?: BigNumberish;\n  maxClaimableSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeInSecondsBetweenClaims?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @beta\n */\nexport interface BundleDropMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @internal\n */\nconst OLD_CLAIM_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_quantity\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_proofs\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"claimConditionIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"claimer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quantityClaimed\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ClaimedTokens\",\n    type: \"event\",\n  },\n];\n\n/**\n * Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getBundleDropModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class BundleDropModule\n  extends ModuleWithRoles<BundleDrop>\n  implements ITransferable\n{\n  private _shouldCheckVersion = true;\n  private _isNewClaim = false;\n  public static moduleType: ModuleType = ModuleType.BUNDLE_DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return BundleDropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): BundleDrop {\n    return BundleDrop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return BundleDropModule.moduleType;\n  }\n\n  private async transformResultToClaimCondition(\n    pm: ClaimConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxClaimableSupply.toString(),\n      currentMintSupply: pm.supplyClaimed.toString(),\n      availableSupply: BigNumber.from(pm.maxClaimableSupply)\n        .sub(pm.supplyClaimed)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeInSecondsBetweenClaims.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<BundleDropMetadata> {\n    const [supply, metadata] = await Promise.all([\n      this.readOnlyContract.totalSupply(tokenId).catch(() => BigNumber.from(0)),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return {\n      supply,\n      metadata,\n    };\n  }\n\n  /**\n   * Get NFT Data\n   *\n   * @remarks Get data associated with NFTs in this module.\n   *\n   * @example\n   * ```javascript\n   * // Get data associated with every NFT in the module\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<BundleDropMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of BundleMetadata objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<BundleDropMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenIdToMint();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async (b) => await this.get(b.tokenId.toString())),\n    );\n  }\n\n  public async getActiveClaimCondition(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition> {\n    const index = await this.readOnlyContract.getIndexOfActiveCondition(\n      tokenId,\n    );\n    return this.transformResultToClaimCondition(\n      await this.readOnlyContract.getClaimConditionAtIndex(tokenId, index),\n    );\n  }\n\n  public async getAllClaimConditions(\n    tokenId: BigNumberish,\n  ): Promise<ClaimCondition[]> {\n    const claimCondition = await this.readOnlyContract.claimConditions(tokenId);\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n    for (let i = 0; i < count; i++) {\n      conditions.push(\n        await this.readOnlyContract.getClaimConditionAtIndex(tokenId, i),\n      );\n    }\n    return Promise.all(\n      conditions.map((c) => this.transformResultToClaimCondition(c)),\n    );\n  }\n\n  public async getDefaultSaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  public async getSaleRecipient(tokenId: BigNumberish): Promise<string> {\n    const saleRecipient = await this.readOnlyContract.saleRecipient(tokenId);\n    if (saleRecipient === AddressZero) {\n      return this.readOnlyContract.defaultSaleRecipient();\n    }\n    return saleRecipient;\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of a specific NFT in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   * // The token ID of the NFT you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(\n    address: string,\n    tokenId: BigNumberish,\n  ): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n\n  /*\n   *\n   * @deprecated - {@link BundleDropModule.mintBatch}\n   */\n  public async lazyMintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<BundleDropMetadata[]> {\n    const tokenIds = await this.createBatch(metadatas);\n    return await Promise.all(tokenIds.map((t) => this.get(t.toString())));\n  }\n\n  /**\n   * Create Many NFTs\n   *\n   * @remarks Create and mint NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }];\n   *\n   * await module.createBatch(metadatas);\n   * ```\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n    const receipt = await this.sendTransaction(\"lazyMint\", [\n      metadatas.length,\n      `${baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`}`,\n    ]);\n    const event = this.parseEventLogs(\"LazyMintedTokens\", receipt?.logs);\n    const [startingIndex, endingIndex]: BigNumber[] = event;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  public async setSaleRecipient(\n    tokenId: BigNumberish,\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setSaleRecipient\", [tokenId, recipient]);\n  }\n\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of NFTs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  /**\n   * Sets public claim conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(\n    tokenId: BigNumberish,\n    factory: ClaimConditionFactory,\n  ) {\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n    for (const key of Object.keys(existingMerkle)) {\n      merkleInfo[key] = existingMerkle[key];\n    }\n    metadata[\"merkle\"] = merkleInfo;\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setClaimConditions\", [\n        tokenId,\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  public async updateClaimConditions(\n    tokenId: BigNumberish,\n    factory: ClaimConditionFactory,\n  ) {\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const existingMerkle = \"merkle\" in metadata ? metadata.merkle : {};\n    for (const key of Object.keys(existingMerkle)) {\n      merkleInfo[key] = existingMerkle[key];\n    }\n    metadata[\"merkle\"] = merkleInfo;\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"updateClaimConditions\", [\n        tokenId,\n        conditions,\n      ]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the ClaimConditionFactory instead.\n   */\n  public async setPublicClaimConditions(\n    tokenId: BigNumberish,\n    conditions: BundleDropCreateClaimCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestamp || 0,\n      maxClaimableSupply: c.maxClaimableSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxClaimableSupply,\n      waitTimeInSecondsBetweenClaims: c.waitTimeInSecondsBetweenClaims || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setClaimConditions\", [tokenId, _conditions]);\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n  private async prepareClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ) {\n    const mintCondition = await this.getActiveClaimCondition(tokenId);\n    const overrides = (await this.getCallOverrides()) || {};\n\n    const addressToClaim = await this.getSignerAddress();\n    const { metadata } = await this.getMetadata();\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.sdk\n        .getStorage()\n        .get(metadata?.merkle[mintCondition.merkleRoot.toString()]);\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (isNativeToken(mintCondition.currency)) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n    return {\n      overrides,\n      proofs,\n    };\n  }\n\n  /**\n   * Claim a token to yourself\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n\n  public async claim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(tokenId, quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [await this.getSignerAddress(), tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    } else {\n      return await this.sendContractTransaction(\n        new Contract(this.address, OLD_CLAIM_ABI, this.providerOrSigner),\n        \"claim\",\n        [tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n  }\n\n  /**\n   * Claim NFTs to Wallet\n   *\n   * @remarks Let the a specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to claim the NFTs\n   * const address = \"{{wallet_address}}\";\n   *\n   * // The number of NFTs to claim\n   * const quantity = 1;\n   *\n   * // The token ID of the NFT you want to claim\n   * const tokenId = \"0\"\n   *\n   * await module.claimTo(tokenId, quantity, address);\n   * ```\n   *\n   * @param tokenId - Id of the token you want to claim\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param addressToClaim - Address you want to send the token to\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToClaim: string,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(tokenId, quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [addressToClaim, tokenId, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    const encoded = [];\n\n    // forcing it old version of claim params\n    encoded.push(\n      new Contract(\n        this.address,\n        OLD_CLAIM_ABI,\n        this.providerOrSigner,\n      ).interface.encodeFunctionData(\"claim\", [\n        tokenId,\n        quantity,\n        claimData.proofs,\n      ]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"safeTransferFrom\", [\n        await this.getSignerAddress(),\n        addressToClaim,\n        tokenId,\n        quantity,\n        [0],\n      ]),\n    );\n\n    return await this.sendTransaction(\n      \"multicall\",\n      [encoded],\n      claimData.overrides,\n    );\n  }\n\n  public async burn(\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const account = await this.getSignerAddress();\n    return await this.sendTransaction(\"burn\", [account, tokenId, amount]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n    amount: BigNumberish,\n    data: BytesLike = [0],\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      tokenId,\n      amount,\n      data,\n    ]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * Returns the total supply of a specific token\n   *\n   * @param tokenId - The token ID to get the total supply of\n   */\n\n  public async totalSupply(tokenId: BigNumberish): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply(tokenId);\n  }\n\n  /**\n   * Pulls the list of all addresses that have claimed a particular token\n   *\n   * @beta - This can be very slow for large numbers of token holders\n   *\n   * @param tokenId - The token id to get the claimers of\n   * @returns - A unique list of addresses that claimed the token\n   */\n  public async getAllClaimerAddresses(\n    tokenId: BigNumberish,\n  ): Promise<string[]> {\n    const a = await this.contract.queryFilter(\n      this.contract.filters.ClaimedTokens(null, BigNumber.from(tokenId)),\n    );\n    return Array.from(new Set(a.map((b) => b.args.claimer)));\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param tokenId - The token id that would be claimed.\n   * @param quantity - The desired quantity that would be claimed.\n   * @param addressToCheck - The address that would be claiming the token.\n   */\n  public async getClaimIneligibilityReasons(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.readOnlyContract.getIndexOfActiveCondition(tokenId),\n        this.getActiveClaimCondition(tokenId),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no public mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      console.error(\"Failed to get active claim condition\", err);\n      throw new Error(\"Failed to get active claim condition\");\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRoot.toString();\n      const proofs = await this.getClaimerProofs(merkleLower, addressToCheck);\n      if (proofs.length === 0) {\n        const hashedAddress = ethers.utils\n          .keccak256(addressToCheck)\n          .toLowerCase();\n        if (hashedAddress !== merkleLower) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n        }\n      }\n      // TODO: compute proofs to root, need browser compatibility\n    }\n\n    // check for claim timestamp between claims\n    const timestampForNextClaim =\n      await this.readOnlyContract.getTimestampForNextValidClaim(\n        tokenId,\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(\n          timestampForNextClaim,\n        )\n      ) {\n        const balance = await this.readOnlyContract.balanceOf(\n          addressToCheck,\n          tokenId,\n        );\n\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.pricePerToken.gt(0)) {\n      const totalPrice = claimCondition.pricePerToken.mul(quantity);\n      if (isNativeToken(claimCondition.currency)) {\n        const provider = await this.getProvider();\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const provider = await this.getProvider();\n        const balance = await ERC20__factory.connect(\n          claimCondition.currency,\n          provider,\n        ).balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /*\n   * Checks to see if the current signer can claim the specified number of tokens.\n   *\n   * @param tokenId - The id of the token to check.\n   * @param quantity - The quantity of tokens to check.\n   * @param addressToCheck - The wallet address to check.\n   * @returns - True if the current signer can claim the specified number of tokens, false otherwise.\n   */\n  public async canClaim(\n    tokenId: BigNumberish,\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (!addressToCheck) {\n      addressToCheck = await this.getSignerAddress();\n    }\n    return (\n      (\n        await this.getClaimIneligibilityReasons(\n          tokenId,\n          quantity,\n          addressToCheck,\n        )\n      ).length === 0\n    );\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.sdk\n      .getStorage()\n      .get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewClaim(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isNewClaim;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.VERSION();\n        this._isNewClaim = true;\n      } catch (e) {\n        this._isNewClaim = false;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n}\n","import { DataStore, DataStore__factory } from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumberish, ethers } from \"ethers\";\nimport { ModuleType, Role, RolesMap } from \"../common\";\nimport { ModuleWithRoles } from \"../core/module\";\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getDatastoreModule}\n * @alpha\n */\nexport class DatastoreModule extends ModuleWithRoles<DataStore> {\n  public static moduleType: ModuleType = ModuleType.DATASTORE;\n\n  public static roles = [RolesMap.admin, RolesMap.editor] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DatastoreModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DataStore {\n    return DataStore__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DatastoreModule.moduleType;\n  }\n\n  public async getUint(key: string): Promise<BigNumberish | undefined> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.readOnlyContract.getUint(keyHash);\n  }\n\n  // write functions\n  public async setUint(\n    key: string,\n    value: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    const keyHash = ethers.utils.id(key.toString());\n    return await this.sendTransaction(\"setUint\", [keyHash, value]);\n  }\n}\n","import {\n  ERC20__factory,\n  LazyMintERC721 as DropV2,\n  LazyMintERC721__factory as DropV2__factory,\n  LazyNFT as Drop,\n  LazyNFT__factory as Drop__factory,\n} from \"@3rdweb/contracts\";\nimport { ClaimConditionStructOutput } from \"@3rdweb/contracts/dist/LazyMintERC721\";\nimport { PublicMintConditionStruct } from \"@3rdweb/contracts/dist/LazyNFT\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  Contract,\n  ethers,\n} from \"ethers\";\nimport { JsonConvert } from \"json2typescript\";\nimport {\n  getCurrencyValue,\n  isNativeToken,\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { isMetadataEqual } from \"../common/isMetadataEqual\";\nimport { getTokenMetadata, NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ThirdwebSDK } from \"../core\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject, ProviderOrSigner } from \"../core/types\";\nimport { ClaimEligibility } from \"../enums\";\nimport ClaimConditionFactory from \"../factories/ClaimConditionFactory\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ISDKOptions } from \"../interfaces/ISdkOptions\";\nimport {\n  ClaimCondition,\n  PublicMintCondition,\n} from \"../types/claim-conditions/PublicMintCondition\";\nimport { DEFAULT_QUERY_ALL_COUNT, QueryAllParams } from \"../types/QueryParams\";\nimport { Snapshot } from \"../types/snapshots/Snapshot\";\n\n/**\n * @beta\n */\nexport interface CreatePublicMintCondition {\n  startTimestampInSeconds?: BigNumberish;\n  maxMintSupply: BigNumberish;\n  quantityLimitPerTransaction?: BigNumberish;\n  waitTimeSecondsLimitPerTransaction?: BigNumberish;\n  pricePerToken?: BigNumberish;\n  currency?: string;\n  merkleRoot?: BytesLike;\n}\n\n/**\n * @internal\n */\nconst ABI_V1_22_0 = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"claimConditionIndex\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"claimer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"quantityClaimed\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ClaimedTokens\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_quantity\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32[]\",\n        name: \"_proofs\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"claim\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\n/**\n * @internal\n */\nconst ABI_V1_24_0 = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endTokenId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"baseURI\",\n        type: \"string\",\n      },\n    ],\n    name: \"LazyMintedTokens\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_baseURIForTokens\",\n        type: \"string\",\n      },\n    ],\n    name: \"lazyMint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport interface BatchToReveal {\n  batchId: BigNumber;\n  batchUri: string;\n  placeholderMetadata: NFTMetadata;\n}\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getDropModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class DropModule\n  extends ModuleWithRoles<DropV2>\n  implements ITransferable\n{\n  private _shouldCheckVersion = true;\n  private _isV0 = false;\n  private _version = 0;\n  private v1Module: DropV1Module;\n\n  public static moduleType: ModuleType = ModuleType.DROP;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @internal\n   */\n  constructor(\n    providerOrSigner: ProviderOrSigner,\n    address: string,\n    options: ISDKOptions,\n    sdk: ThirdwebSDK,\n  ) {\n    super(providerOrSigner, address, options, sdk);\n    this.v1Module = new DropV1Module(providerOrSigner, address, options, sdk);\n  }\n\n  /**\n   * @internal\n   */\n  public setProviderOrSigner(providerOrSigner: ProviderOrSigner) {\n    super.setProviderOrSigner(providerOrSigner);\n    this.v1Module?.setProviderOrSigner(providerOrSigner);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): DropV2 {\n    return DropV2__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this module.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    // if v1 module then use v1\n    if (await this.isV0()) {\n      return this.v1Module.getAll(queryParams);\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenIdToMint()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId - start).keys()).map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllUnclaimed();\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (await this.readOnlyContract.nextTokenIdToMint()).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId = await this.readOnlyContract.nextTokenIdToClaim();\n    return (\n      await Promise.all(\n        Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n          this.getTokenMetadata(unmintedId.add(i).toString()),\n        ),\n      )\n    ).map((metadata) => ({ owner: AddressZero, metadata }));\n  }\n\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllClaimed();\n    }\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenIdToClaim()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getDefaultSaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await module.getOwned(address);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * @deprecated - For backward compatibility reason\n   */\n  private transformResultToMintCondition(\n    pm: ClaimConditionStructOutput,\n  ): PublicMintCondition {\n    return {\n      startTimestamp: pm.startTimestamp,\n      maxMintSupply: pm.maxClaimableSupply,\n      currentMintSupply: pm.supplyClaimed,\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction,\n      waitTimeSecondsLimitPerTransaction: pm.waitTimeInSecondsBetweenClaims,\n      pricePerToken: pm.pricePerToken,\n      currency: pm.currency,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  private async transformResultToClaimCondition(\n    pm: ClaimConditionStructOutput,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxClaimableSupply.toString(),\n      currentMintSupply: pm.supplyClaimed.toString(),\n      availableSupply: BigNumber.from(pm.maxClaimableSupply)\n        .sub(pm.supplyClaimed)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeInSecondsBetweenClaims.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\n   */\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    if (await this.isV0()) {\n      return this.v1Module.getActiveMintCondition();\n    }\n    const index = await this.readOnlyContract.getIndexOfActiveCondition();\n    return this.transformResultToMintCondition(\n      await this.readOnlyContract.getClaimConditionAtIndex(index),\n    );\n  }\n\n  public async getActiveClaimCondition(): Promise<ClaimCondition> {\n    if (await this.isV0()) {\n      return this.v1Module.getActiveClaimCondition();\n    }\n    const index = await this.readOnlyContract.getIndexOfActiveCondition();\n    const mc = await this.readOnlyContract.getClaimConditionAtIndex(index);\n    return await this.transformResultToClaimCondition(mc);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\n   */\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllMintConditions();\n    }\n\n    const claimCondition = await this.readOnlyContract.claimConditions();\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n\n    for (let i = 0; i < count; i++) {\n      conditions.push(\n        this.transformResultToMintCondition(\n          await this.readOnlyContract.getClaimConditionAtIndex(i),\n        ),\n      );\n    }\n\n    return conditions;\n  }\n\n  public async getAllClaimConditions(): Promise<ClaimCondition[]> {\n    if (await this.isV0()) {\n      return this.v1Module.getAllClaimConditions();\n    }\n    const claimCondition = await this.readOnlyContract.claimConditions();\n    const count = claimCondition.totalConditionCount.toNumber();\n    const conditions = [];\n    for (let i = 0; i < count; i++) {\n      conditions.push(await this.readOnlyContract.getClaimConditionAtIndex(i));\n    }\n    return Promise.all(\n      conditions.map((c) => this.transformResultToClaimCondition(c)),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToMint();\n  }\n\n  /**\n   * @internal\n   */\n  public async maxTotalSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.maxTotalSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToMint();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalUnclaimedSupply();\n    }\n    return (await this.readOnlyContract.nextTokenIdToMint()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    if (await this.isV0()) {\n      return this.v1Module.totalClaimedSupply();\n    }\n    return await this.readOnlyContract.nextTokenIdToClaim();\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * await module.transfer(toAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    if (await this.isV0()) {\n      await this.v1Module.lazyMint(metadata);\n      return;\n    }\n    await this.createBatch([metadata]);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    if (await this.isV0()) {\n      await this.v1Module.lazyMintBatch(metadatas);\n      return;\n    }\n    await this.createBatch(metadatas);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setMintConditions(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setMintConditions(factory);\n    }\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setClaimConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * Sets public mint conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setClaimCondition(factory);\n    }\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    const defaultMerkleRoot = hexZeroPad([0], 32).toString();\n\n    if (factory.allSnapshots().length > 0) {\n      metadata[\"merkle\"] = merkleInfo;\n    } else if (\n      conditions.filter((c) => c.merkleRoot !== defaultMerkleRoot).length === 0\n    ) {\n      metadata[\"merkle\"] = {};\n    }\n\n    const encoded = [];\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setClaimConditions\", [\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async updateClaimConditions(factory: ClaimConditionFactory) {\n    if (await this.isV0()) {\n      return this.v1Module.setClaimCondition(factory);\n    }\n    const conditions = (await factory.buildConditions()).map((c) => ({\n      startTimestamp: c.startTimestamp,\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction: c.quantityLimitPerTransaction,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction,\n      pricePerToken: c.pricePerToken,\n      currency: c.currency === AddressZero ? NATIVE_TOKEN_ADDRESS : c.currency,\n      merkleRoot: c.merkleRoot,\n    }));\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const encoded = [];\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    const oldMerkle = metadata[\"merkle\"];\n\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    if (!isMetadataEqual(oldMerkle, metadata[\"merkle\"])) {\n      const metadataUri = await this.sdk\n        .getStorage()\n        .upload(JSON.stringify(metadata));\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"setContractURI\", [\n          metadataUri,\n        ]),\n      );\n    }\n\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"updateClaimConditions\", [\n        conditions,\n      ]),\n    );\n\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\n   */\n  public getMintConditionsFactory(): ClaimConditionFactory {\n    return this.getClaimConditionsFactory();\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\n   */\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    if (await this.isV0()) {\n      return this.v1Module.setPublicMintConditions(conditions);\n    }\n    const now = BigNumber.from(Date.now()).div(1000);\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: now.add(c.startTimestampInSeconds || 0),\n      maxClaimableSupply: c.maxMintSupply,\n      supplyClaimed: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeInSecondsBetweenClaims: c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setClaimConditions\", [_conditions]);\n  }\n\n  /**\n   * For any claim conditions that a particular wallet is violating,\n   * this function returns human readable information about the\n   * breaks in the condition that can be used to inform the user.\n   *\n   * @param quantity - The desired quantity that would be claimed.\n   *\n   */\n  public async getClaimIneligibilityReasons(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<ClaimEligibility[]> {\n    const reasons: ClaimEligibility[] = [];\n    let activeConditionIndex: BigNumber;\n    let claimCondition: ClaimCondition;\n\n    if (addressToCheck === undefined) {\n      throw new Error(\"addressToCheck is required\");\n    }\n\n    try {\n      [activeConditionIndex, claimCondition] = await Promise.all([\n        this.readOnlyContract.getIndexOfActiveCondition(),\n        this.getActiveClaimCondition(),\n      ]);\n    } catch (err: any) {\n      if ((err.message as string).includes(\"no public mint condition.\")) {\n        reasons.push(ClaimEligibility.NoActiveClaimPhase);\n        return reasons;\n      }\n      console.error(\"Failed to get active claim condition\", err);\n      throw new Error(\"Failed to get active claim condition\");\n    }\n\n    if (BigNumber.from(claimCondition.availableSupply).lt(quantity)) {\n      reasons.push(ClaimEligibility.NotEnoughSupply);\n    }\n\n    // check for merkle root inclusion\n    const merkleRootArray = ethers.utils.stripZeros(claimCondition.merkleRoot);\n    if (merkleRootArray.length > 0) {\n      const merkleLower = claimCondition.merkleRoot.toString();\n      const proofs = await this.getClaimerProofs(merkleLower, addressToCheck);\n      if (proofs.length === 0) {\n        const hashedAddress = ethers.utils\n          .keccak256(addressToCheck)\n          .toLowerCase();\n        if (hashedAddress !== merkleLower) {\n          reasons.push(ClaimEligibility.AddressNotAllowed);\n        }\n      }\n      // TODO: compute proofs to root, need browser compatibility\n    }\n\n    // check for claim timestamp between claims\n    const timestampForNextClaim =\n      await this.readOnlyContract.getTimestampForNextValidClaim(\n        activeConditionIndex,\n        addressToCheck,\n      );\n\n    const now = BigNumber.from(Date.now()).div(1000);\n    if (now.lt(timestampForNextClaim)) {\n      // if waitTimeSecondsLimitPerTransaction equals to timestampForNextClaim, that means that this is the first time this address claims this token\n      if (\n        BigNumber.from(claimCondition.waitTimeSecondsLimitPerTransaction).eq(\n          timestampForNextClaim,\n        )\n      ) {\n        const balance = await this.readOnlyContract.balanceOf(addressToCheck);\n        if (balance.gte(1)) {\n          reasons.push(ClaimEligibility.AlreadyClaimed);\n        }\n      } else {\n        reasons.push(ClaimEligibility.WaitBeforeNextClaimTransaction);\n      }\n    }\n\n    // check for wallet balance\n    if (claimCondition.pricePerToken.gt(0)) {\n      const totalPrice = claimCondition.pricePerToken.mul(quantity);\n      if (isNativeToken(claimCondition.currency)) {\n        const provider = await this.getProvider();\n        const balance = await provider.getBalance(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      } else {\n        const provider = await this.getProvider();\n        const balance = await ERC20__factory.connect(\n          claimCondition.currency,\n          provider,\n        ).balanceOf(addressToCheck);\n        if (balance.lt(totalPrice)) {\n          reasons.push(ClaimEligibility.NotEnoughTokens);\n        }\n      }\n    }\n\n    return reasons;\n  }\n\n  /**\n   * Can Claim\n   *\n   * @remarks Check if the drop can currently be claimed.\n   *\n   * @example\n   * ```javascript\n   * // Quantity of tokens to check if they are claimable\n   * const quantity = 1;\n   *\n   * await module.canClaim(quantity);\n   * ```\n   */\n  public async canClaim(\n    quantity: BigNumberish,\n    addressToCheck?: string,\n  ): Promise<boolean> {\n    if (addressToCheck === undefined) {\n      addressToCheck = await this.getSignerAddress();\n    }\n    if (await this.isV0()) {\n      return this.v1Module.canClaim(quantity, []);\n    }\n    return (\n      (await this.getClaimIneligibilityReasons(quantity, addressToCheck))\n        .length === 0\n    );\n  }\n\n  /**\n   * Returns proofs and the overrides required for the transaction.\n   *\n   * @returns - `overrides` and `proofs` as an object.\n   */\n\n  private async prepareClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<{\n    overrides: ethers.CallOverrides;\n    proofs: BytesLike[];\n  }> {\n    const mintCondition = await this.getActiveClaimCondition();\n    const { metadata } = await this.getMetadata();\n\n    const addressToClaim = await this.getSignerAddress();\n\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.sdk\n        .getStorage()\n        .get(metadata?.merkle[mintCondition.merkleRoot.toString()]);\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    const overrides = (await this.getCallOverrides()) || {};\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (isNativeToken(mintCondition.currency)) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n    return {\n      overrides,\n      proofs,\n    };\n  }\n\n  /**\n   * Claim NFTs to Wallet\n   *\n   * @remarks Let the a specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to claim the NFTs\n   * const address = \"{{wallet_address}}\";\n   *\n   * // The number of NFTs to claim\n   * const quantity = 1;\n   *\n   * await module.claimTo(quantity, address);\n   * ```\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param addressToClaim - Address you want to send the token to\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claimTo(\n    quantity: BigNumberish,\n    addressToClaim: string,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<TransactionReceipt> {\n    const claimData = await this.prepareClaim(quantity, proofs);\n\n    if (await this.isNewClaim()) {\n      return await this.sendTransaction(\n        \"claim\",\n        [addressToClaim, quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    // backward compatibility for < 1.22.0 claim\n    const contract = new Contract(\n      this.address,\n      ABI_V1_22_0,\n      this.providerOrSigner,\n    );\n    const receipt = await this.sendContractTransaction(\n      contract,\n      \"claim\",\n      [quantity, claimData.proofs],\n      claimData.overrides,\n    );\n\n    const encoded = [];\n    const events = this.parseLogs(\"ClaimedTokens\", receipt?.logs, contract);\n    const startingIndex: BigNumber = events[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"transferFrom\", [\n          await this.getSignerAddress(),\n          addressToClaim,\n          i,\n        ]),\n      );\n    }\n\n    return await this.sendTransaction(\n      \"multicall\",\n      [encoded],\n      claimData.overrides,\n    );\n  }\n\n  /** Claim NFTs\n   *\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param proofs - Array of proofs\n   *\n   * @returns - Receipt for the transaction\n   */\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<NFTMetadataOwner[]> {\n    if (await this.isV0()) {\n      return this.v1Module.claim(quantity, proofs);\n    }\n    const claimData = await this.prepareClaim(quantity, proofs);\n\n    let receipt;\n    let contract: BaseContract = this.contract;\n    if (await this.isNewClaim()) {\n      receipt = await this.sendTransaction(\n        \"claim\",\n        [await this.getSignerAddress(), quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    } else {\n      // backward compatibility for < 1.22.0 claim\n      contract = new Contract(this.address, ABI_V1_22_0, this.providerOrSigner);\n      receipt = await this.sendContractTransaction(\n        contract,\n        \"claim\",\n        [quantity, claimData.proofs],\n        claimData.overrides,\n      );\n    }\n\n    const events = this.parseLogs(\"ClaimedTokens\", receipt?.logs, contract);\n    const startingIndex: BigNumber = events[0].args.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const tokenIds = [];\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      tokenIds.push(BigNumber.from(i.toString()));\n    }\n    return await Promise.all(\n      tokenIds.map(async (t) => await this.get(t.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @beta\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    if (await this.isV0()) {\n      return this.v1Module.createBatch(metadatas);\n    }\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n    let receipt;\n    let contract: BaseContract = this.contract;\n\n    if (await this.hasDelayedReveal()) {\n      receipt = await this.sendTransaction(\"lazyMint\", [\n        metadatas.length,\n        baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n        ethers.utils.toUtf8Bytes(\"\"),\n      ]);\n    } else {\n      contract = new Contract(this.address, ABI_V1_24_0, this.providerOrSigner);\n      receipt = await this.sendContractTransaction(contract, \"lazyMint\", [\n        metadatas.length,\n        baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`,\n      ]);\n    }\n\n    const events = this.parseLogs(\"LazyMintedTokens\", receipt?.logs, contract);\n    const [startingIndex, endingIndex]: BigNumber[] = events[0].args;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  /**\n   * Algorithm to hash delay reveal password, so we don't broadcast the input password on-chain.\n   *\n   * @internal\n   */\n  private async hashDelayRevealPassword(\n    batchTokenIndex: BigNumberish,\n    password: string,\n  ) {\n    const chainId = await this.getChainID();\n    const contractAddress = this.address;\n    return ethers.utils.solidityKeccak256(\n      [\"string\", \"uint256\", \"uint256\", \"address\"],\n      [password, chainId, batchTokenIndex, contractAddress],\n    );\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createDelayedRevealBatch(\n    placeholder: MetadataURIOrObject,\n    metadatas: MetadataURIOrObject[],\n    password: string,\n  ): Promise<string[]> {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"delay reveal unsupported\");\n    }\n\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const { baseUri: placeholderUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch([placeholder], this.address);\n\n    const startFileNumber = await this.readOnlyContract.nextTokenIdToMint();\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas, this.address, startFileNumber.toNumber());\n\n    const baseUriId = await this.readOnlyContract.getBaseURICount();\n    const encryptedBaseUri = await this.readOnlyContract.encryptDecrypt(\n      ethers.utils.toUtf8Bytes(baseUri.endsWith(\"/\") ? baseUri : `${baseUri}/`),\n      await this.hashDelayRevealPassword(baseUriId, password),\n    );\n\n    const receipt = await this.sendTransaction(\"lazyMint\", [\n      metadatas.length,\n      placeholderUri.endsWith(\"/\") ? placeholderUri : `${placeholderUri}/`,\n      encryptedBaseUri,\n    ]);\n\n    const events = this.parseLogs(\"LazyMintedTokens\", receipt?.logs);\n    const [startingIndex, endingIndex]: BigNumber[] = events[0].args;\n    const tokenIds = [];\n    for (let i = startingIndex; i.lte(endingIndex); i = i.add(1)) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }\n\n  public async reveal(batchId: BigNumberish, password: string) {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"delay reveal unsupported\");\n    }\n\n    if (!password) {\n      throw new Error(\"Password is required\");\n    }\n\n    const key = await this.hashDelayRevealPassword(batchId, password);\n\n    // performing the reveal locally to make sure it'd succeed before sending the transaction\n    try {\n      const decryptedUri = await this.contract.callStatic.reveal(batchId, key);\n\n      // basic sanity check for making sure decryptedUri is valid\n      // this is optional because invalid decryption key would result in non-utf8 bytes and\n      // ethers would throw when trying to decode it\n      if (!decryptedUri.includes(\"://\") || !decryptedUri.endsWith(\"/\")) {\n        throw new Error(\n          `Error revealing batch ${batchId} - make sure your password is correct`,\n        );\n      }\n    } catch (e) {\n      console.log(`Error revealing batch ${batchId}`, e);\n      throw new Error(\n        `Error revealing batch ${batchId} - make sure your password is correct`,\n      );\n    }\n\n    await this.sendTransaction(\"reveal\", [batchId, key]);\n  }\n\n  /**\n   * Gets a list of token uris that needs to be revealed.\n   */\n  public async getBatchesToReveal(): Promise<BatchToReveal[]> {\n    if (!(await this.hasDelayedReveal())) {\n      throw new Error(\"Contract does not support delay reveal\");\n    }\n\n    const count = await this.readOnlyContract.getBaseURICount();\n    if (count.isZero()) {\n      return [];\n    }\n\n    const countRangeArray = Array.from(Array(count.toNumber()).keys());\n\n    // map over to get the base uri indices, which should be the end token id of every batch\n    const uriIndices = await Promise.all(\n      countRangeArray.map((i) => this.readOnlyContract.baseURIIndices(i)),\n    );\n\n    // first batch always start from 0. don't need to fetch the last batch so pop it from the range array\n    const uriIndicesWithZeroStart = uriIndices.slice(0, uriIndices.length - 1);\n\n    // returns the token uri for each batches. first batch always starts from token id 0.\n    const tokenUris = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.readOnlyContract.tokenURI(i),\n      ),\n    );\n\n    const tokenMetadatas = await Promise.all(\n      Array.from([0, ...uriIndicesWithZeroStart]).map((i) =>\n        this.getTokenMetadata(i.toString()),\n      ),\n    );\n\n    // index is the uri indicies, which is end token id. different from uris\n    const encryptedBaseUris = await Promise.all(\n      Array.from([...uriIndices]).map((i) =>\n        this.readOnlyContract.encryptedBaseURI(i),\n      ),\n    );\n\n    return tokenUris\n      .map((uri, index) => ({\n        batchId: BigNumber.from(index),\n        batchUri: uri,\n        placeholderMetadata: tokenMetadatas[index],\n      }))\n      .filter(\n        (_, index) => ethers.utils.hexDataLength(encryptedBaseUris[index]) > 0,\n      );\n  }\n\n  /**\n   * @internal\n   *\n   * @returns - True if the batch has been created, false otherwise.\n   */\n  public async canCreateBatch(): Promise<boolean> {\n    if (await this.isV0()) {\n      return this.v1Module.canCreateBatch();\n    }\n    return true;\n  }\n\n  /**\n   * Check if contract is v0 or not. If the contract doesn't have nextTokenIdToMint = v0 contract.\n   * @internal\n   */\n  private async isV0(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isV0;\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewClaim(): Promise<boolean> {\n    await this.checkVersion();\n    return this._version >= 1;\n  }\n\n  /**\n   * @internal\n   */\n  public async hasDelayedReveal(): Promise<boolean> {\n    await this.checkVersion();\n    return this._version >= 2;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.nextTokenIdToMint();\n        this._isV0 = false;\n      } catch (e) {\n        this._isV0 = true;\n      }\n\n      try {\n        this._version = (await this.readOnlyContract.VERSION()).toNumber();\n      } catch (e) {\n        this._version = 0;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.sdk\n      .getStorage()\n      .get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n\n/**\n * @internal\n * @deprecated - Should use DropV2\n */\nclass DropV1Module extends ModuleWithRoles<Drop> implements ITransferable {\n  public static moduleType: ModuleType = ModuleType.DROP;\n  storage = this.sdk.getStorage();\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return DropModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Drop {\n    return Drop__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return DropModule.moduleType;\n  }\n\n  private async getTokenMetadata(tokenId: string): Promise<NFTMetadata> {\n    return await getTokenMetadata(\n      this.readOnlyContract,\n      tokenId,\n      this.sdk.getStorage(),\n    );\n  }\n\n  public async get(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId).catch(() => AddressZero),\n      this.getTokenMetadata(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAll(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId - start).keys()).map((i) =>\n        this.get((start + i).toString()),\n      ),\n    );\n  }\n\n  public async getAllUnclaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = BigNumber.from(\n      Math.min(\n        (await this.readOnlyContract.nextTokenId()).toNumber(),\n        start + count,\n      ),\n    );\n    const unmintedId = await this.readOnlyContract.nextMintTokenId();\n    return (\n      await Promise.all(\n        Array.from(Array(maxId.sub(unmintedId).toNumber()).keys()).map((i) =>\n          this.getTokenMetadata(unmintedId.add(i).toString()),\n        ),\n      )\n    ).map((metadata) => ({ owner: AddressZero, metadata }));\n  }\n\n  public async getAllClaimed(\n    queryParams?: QueryAllParams,\n  ): Promise<NFTMetadataOwner[]> {\n    const start = BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = BigNumber.from(\n      queryParams?.count || DEFAULT_QUERY_ALL_COUNT,\n    ).toNumber();\n    const maxId = Math.min(\n      (await this.readOnlyContract.nextMintTokenId()).toNumber(),\n      start + count,\n    );\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async ownerOf(tokenId: string): Promise<string> {\n    return await this.readOnlyContract.ownerOf(tokenId);\n  }\n\n  public async getOwned(_address?: string): Promise<NFTMetadataOwner[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  private async transformResultToClaimCondition(\n    pm: PublicMintConditionStruct,\n  ): Promise<ClaimCondition> {\n    const cv = await getCurrencyValue(\n      this.providerOrSigner,\n      pm.currency,\n      pm.pricePerToken,\n    );\n    return {\n      startTimestamp: new Date(\n        BigNumber.from(pm.startTimestamp).toNumber() * 1000,\n      ),\n      maxMintSupply: pm.maxMintSupply.toString(),\n      currentMintSupply: pm.currentMintSupply.toString(),\n      availableSupply: BigNumber.from(pm.maxMintSupply)\n        .sub(pm.currentMintSupply)\n        .toString(),\n      quantityLimitPerTransaction: pm.quantityLimitPerTransaction.toString(),\n      waitTimeSecondsLimitPerTransaction:\n        pm.waitTimeSecondsLimitPerTransaction.toString(),\n      price: BigNumber.from(pm.pricePerToken),\n      pricePerToken: BigNumber.from(pm.pricePerToken),\n      currency: pm.currency,\n      currencyContract: pm.currency,\n      currencyMetadata: cv,\n      merkleRoot: pm.merkleRoot,\n    };\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getActiveClaimCondition} instead\n   */\n  public async getActiveMintCondition(): Promise<PublicMintCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    return await this.readOnlyContract.mintConditions(index);\n  }\n\n  public async getActiveClaimCondition(): Promise<ClaimCondition> {\n    const index =\n      await this.readOnlyContract.getLastStartedMintConditionIndex();\n    const mc = await this.readOnlyContract.mintConditions(index);\n    return await this.transformResultToClaimCondition(mc);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.getAllClaimConditions} instead\n   */\n  public async getAllMintConditions(): Promise<PublicMintCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        conditions.push(await this.readOnlyContract.mintConditions(i));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async getAllClaimConditions(): Promise<ClaimCondition[]> {\n    const conditions = [];\n    for (let i = 0; ; i++) {\n      try {\n        const mc = await this.readOnlyContract.mintConditions(i);\n        conditions.push(await this.transformResultToClaimCondition(mc));\n      } catch (e) {\n        break;\n      }\n    }\n    return conditions;\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextTokenId();\n  }\n\n  public async maxTotalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.maxTotalSupply();\n  }\n\n  public async totalUnclaimedSupply(): Promise<BigNumber> {\n    return (await this.readOnlyContract.nextTokenId()).sub(\n      await this.totalClaimedSupply(),\n    );\n  }\n\n  public async totalClaimedSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.nextMintTokenId();\n  }\n\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `createBatch` instead.\n   */\n  public async lazyMint(metadata: MetadataURIOrObject) {\n    await this.lazyMintBatch([metadata]);\n  }\n\n  public async pinToIpfs(files: Buffer[]): Promise<string> {\n    return await this.storage.uploadBatch(files, this.address);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintBatch(metadatas: MetadataURIOrObject[]) {\n    const { baseUri } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const uris = Array.from(Array(metadatas.length).keys()).map(\n      (i) => `${baseUri}${i}/`,\n    );\n    await this.sendTransaction(\"lazyMintBatch\", [uris]);\n  }\n\n  /**\n   * @deprecated - The function has been deprecated. Use `mintBatch` instead.\n   */\n  public async lazyMintAmount(amount: BigNumberish) {\n    await this.sendTransaction(\"lazyMintAmount\", [amount]);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setMintConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * @deprecated - Use {@link DropModule.setClaimCondition} instead\n   */\n  public async setClaimConditions(factory: ClaimConditionFactory) {\n    return this.setClaimCondition(factory);\n  }\n\n  /**\n   * Sets public mint conditions for the next minting using the\n   * claim condition factory.\n   *\n   * @param factory - The claim condition factory.\n   */\n  public async setClaimCondition(factory: ClaimConditionFactory) {\n    const conditions = await factory.buildConditionsForDropV1();\n\n    const merkleInfo: { [key: string]: string } = {};\n    factory.allSnapshots().forEach((s) => {\n      merkleInfo[s.merkleRoot] = s.snapshotUri;\n    });\n    const { metadata } = await this.getMetadata(false);\n    invariant(metadata, \"Metadata is not set, this should never happen\");\n    if (factory.allSnapshots().length === 0 && \"merkle\" in metadata) {\n      metadata[\"merkle\"] = {};\n    } else {\n      metadata[\"merkle\"] = merkleInfo;\n    }\n\n    const metatdataUri = await this.storage.upload(JSON.stringify(metadata));\n\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [\n        metatdataUri,\n      ]),\n      this.contract.interface.encodeFunctionData(\"setPublicMintConditions\", [\n        conditions,\n      ]),\n    ];\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * Creates a claim condition factory\n   *\n   * @returns - A new claim condition factory\n   */\n  public getClaimConditionsFactory(): ClaimConditionFactory {\n    const createSnapshotFunc = this.sdk.createSnapshot.bind(this.sdk);\n    const factory = new ClaimConditionFactory(createSnapshotFunc);\n    return factory;\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.getClaimConditionsFactory} instead.\n   */\n  public getMintConditionsFactory(): ClaimConditionFactory {\n    return this.getClaimConditionsFactory();\n  }\n\n  /**\n   * @deprecated - Use the {@link DropModule.setClaimConditions} instead.\n   */\n  public async setPublicMintConditions(\n    conditions: CreatePublicMintCondition[],\n  ) {\n    const _conditions = conditions.map((c) => ({\n      startTimestamp: c.startTimestampInSeconds || 0,\n      maxMintSupply: c.maxMintSupply,\n      currentMintSupply: 0,\n      quantityLimitPerTransaction:\n        c.quantityLimitPerTransaction || c.maxMintSupply,\n      waitTimeSecondsLimitPerTransaction:\n        c.waitTimeSecondsLimitPerTransaction || 0,\n      pricePerToken: c.pricePerToken || 0,\n      currency: c.currency || AddressZero,\n      merkleRoot: c.merkleRoot || hexZeroPad([0], 32),\n    }));\n    await this.sendTransaction(\"setPublicMintConditions\", [_conditions]);\n  }\n\n  public async canClaim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<boolean> {\n    try {\n      const mintCondition = await this.getActiveClaimCondition();\n      const overrides = (await this.getCallOverrides()) || {};\n\n      const owner = await this.getSignerAddress();\n      if (mintCondition.merkleRoot) {\n        proofs = await this.getClaimerProofs(\n          mintCondition?.merkleRoot as string,\n          owner,\n        );\n      }\n\n      if (mintCondition.pricePerToken.gt(0)) {\n        if (mintCondition.currency === AddressZero) {\n          overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n            quantity,\n          );\n        } else {\n          const erc20 = ERC20__factory.connect(\n            mintCondition.currency,\n            this.providerOrSigner,\n          );\n          const spender = this.address;\n          const allowance = await erc20.allowance(owner, spender);\n          const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n            BigNumber.from(quantity),\n          );\n\n          if (allowance.lt(totalPrice)) {\n            // TODO throw allowance error, maybe check balance?\n          }\n        }\n      }\n      await this.contract.callStatic.claim(quantity, proofs, overrides);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Fetches the proof for the current signer for a particular wallet.\n   *\n   * @param merkleRoot - The merkle root of the condition to check.\n   * @returns - The proof for the current signer for the specified condition.\n   */\n  private async getClaimerProofs(\n    merkleRoot: string,\n    addressToClaim?: string,\n  ): Promise<string[]> {\n    if (!addressToClaim) {\n      addressToClaim = await this.getSignerAddress();\n    }\n    const { metadata } = await this.getMetadata();\n    const snapshot = await this.storage.get(metadata?.merkle[merkleRoot]);\n    const jsonConvert = new JsonConvert();\n    const snapshotData = jsonConvert.deserializeObject(\n      JSON.parse(snapshot),\n      Snapshot,\n    );\n    const item = snapshotData.claims.find(\n      (c) => c.address.toLowerCase() === addressToClaim?.toLowerCase(),\n    );\n    if (item === undefined) {\n      return [];\n    }\n    return item.proof;\n  }\n\n  public async claim(\n    quantity: BigNumberish,\n    proofs: BytesLike[] = [hexZeroPad([0], 32)],\n  ): Promise<NFTMetadataOwner[]> {\n    const mintCondition = await this.getActiveClaimCondition();\n    const { metadata } = await this.getMetadata();\n\n    const addressToClaim = await this.getSignerAddress();\n\n    if (!mintCondition.merkleRoot.toString().startsWith(AddressZero)) {\n      const snapshot = await this.storage.get(\n        metadata?.merkle[mintCondition.merkleRoot.toString()],\n      );\n      const jsonConvert = new JsonConvert();\n      const snapshotData = jsonConvert.deserializeObject(\n        JSON.parse(snapshot),\n        Snapshot,\n      );\n      const item = snapshotData.claims.find(\n        (c) => c.address.toLowerCase() === addressToClaim.toLowerCase(),\n      );\n      if (item === undefined) {\n        throw new Error(\"No claim found for this address\");\n      }\n      proofs = item.proof;\n    }\n\n    const overrides = (await this.getCallOverrides()) || {};\n    if (mintCondition.pricePerToken.gt(0)) {\n      if (mintCondition.currency === AddressZero) {\n        overrides[\"value\"] = BigNumber.from(mintCondition.pricePerToken).mul(\n          quantity,\n        );\n      } else {\n        const erc20 = ERC20__factory.connect(\n          mintCondition.currency,\n          this.providerOrSigner,\n        );\n        const owner = await this.getSignerAddress();\n        const spender = this.address;\n        const allowance = await erc20.allowance(owner, spender);\n        const totalPrice = BigNumber.from(mintCondition.pricePerToken).mul(\n          BigNumber.from(quantity),\n        );\n\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n    }\n\n    const receipt = await this.sendTransaction(\n      \"claim\",\n      [quantity, proofs],\n      overrides,\n    );\n    const event = this.parseEventLogs(\"Claimed\", receipt?.logs);\n    const startingIndex: BigNumber = event.startTokenId;\n    const endingIndex = startingIndex.add(quantity);\n    const tokenIds = [];\n    for (let i = startingIndex; i.lt(endingIndex); i = i.add(1)) {\n      tokenIds.push(BigNumber.from(i.toString()));\n    }\n    return await Promise.all(\n      tokenIds.map(async (t) => await this.get(t.toString())),\n    );\n  }\n\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.storage.uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata();\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.storage.uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setBaseTokenUri(uri: string): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setBaseTokenURI\", [uri]);\n  }\n\n  public async setMaxTotalSupply(\n    amount: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMaxTotalSupply\", [amount]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  /**\n   * Create batch allows you to create a batch of tokens\n   * in one transaction. This function can only be called\n   * once per module at the moment.\n   *\n   * @beta\n   *\n   * @param metadatas - The metadata to include in the batch.\n   */\n  public async createBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<string[]> {\n    if (!(await this.canCreateBatch())) {\n      throw new Error(\"Batch already created!\");\n    }\n\n    const startFileNumber = await this.readOnlyContract.nextMintTokenId();\n    const { baseUri } = await this.storage.uploadMetadataBatch(\n      metadatas,\n      this.address,\n      startFileNumber.toNumber(),\n    );\n    const encoded = [\n      this.contract.interface.encodeFunctionData(\"setBaseTokenURI\", [baseUri]),\n      this.contract.interface.encodeFunctionData(\"lazyMintAmount\", [\n        metadatas.length,\n      ]),\n    ];\n    await this.sendTransaction(\"multicall\", [encoded]);\n    return [];\n  }\n\n  /**\n   * @internal\n   *\n   * @returns - True if the batch has been created, false otherwise.\n   */\n  public async canCreateBatch(): Promise<boolean> {\n    return (await this.readOnlyContract.nextTokenId()).eq(0);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n}\n// This is a deprecated class, DropV1, see above\n","import { BigNumberish } from \"ethers\";\n\nexport const DEFAULT_QUERY_ALL_COUNT = 100;\n\n// in the future we can support sorting too, but only pagination for now\nexport interface QueryAllParams {\n  start: BigNumberish;\n  count: BigNumberish;\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Market,\n  Market__factory,\n} from \"@3rdweb/contracts\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish } from \"ethers\";\nimport {\n  ModuleType,\n  QuantityAboveLimitError,\n  MissingOwnerRoleError,\n  Role,\n  RolesMap,\n  MissingRoleError,\n} from \"../common\";\nimport { InterfaceId_IERC721 } from \"../common/contract\";\nimport { CurrencyValue, getCurrencyValue } from \"../common/currency\";\nimport { invariant } from \"../common/invariant\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\n\n/**\n * Filter options for the Market module.\n * @public\n */\nexport interface ListingFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: string;\n}\n\n/**\n * Metadata for items listed on a Market module.\n * @public\n */\nexport interface ListingMetadata {\n  id: string;\n  seller: string;\n  tokenContract: string;\n  tokenId: string;\n  tokenMetadata?: NFTMetadata;\n  quantity: BigNumber;\n  tokensPerBuyer: BigNumber;\n  currencyContract: string;\n  currencyMetadata: CurrencyValue | null;\n  price: BigNumber;\n  saleStart: Date | null;\n  saleEnd: Date | null;\n}\n\n/**\n * Access this module by calling {@link ThirdwebSDK.getMarketModule}\n * @public\n *\n * @deprecated\n */\nexport class MarketModule extends ModuleWithRoles<Market> {\n  public static moduleType: ModuleType = ModuleType.MARKET;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.pauser,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Market {\n    return Market__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketModule.moduleType;\n  }\n\n  private async transformResultToListing(\n    listing: any,\n  ): Promise<ListingMetadata> {\n    let currency: CurrencyValue | null = null;\n\n    try {\n      currency = await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.pricePerToken,\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    let metadata: NFTMetadata | undefined = undefined;\n    try {\n      metadata = await getMetadataWithoutContract(\n        this.providerOrSigner,\n        listing.assetContract,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      );\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return {\n      id: listing.listingId.toString(),\n      seller: listing.seller,\n      tokenId: listing.tokenId.toString(),\n      tokenContract: listing.assetContract,\n      tokenMetadata: metadata,\n      quantity: listing.quantity,\n      price: listing.pricePerToken,\n      currencyContract: listing.currency,\n      tokensPerBuyer: listing.tokensPerBuyer,\n      currencyMetadata: currency,\n      saleStart: listing.saleStart.gt(0)\n        ? new Date(listing.saleStart.toNumber() * 1000)\n        : null,\n      saleEnd:\n        listing.saleEnd.gt(0) &&\n        listing.saleEnd.lte(Number.MAX_SAFE_INTEGER - 1)\n          ? new Date(listing.saleEnd.toNumber() * 1000)\n          : null,\n    };\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.get} instead.\n   */\n  public async getListing(listingId: string): Promise<ListingMetadata> {\n    return await this.get(listingId);\n  }\n\n  /**\n   * @deprecated Use {@link MarketModule.getAll} instead.\n   */\n  public async getAllListings(\n    filter?: ListingFilter,\n  ): Promise<ListingMetadata[]> {\n    return await this.getAll(filter);\n  }\n\n  public async get(listingId: string): Promise<ListingMetadata> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    return await this.transformResultToListing(listing);\n  }\n\n  public async getAll(filter?: ListingFilter): Promise<ListingMetadata[]> {\n    let listings: any[] = [];\n\n    if (!filter) {\n      listings = listings.concat(await this.readOnlyContract.getAllListings());\n    } else {\n      if (filter.tokenContract && filter.tokenId) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAsset(\n            filter.tokenContract,\n            filter.tokenId,\n          ),\n        );\n      } else if (filter.seller) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsBySeller(filter.seller),\n        );\n      } else if (filter.tokenContract) {\n        listings = listings.concat(\n          await this.readOnlyContract.getListingsByAssetContract(\n            filter.tokenContract,\n          ),\n        );\n      } else {\n        listings = listings.concat(\n          await this.readOnlyContract.getAllListings(),\n        );\n      }\n    }\n\n    listings = listings\n      .filter((l) => {\n        if (l.quantity.eq(0)) {\n          return false;\n        }\n        if (filter) {\n          const filterSeller = filter?.seller || \"\";\n          const filterTokenContract = filter?.tokenContract || \"\";\n          const filterTokenId = filter?.tokenId || \"\";\n\n          if (\n            filterSeller &&\n            filterSeller.toLowerCase() !== l.seller.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenContract &&\n            filterTokenContract.toLowerCase() !== l.assetContract.toLowerCase()\n          ) {\n            return false;\n          }\n          if (\n            filterTokenId &&\n            filterTokenId.toLowerCase() !== l.tokenId.toString().toLowerCase()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      })\n      .map((l) => this.transformResultToListing(l));\n    return await Promise.all(listings);\n  }\n\n  public async getMarketFeeBps(): Promise<BigNumber> {\n    return await this.readOnlyContract.marketFeeBps();\n  }\n\n  // write functions\n  public async list(\n    assetContract: string,\n    tokenId: string,\n    currencyContract: string,\n    price: BigNumberish,\n    quantity: BigNumberish,\n    tokensPerBuyer: BigNumberish = 0,\n    secondsUntilStart: BigNumberish = 0,\n    secondsUntilEnd: BigNumberish = 0,\n  ): Promise<ListingMetadata> {\n    try {\n      const from = await this.getSignerAddress();\n      const erc165 = ERC165__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n      invariant(quantity > 0, \"quantity must be greater than 0\");\n      // check for token approval\n      const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n      if (isERC721) {\n        const asset = ERC721__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (!approved) {\n          const isTokenApproved =\n            (await asset.getApproved(tokenId)).toLowerCase() ===\n            this.address.toLowerCase();\n\n          if (!isTokenApproved) {\n            await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n              this.address,\n              true,\n            ]);\n          }\n        }\n      } else {\n        const asset = ERC1155__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (!approved) {\n          await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n            this.address,\n            true,\n          ]);\n        }\n      }\n\n      const receipt = await this.sendTransaction(\"list\", [\n        assetContract,\n        tokenId,\n        currencyContract,\n        price,\n        quantity,\n        tokensPerBuyer,\n        secondsUntilStart,\n        secondsUntilEnd,\n      ]);\n      const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n      const listing = event?.listing;\n      return await this.transformResultToListing(listing);\n    } catch (e) {\n      const signer = await this.getSignerAddress();\n      if (\n        (await this.sdk.getNFTModule(assetContract).ownerOf(tokenId)) !== signer\n      ) {\n        throw new MissingOwnerRoleError();\n      } else if (\n        (await this.readOnlyContract.restrictedListerRoleOnly()) &&\n        !(signer in (await this.getRoleMembers(\"lister\"))) &&\n        !(signer in (await this.getRoleMembers(\"admin\")))\n      ) {\n        throw new MissingRoleError(signer, \"lister\");\n      }\n      throw e;\n    }\n  }\n\n  public async unlistAll(listingId: string) {\n    const maxQuantity = (await this.get(listingId)).quantity;\n    await this.unlist(listingId, maxQuantity);\n  }\n\n  public async unlist(listingId: string, quantity: BigNumberish) {\n    await this.sendTransaction(\"unlist\", [listingId, quantity]);\n  }\n\n  public async setRestrictedListerRoleOnly(restricted: boolean) {\n    await this.sendTransaction(\"setRestrictedListerRoleOnly\", [restricted]);\n  }\n\n  public async buy(\n    listingId: string,\n    quantity: BigNumberish,\n  ): Promise<ListingMetadata> {\n    try {\n      const listing = await this.get(listingId);\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const totalPrice = listing.price.mul(BigNumber.from(quantity));\n      if (\n        listing.currencyContract &&\n        listing.currencyContract !== AddressZero\n      ) {\n        const erc20 = ERC20__factory.connect(\n          listing.currencyContract,\n          this.providerOrSigner,\n        );\n        const allowance = await erc20.allowance(owner, spender);\n        if (allowance.lt(totalPrice)) {\n          await this.sendContractTransaction(erc20, \"approve\", [\n            spender,\n            allowance.add(totalPrice),\n          ]);\n        }\n      }\n\n      const receipt = await this.sendTransaction(\"buy\", [listingId, quantity]);\n      const event = this.parseEventLogs(\"NewSale\", receipt?.logs);\n      return await this.transformResultToListing(event?.listing);\n    } catch (e) {\n      const tokensPerBuyer = (\n        await this.get(listingId)\n      ).tokensPerBuyer.toNumber();\n      if (quantity > tokensPerBuyer) {\n        throw new QuantityAboveLimitError(tokensPerBuyer.toString());\n      }\n      throw e;\n    }\n  }\n\n  // owner functions\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  public async setMarketFeeBps(fee: number): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setMarketFeeBps\", [fee]);\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC165__factory,\n  ERC20__factory,\n  ERC721__factory,\n  Marketplace,\n  Marketplace__factory,\n} from \"@3rdweb/contracts\";\nimport {\n  ListingParametersStruct,\n  ListingStruct,\n} from \"@3rdweb/contracts/dist/IMarketplace\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { BigNumber, BigNumberish, ethers } from \"ethers\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport {\n  getCurrencyValue,\n  getRoleHash,\n  getTokenMetadataUsingStorage,\n  InterfaceId_IERC721,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { isNativeToken } from \"../common/currency\";\nimport {\n  AuctionAlreadyStartedError,\n  AuctionHasNotEndedError,\n  ListingNotFoundError,\n  WrongListingTypeError,\n} from \"../common/error\";\nimport { invariant } from \"../common/invariant\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { ListingType } from \"../enums/marketplace/ListingType\";\nimport { IMarketplace } from \"../interfaces/modules\";\nimport {\n  AuctionListing,\n  NewAuctionListing,\n  NewDirectListing,\n  Offer,\n} from \"../types\";\nimport { DirectListing } from \"../types/marketplace/DirectListing\";\n\nexport interface MarketplaceFilter {\n  seller?: string;\n  tokenContract?: string;\n  tokenId?: number;\n  start?: number;\n  count?: number;\n}\n\nconst MAX_BPS = 10000;\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getMarketplaceModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class MarketplaceModule\n  extends ModuleWithRoles<Marketplace>\n  implements IMarketplace\n{\n  private _shouldCheckVersion = true;\n  private _isNewBuy = false;\n  public static moduleType: ModuleType = ModuleType.MARKETPLACE;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.lister,\n    RolesMap.asset,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return MarketplaceModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Marketplace {\n    return Marketplace__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return MarketplaceModule.moduleType;\n  }\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n   *   // how much the asset will be sold for\n   *   buyoutPricePerToken: \"1\",\n   * }\n   *\n   * await module.createDirectListing(listing);\n   * ```\n   */\n  public async createDirectListing(\n    listing: NewDirectListing,\n  ): Promise<BigNumber> {\n    this.validateNewListingParam(listing);\n\n    await this.handleTokenApproval(\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.getSignerAddress(),\n    );\n\n    const receipt = await this.sendTransaction(\"createListing\", [\n      {\n        assetContract: listing.assetContractAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: listing.buyoutPricePerToken,\n        currencyToAccept: listing.currencyContractAddress,\n        listingType: ListingType.Direct,\n        quantityToList: listing.quantity,\n        reservePricePerToken: listing.buyoutPricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: listing.startTimeInSeconds,\n      } as ListingParametersStruct,\n    ]);\n\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    return event.listingId;\n  }\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // in how many seconds with the listing open up\n   *   startTimeInSeconds: 0,\n   *   // how long the listing will be open for\n   *   listingDurationInSeconds: 86400,\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutPricePerToken: \"10\",\n   *   // the minimum bid that will be accepted for the token\n   *   reservePricePerToken: \"1\",\n   * }\n   *\n   * await module.createAuctionListing(auction);\n   * ```\n   */\n  public async createAuctionListing(\n    listing: NewAuctionListing,\n  ): Promise<BigNumber> {\n    this.validateNewListingParam(listing);\n\n    await this.handleTokenApproval(\n      listing.assetContractAddress,\n      listing.tokenId,\n      await this.getSignerAddress(),\n    );\n\n    const receipt = await this.sendTransaction(\"createListing\", [\n      {\n        assetContract: listing.assetContractAddress,\n        tokenId: listing.tokenId,\n        buyoutPricePerToken: listing.buyoutPricePerToken,\n        currencyToAccept: listing.currencyContractAddress,\n        listingType: ListingType.Auction,\n        quantityToList: listing.quantity,\n        reservePricePerToken: listing.reservePricePerToken,\n        secondsUntilEndTime: listing.listingDurationInSeconds,\n        startTime: listing.startTimeInSeconds,\n      } as ListingParametersStruct,\n    ]);\n\n    const event = this.parseEventLogs(\"NewListing\", receipt?.logs);\n    return event.listingId;\n  }\n\n  public async makeDirectListingOffer(offer: {\n    listingId: BigNumberish;\n    quantityDesired: BigNumberish;\n    currencyContractAddress: string;\n    pricePerToken: BigNumberish;\n  }): Promise<void> {\n    if (isNativeToken(offer.currencyContractAddress)) {\n      throw new Error(\n        \"You must use the wrapped native token address when making an offer with a native token\",\n      );\n    }\n\n    try {\n      await this.getDirectListing(offer.listingId);\n    } catch (err) {\n      console.error(\"Failed to get listing, err =\", err);\n      throw new Error(`Error getting the listing with id ${offer.listingId}`);\n    }\n\n    const quantity = BigNumber.from(offer.quantityDesired);\n    const value = BigNumber.from(offer.pricePerToken).mul(quantity);\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, offer.currencyContractAddress, overrides);\n\n    await this.sendTransaction(\n      \"offer\",\n      [\n        offer.listingId,\n        offer.quantityDesired,\n        offer.currencyContractAddress,\n        offer.pricePerToken,\n      ],\n      overrides,\n    );\n  }\n\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (isNativeToken(currencyAddress)) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n    }\n    return overrides;\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction listings\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to bid on\n   * const listingId = 0;\n   * // The price you are willing to bid for a single token of the listing\n   * const pricePerToken = 1;\n   *\n   * await module.makeAuctionListingBid({ listingId, pricePerToken });\n   * ```\n   */\n  public async makeAuctionListingBid(bid: {\n    listingId: BigNumberish;\n    pricePerToken: BigNumberish;\n  }): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(bid.listingId),\n    );\n\n    const bidBuffer = await this.getBidBufferBps();\n    const winningBid = await this.getWinningBid(bid.listingId);\n    if (winningBid) {\n      const isWinningBid = await this.isWinningBid(\n        winningBid.pricePerToken,\n        bid.pricePerToken,\n        bidBuffer,\n      );\n\n      invariant(\n        isWinningBid,\n        \"Bid price is too low based on the current winning bid and the bid buffer\",\n      );\n    } else {\n      const pricePerToken = BigNumber.from(bid.pricePerToken);\n      const reservePrice = BigNumber.from(listing.reservePrice);\n      invariant(\n        pricePerToken.gte(reservePrice),\n        \"Bid price is too low based on reserve price\",\n      );\n    }\n\n    const quantity = BigNumber.from(listing.quantity);\n    const value = BigNumber.from(bid.pricePerToken).mul(quantity);\n\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n    await this.sendTransaction(\n      \"offer\",\n      [\n        bid.listingId,\n        listing.quantity,\n        listing.currencyContractAddress,\n        bid.pricePerToken,\n      ],\n      overrides,\n    );\n  }\n\n  public async isWinningBid(\n    winningPrice: BigNumberish,\n    newBidPrice: BigNumberish,\n    bidBuffer: BigNumberish,\n  ): Promise<boolean> {\n    bidBuffer = BigNumber.from(bidBuffer);\n    winningPrice = BigNumber.from(winningPrice);\n    newBidPrice = BigNumber.from(newBidPrice);\n    const buffer = newBidPrice.sub(winningPrice).mul(MAX_BPS).div(winningPrice);\n    return buffer.gte(bidBuffer);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * module\n   *   .getAuctionWinner(listingId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getAuctionWinner(listingId: BigNumberish): Promise<string> {\n    const closedAuctions = await this.readOnlyContract.queryFilter(\n      this.contract.filters.AuctionClosed(),\n    );\n\n    const auction = closedAuctions.find((a) =>\n      a.args.listingId.eq(BigNumber.from(listingId)),\n    );\n\n    if (!auction) {\n      throw new Error(\n        `Could not find auction with listingId ${listingId} in closed auctions`,\n      );\n    }\n\n    return auction.args.winningBidder;\n  }\n\n  public async getDirectListing(\n    listingId: BigNumberish,\n  ): Promise<DirectListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Direct) {\n      throw new WrongListingTypeError(\n        this.address,\n        listingId.toString(),\n        \"Auction\",\n        \"Direct\",\n      );\n    }\n\n    return await this.mapDirectListing(listing);\n  }\n\n  public async getAuctionListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    if (listing.listingType !== ListingType.Auction) {\n      throw new WrongListingTypeError(\n        this.address,\n        listingId.toString(),\n        \"Direct\",\n        \"Auction\",\n      );\n    }\n    return await this.mapAuctionListing(listing);\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  private async mapDirectListing(\n    listing: ListingStruct,\n  ): Promise<DirectListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: listing.buyoutPricePerToken,\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInSeconds: listing.startTime,\n      // TODO: fetch the asset\n      asset: await getTokenMetadataUsingStorage(\n        listing.assetContract,\n        this.providerOrSigner,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      ),\n      secondsUntilEnd: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Direct,\n    };\n  }\n\n  /**\n   * Helper method maps the auction listing to the auction listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  private async mapAuctionListing(\n    listing: ListingStruct,\n  ): Promise<AuctionListing> {\n    return {\n      assetContractAddress: listing.assetContract,\n      buyoutPrice: listing.buyoutPricePerToken,\n      currencyContractAddress: listing.currency,\n      buyoutCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.buyoutPricePerToken,\n      ),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId,\n      quantity: listing.quantity,\n      startTimeInEpochSeconds: listing.startTime,\n      asset: await getTokenMetadataUsingStorage(\n        listing.assetContract,\n        this.providerOrSigner,\n        listing.tokenId.toString(),\n        this.sdk.getStorage(),\n      ),\n      reservePriceCurrencyValuePerToken: await getCurrencyValue(\n        this.providerOrSigner,\n        listing.currency,\n        listing.reservePricePerToken,\n      ),\n      reservePrice: listing.reservePricePerToken,\n      endTimeInEpochSeconds: listing.endTime,\n      sellerAddress: listing.tokenOwner,\n      type: ListingType.Auction,\n    };\n  }\n\n  private async handleTokenApproval(\n    assetContract: string,\n    tokenId: BigNumberish,\n    from: string,\n  ): Promise<void> {\n    const erc165 = ERC165__factory.connect(\n      assetContract,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        const isTokenApproved =\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase();\n\n        if (!isTokenApproved) {\n          await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n            this.address,\n            true,\n          ]);\n        }\n      }\n    } else {\n      const asset = ERC1155__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      const approved = await asset.isApprovedForAll(from, this.address);\n      if (!approved) {\n        await this.sendContractTransaction(asset, \"setApprovalForAll\", [\n          this.address,\n          true,\n        ]);\n      }\n    }\n  }\n\n  /**\n   * This method checks if the given token is approved for the marketplace module.\n   * This is particularly useful for direct listings where the token\n   * being listed may be moved before the listing is actually closed.\n   *\n   * TODO: Ask Jake/Krishang: do we need to also check the owners balance of the token,\n   * based on the listing quantity? I.e. query the balance of the tokenId, and check if\n   * the seller holds enough of the token\n   *\n   * @internal\n   * @param assetContract - The address of the asset contract.\n   * @param tokenId - The token id of the token.\n   * @param from - The address of the account that owns the token.\n   * @returns - True if the marketplace is approved on the token, false otherwise.\n   */\n  private async isTokenApprovedForMarketplace(\n    assetContract: string,\n    tokenId: BigNumberish,\n    from: string,\n  ): Promise<boolean> {\n    try {\n      const erc165 = ERC165__factory.connect(\n        assetContract,\n        this.providerOrSigner,\n      );\n\n      // check for token approval\n      const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n      if (isERC721) {\n        const asset = ERC721__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        const approved = await asset.isApprovedForAll(from, this.address);\n        if (approved) {\n          return true;\n        }\n\n        return (\n          (await asset.getApproved(tokenId)).toLowerCase() ===\n          this.address.toLowerCase()\n        );\n      } else {\n        const asset = ERC1155__factory.connect(\n          assetContract,\n          this.providerOrSigner,\n        );\n\n        return await asset.isApprovedForAll(from, this.address);\n      }\n    } catch (err: any) {\n      console.error(\"Failed to check if token is approved\", err);\n      return false;\n    }\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  private async isStillValidDirectListing(\n    listing: DirectListing,\n    quantity?: BigNumberish,\n  ): Promise<boolean> {\n    const approved = await this.isTokenApprovedForMarketplace(\n      listing.assetContractAddress,\n      listing.tokenId,\n      listing.sellerAddress,\n    );\n\n    if (!approved) {\n      return false;\n    }\n\n    const erc165 = ERC165__factory.connect(\n      listing.assetContractAddress,\n      this.providerOrSigner,\n    );\n\n    // check for token approval\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    if (isERC721) {\n      const asset = ERC721__factory.connect(\n        listing.assetContractAddress,\n        this.providerOrSigner,\n      );\n      // burned token would fail on ownerOf cuz invalid token\n      const tokenOwnerAddress = await asset\n        .ownerOf(listing.tokenId)\n        .catch(() => AddressZero);\n      return (\n        tokenOwnerAddress.toLowerCase() === listing.sellerAddress.toLowerCase()\n      );\n    } else {\n      const asset = ERC1155__factory.connect(\n        listing.assetContractAddress,\n        this.providerOrSigner,\n      );\n      const balance = await asset.balanceOf(\n        listing.sellerAddress,\n        listing.tokenId,\n      );\n      return balance.gte(quantity || listing.quantity);\n    }\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  * @beta - This method is not yet complete.\n  //  *\n  //  * @param listingId\n  //  * @returns\n  //  */\n  // public async getActiveOffers(listingId: BigNumberish): Promise<Offer[]> {\n  //   const listing = await this.validateDirectListing(BigNumber.from(listingId));\n\n  //   const offers = await this.readOnlyContract.offers(listing.id, \"\");\n\n  //   return await Promise.all(\n  //     offers.map(async (offer: any) => {\n  //       return await this.mapOffer(BigNumber.from(listingId), offer);\n  //     }),\n  //   );\n  // }\n\n  /**\n   * Used to verify fields in new listing.\n   * @internal\n   */\n  private validateNewListingParam(param: NewDirectListing | NewAuctionListing) {\n    invariant(\n      param.assetContractAddress !== undefined &&\n        param.assetContractAddress !== null,\n      \"Asset contract address is required\",\n    );\n    invariant(\n      param.buyoutPricePerToken !== undefined &&\n        param.buyoutPricePerToken !== null,\n      \"Buyout price is required\",\n    );\n    invariant(\n      param.listingDurationInSeconds !== undefined &&\n        param.listingDurationInSeconds !== null,\n      \"Listing duration is required\",\n    );\n    invariant(\n      param.startTimeInSeconds !== undefined &&\n        param.startTimeInSeconds !== null,\n      \"Start time is required\",\n    );\n    invariant(\n      param.tokenId !== undefined && param.tokenId !== null,\n      \"Token ID is required\",\n    );\n    invariant(\n      param.quantity !== undefined && param.quantity !== null,\n      \"Quantity is required\",\n    );\n\n    switch (param.type) {\n      case \"NewAuctionListing\": {\n        invariant(\n          param.reservePricePerToken !== undefined &&\n            param.reservePricePerToken !== null,\n          \"Reserve price is required\",\n        );\n      }\n    }\n  }\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateDirectListing(\n    listingId: BigNumber,\n  ): Promise<DirectListing> {\n    try {\n      return await this.getDirectListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  private async validateAuctionListing(\n    listingId: BigNumber,\n  ): Promise<AuctionListing> {\n    try {\n      return await this.getAuctionListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Maps a contract offer to the strict interface\n   *\n   * @internal\n   * @param offer\n   * @returns - An `Offer` object\n   */\n  private async mapOffer(listingId: BigNumber, offer: any): Promise<Offer> {\n    return {\n      quantity: offer.quantityDesired,\n      pricePerToken: offer.pricePerToken,\n      currencyContractAddress: offer.currency,\n      buyerAddress: offer.offeror,\n      quantityDesired: offer.quantityWanted,\n      currencyValue: await getCurrencyValue(\n        this.providerOrSigner,\n        offer.currency,\n        (offer.quantityWanted as BigNumber).mul(\n          offer.pricePerToken as BigNumber,\n        ),\n      ),\n      listingId,\n    } as Offer;\n  }\n\n  public async getActiveOffer(\n    listingId: BigNumberish,\n    address: string,\n  ): Promise<Offer | undefined> {\n    this.validateDirectListing(BigNumber.from(listingId));\n    invariant(isAddress(address), \"Address must be a valid address\");\n    const offers = await this.readOnlyContract.offers(listingId, address);\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await this.mapOffer(BigNumber.from(listingId), offers);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction that closed\n   * const listingId = 0;\n   *\n   * module\n   *   .getWinningBid(listingId)\n   *   .then((offer) => console.log(offer))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  public async getWinningBid(\n    listingId: BigNumberish,\n  ): Promise<Offer | undefined> {\n    this.validateAuctionListing(BigNumber.from(listingId));\n    const offers = await this.readOnlyContract.winningBid(listingId);\n    if (offers.offeror === AddressZero) {\n      return undefined;\n    }\n    return await this.mapOffer(BigNumber.from(listingId), offers);\n  }\n\n  public async getBidBufferBps(): Promise<BigNumber> {\n    return this.readOnlyContract.bidBufferBps();\n  }\n\n  public async getTimeBufferInSeconds(): Promise<BigNumber> {\n    return await this.readOnlyContract.timeBuffer();\n  }\n\n  public async acceptDirectListingOffer(\n    listingId: BigNumberish,\n    addressOfOfferor: string,\n  ): Promise<void> {\n    /**\n     * TODO:\n     * - Provide better error handling if offer is too lower.\n     */\n\n    this.validateDirectListing(BigNumber.from(listingId));\n    await this.sendTransaction(\"acceptOffer\", [listingId, addressOfOfferor]);\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   *\n   * await module.buyoutAuctionListing(listingId);\n   * ```\n   */\n  public async buyoutAuctionListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    await this.makeAuctionListingBid({\n      listingId,\n      pricePerToken: listing.buyoutPrice,\n    });\n  }\n\n  /**\n   * Buy Listing\n   *\n   * @remarks Buy a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the asset you want to buy\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await module.buyoutDirectListing({ listingId, quantityDesired });\n   * ```\n   */\n  public async buyoutDirectListing(_buyout: {\n    listingId: BigNumberish;\n    quantityDesired: BigNumberish;\n  }): Promise<void> {\n    const listing = await this.validateDirectListing(\n      BigNumber.from(_buyout.listingId),\n    );\n\n    const valid = await this.isStillValidDirectListing(\n      listing,\n      _buyout.quantityDesired,\n    );\n\n    if (!valid) {\n      throw new Error(\n        \"The asset on this listing has been moved from the listers wallet, this listing is now invalid\",\n      );\n    }\n\n    const quantity = BigNumber.from(_buyout.quantityDesired);\n    const value = BigNumber.from(listing.buyoutPrice).mul(quantity);\n    const overrides = (await this.getCallOverrides()) || {};\n    await this.setAllowance(value, listing.currencyContractAddress, overrides);\n\n    if (await this.isNewBuy()) {\n      await this.sendTransaction(\n        \"buy\",\n        [_buyout.listingId, quantity, listing.currencyContractAddress, value],\n        overrides,\n      );\n    } else {\n      // backward compatibility with old abi ftw\n      await this.sendContractTransaction(\n        new ethers.Contract(\n          this.address,\n          [\n            {\n              inputs: [\n                {\n                  internalType: \"uint256\",\n                  name: \"_listingId\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"_quantityToBuy\",\n                  type: \"uint256\",\n                },\n              ],\n              name: \"buy\",\n              outputs: [],\n              stateMutability: \"payable\",\n              type: \"function\",\n            },\n          ],\n          this.providerOrSigner,\n        ),\n        \"buy\",\n        [_buyout.listingId, quantity],\n        overrides,\n      );\n    }\n  }\n\n  // TODO: Complete method implementation with subgraph\n  // /**\n  //  *\n  //  * @beta - This method is not yet ready for production use\n  //  *\n  //  * @param _listingId - The listing ID to get active bids for\n  //  */\n  // public async getActiveBids(_listingId: BigNumberish): Promise<Offer[]> {\n  //   throw new Error(\"Method not implemented.\");\n  // }\n\n  public async updateDirectListing(listing: DirectListing): Promise<void> {\n    await this.sendTransaction(\"updateListing\", [\n      listing.id,\n      listing.quantity,\n      // eslint-disable-next-line line-comment-position\n      listing.buyoutPrice, // reserve price, doesn't matter for direct listing\n      listing.buyoutPrice,\n      listing.currencyContractAddress,\n      listing.startTimeInSeconds,\n      listing.secondsUntilEnd,\n    ]);\n  }\n\n  public async updateAuctionListing(listing: AuctionListing): Promise<void> {\n    await this.sendTransaction(\"updateListing\", [\n      listing.id,\n      listing.quantity,\n      listing.reservePrice,\n      listing.buyoutPrice,\n      listing.currencyContractAddress,\n      listing.startTimeInEpochSeconds,\n      listing.endTimeInEpochSeconds,\n    ]);\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = \"0\"\n   *\n   * await module.cancelDirectListing(listingId);\n   * ```\n   */\n  public async cancelDirectListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateDirectListing(BigNumber.from(listingId));\n    listing.quantity = 0;\n    await this.updateDirectListing(listing);\n  }\n\n  /**\n   * Cancel Auction Listing\n   *\n   * @remarks Cancel an auction listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the auction listing you want to cancel\n   * const listingId = \"0\"\n   *\n   * await module.cancelAuctionListing(listingId);\n   * ```\n   */\n  public async cancelAuctionListing(listingId: BigNumberish): Promise<void> {\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const startTime = BigNumber.from(listing.startTimeInEpochSeconds);\n\n    const offers = await this.readOnlyContract.winningBid(listingId);\n    if (now.gt(startTime) && offers.offeror !== AddressZero) {\n      throw new AuctionAlreadyStartedError(listingId.toString());\n    }\n\n    await this.sendTransaction(\"closeAuction\", [\n      BigNumber.from(listingId),\n      await this.getSignerAddress(),\n    ]);\n  }\n\n  public async closeAuctionListing(\n    listingId: BigNumberish,\n    closeFor?: string,\n  ): Promise<void> {\n    if (!closeFor) {\n      closeFor = await this.getSignerAddress();\n    }\n\n    const listing = await this.validateAuctionListing(\n      BigNumber.from(listingId),\n    );\n\n    try {\n      await this.sendTransaction(\"closeAuction\", [\n        BigNumber.from(listingId),\n        closeFor,\n      ]);\n    } catch (err: any) {\n      if (err.message.includes(\"cannot close auction before it has ended\")) {\n        throw new AuctionHasNotEndedError(\n          listingId.toString(),\n          listing.endTimeInEpochSeconds.toString(),\n        );\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  public async setBidBufferBps(buffer: BigNumberish): Promise<void> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n\n    const timeBuffer = await this.getTimeBufferInSeconds();\n    await this.sendTransaction(\"setAuctionBuffers\", [\n      timeBuffer,\n      BigNumber.from(buffer),\n    ]);\n  }\n\n  public async setTimeBufferInSeconds(buffer: BigNumberish): Promise<void> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n\n    const bidBuffer = await this.getBidBufferBps();\n    await this.sendTransaction(\"setAuctionBuffers\", [\n      BigNumber.from(buffer),\n      bidBuffer,\n    ]);\n  }\n\n  public async buyoutListing(\n    listingId: BigNumberish,\n    quantityDesired?: BigNumberish,\n  ): Promise<void> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    switch (listing.listingType) {\n      case ListingType.Direct: {\n        invariant(\n          quantityDesired !== undefined,\n          \"quantityDesired is required when buying out a direct listing\",\n        );\n        return await this.buyoutDirectListing({ listingId, quantityDesired });\n      }\n      case ListingType.Auction: {\n        return await this.buyoutAuctionListing(listingId);\n      }\n    }\n  }\n\n  public async getListing(\n    listingId: BigNumberish,\n  ): Promise<AuctionListing | DirectListing> {\n    const listing = await this.readOnlyContract.listings(listingId);\n    if (listing.listingId.toString() !== listingId.toString()) {\n      throw new ListingNotFoundError(this.address, listingId.toString());\n    }\n\n    switch (listing.listingType) {\n      case ListingType.Auction: {\n        return await this.mapAuctionListing(listing);\n      }\n      case ListingType.Direct: {\n        return await this.mapDirectListing(listing);\n      }\n      default: {\n        throw new Error(`Unknown listing type: ${listing.listingType}`);\n      }\n    }\n  }\n\n  public async getAllListings(\n    filter?: MarketplaceFilter,\n  ): Promise<(AuctionListing | DirectListing)[]> {\n    let rawListings = await this.getAllListingsNoFilter();\n\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(\n          (seller) =>\n            seller.sellerAddress.toString().toLowerCase() ===\n            filter?.seller?.toString().toLowerCase(),\n        );\n      }\n      if (filter.tokenContract) {\n        if (!filter.tokenId) {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n              filter?.tokenContract?.toString().toLowerCase(),\n          );\n        } else {\n          rawListings = rawListings.filter(\n            (tokenContract) =>\n              tokenContract.assetContractAddress.toString().toLowerCase() ===\n                filter?.tokenContract?.toString().toLowerCase() &&\n              tokenContract.tokenId.toString() === filter?.tokenId?.toString(),\n          );\n        }\n      }\n      if (filter.start !== undefined) {\n        const start = filter.start;\n        rawListings = rawListings.filter((_, index) => index >= start);\n        if (filter.count !== undefined && rawListings.length > filter.count) {\n          rawListings = rawListings.slice(0, filter.count);\n        }\n      }\n    }\n    return rawListings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  private async getAllListingsNoFilter(): Promise<\n    (AuctionListing | DirectListing)[]\n  > {\n    const listings = await Promise.all(\n      Array.from(\n        Array((await this.readOnlyContract.totalListings()).toNumber()).keys(),\n      ).map(async (i) => {\n        let listing;\n\n        try {\n          listing = await this.getListing(i);\n        } catch (err) {\n          return undefined;\n        }\n\n        if (listing.type === ListingType.Auction) {\n          return listing;\n        }\n\n        const valid = await this.isStillValidDirectListing(listing);\n        if (!valid) {\n          return undefined;\n        }\n\n        return listing;\n      }),\n    );\n    return listings.filter((l) => l !== undefined) as (\n      | AuctionListing\n      | DirectListing\n    )[];\n  }\n\n  public async isRestrictedListerRoleOnly(): Promise<boolean> {\n    return this.readOnlyContract.restrictedListerRoleOnly();\n  }\n\n  public async setRestrictedListerRoleOnly(\n    isRestricted: boolean,\n  ): Promise<void> {\n    await this.sendTransaction(\"setRestrictedListerRoleOnly\", [isRestricted]);\n  }\n\n  public async allowListingFromSpecificAssetOnly(contractAddress: string) {\n    if (!(await this.isV2())) {\n      throw Error(\n        \"Not supported in this version of the contract, please upgrade\",\n      );\n    }\n    const encoded = [];\n    const members = await this.getRoleMembers(RolesMap.asset);\n    if (AddressZero in members) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"revokeRole\", [\n          getRoleHash(RolesMap.asset as Role),\n          AddressZero,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"grantRole\", [\n        getRoleHash(RolesMap.asset as Role),\n        contractAddress,\n      ]),\n    );\n\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async allowListingFromAnyAsset() {\n    if (!(await this.isV2())) {\n      throw Error(\n        \"Not supported in this version of the contract, please upgrade\",\n      );\n    }\n    const encoded = [];\n    const members = await this.getRoleMembers(RolesMap.asset);\n    for (const addr in members) {\n      encoded.push(\n        this.contract.interface.encodeFunctionData(\"revokeRole\", [\n          getRoleHash(RolesMap.asset as Role),\n          addr,\n        ]),\n      );\n    }\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"grantRole\", [\n        getRoleHash(RolesMap.asset as Role),\n        AddressZero,\n      ]),\n    );\n    await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  /**\n   * @internal\n   */\n  private async isV2(): Promise<boolean> {\n    const version = await this.readOnlyContract.VERSION();\n    return version.toNumber() === 2;\n  }\n\n  /**\n   * @internal\n   */\n  private async isNewBuy(): Promise<boolean> {\n    await this.checkVersion();\n    return this._isNewBuy;\n  }\n\n  /**\n   * @internal\n   */\n  private async checkVersion() {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.VERSION();\n        this._isNewBuy = true;\n      } catch (e) {\n        this._isNewBuy = false;\n      }\n\n      this._shouldCheckVersion = false;\n    }\n  }\n}\n","import {\n  ERC1155__factory,\n  ERC20__factory,\n  Pack as PackContract,\n  Pack__factory,\n} from \"@3rdweb/contracts\";\n\nimport {\n  PackCreatedEvent,\n  PackOpenRequestEvent,\n} from \"@3rdweb/contracts/dist/Pack\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, BytesLike, Contract, ethers } from \"ethers\";\nimport {\n  CurrencyValue,\n  getCurrencyValue,\n  ModuleType,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { ChainlinkVrf } from \"../common/chainlink\";\nimport { NotFoundError } from \"../common/error\";\nimport { getMetadataWithoutContract, NFTMetadata } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\n\n/**\n * @beta\n */\nexport interface PackMetadata {\n  id: string;\n  creator: string;\n  currentSupply: BigNumber;\n  openStart: Date | null;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackNFTMetadata {\n  supply: BigNumber;\n  metadata: NFTMetadata;\n}\n\n/**\n * @public\n */\nexport interface PackMetadataWithBalance extends PackMetadata {\n  ownedByAddress: BigNumber;\n}\n\nexport enum UnderlyingType {\n  None = 0,\n  ERC20 = 1,\n  ERC721 = 2,\n}\n/**\n * @beta\n */\nexport interface IPackCreateArgs {\n  assetContract: string;\n  metadata: MetadataURIOrObject;\n  assets: {\n    tokenId: BigNumberish;\n    amount: BigNumberish;\n  }[];\n  secondsUntilOpenStart?: BigNumberish;\n  rewardsPerOpen?: BigNumberish;\n}\n\n/**\n * @beta\n */\nexport interface IPackBatchArgs {\n  tokenId: BigNumberish;\n  amount: BigNumberish;\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getPackModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class PackModule\n  extends ModuleWithRoles<PackContract>\n  implements ITransferable\n{\n  public static moduleType: ModuleType = ModuleType.PACK;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.pauser,\n    RolesMap.transfer,\n  ] as const;\n\n  /**\n   * @override\n   * @internal\n   */\n  protected getModuleRoles(): readonly Role[] {\n    return PackModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): PackContract {\n    return Pack__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return PackModule.moduleType;\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks Open a pack to burn it and obtain the reward asset inside.\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the asset you want to buy\n   * const packId = \"0\";\n   * const rewards = await module.open(packId);\n   * console.log(rewards);\n   * ```\n   */\n  public async open(packId: string): Promise<NFTMetadata[]> {\n    const receipt = await this.sendTransaction(\"openPack\", [packId]);\n    const logs = this.parseLogs<PackOpenRequestEvent>(\n      \"PackOpenRequest\",\n      receipt?.logs,\n    );\n    if (logs.length === 0) {\n      throw new Error(\"Failed to open pack\");\n    }\n    const event = logs[0];\n\n    const requestId = event.args.requestId;\n    const opener = event.args.opener;\n\n    const fulfillEvent: any = await new Promise((resolve) => {\n      this.readOnlyContract.once(\n        // eslint-disable-next-line new-cap\n        this.readOnlyContract.filters.PackOpenFulfilled(null, opener),\n        (_packId, _opener, _requestId, rewardContract, rewardIds) => {\n          if (requestId === _requestId) {\n            resolve({\n              packId: _packId,\n              opener: _opener,\n              requestId,\n              rewardContract,\n              rewardIds,\n            });\n          }\n        },\n      );\n    });\n\n    const { rewardIds, rewardContract } = fulfillEvent;\n    return await Promise.all(\n      rewardIds.map((rewardId: BigNumber) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          rewardContract,\n          rewardId.toString(),\n          this.sdk.getStorage(),\n        ),\n      ),\n    );\n  }\n\n  public async get(packId: string): Promise<PackMetadata> {\n    const [meta, state, supply] = await Promise.all([\n      getMetadataWithoutContract(\n        this.providerOrSigner,\n        this.address,\n        packId,\n        this.sdk.getStorage(),\n      ),\n      this.readOnlyContract.getPack(packId),\n      this.readOnlyContract\n        .totalSupply(packId)\n        .catch(() => BigNumber.from(\"0\")),\n    ]);\n    const entity: PackMetadata = {\n      id: packId,\n      metadata: meta,\n      creator: state.creator,\n      currentSupply: supply,\n      openStart: state.openStart.gt(0)\n        ? new Date(state.openStart.toNumber() * 1000)\n        : null,\n    };\n    return entity;\n  }\n\n  /**\n   * Get Pack Data\n   *\n   * @remarks Get data associated with every pack in this module.\n   *\n   * @example\n   * ```javascript\n   * const packs = await module.getAll();\n   * console.log(packs);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<PackMetadata[]> {\n    const maxId = (await this.readOnlyContract.nextTokenId()).toNumber();\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  /**\n   * Get Pack Reward Data\n   *\n   * @remarks Get data associated with the rewards inside a specified pack\n   *\n   * @example\n   * ```javascript\n   * // The pack ID of the pack whos rewards you want to get\n   * const packId = 0;\n   *\n   * const nfts = await module.getNFTs(packId);\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getNFTs(packId: string): Promise<PackNFTMetadata[]> {\n    const packReward = await this.readOnlyContract.getPackWithRewards(packId);\n    if (!packReward.source) {\n      throw new NotFoundError();\n    }\n    const rewards = await Promise.all(\n      packReward.tokenIds.map((tokenId) =>\n        getMetadataWithoutContract(\n          this.providerOrSigner,\n          packReward.source,\n          tokenId.toString(),\n          this.sdk.getStorage(),\n        ),\n      ),\n    );\n    return rewards.map((reward, i) => ({\n      supply: packReward.amountsPacked[i],\n      metadata: reward,\n    }));\n  }\n\n  /**\n   * Get Pack Balance\n   *\n   * @remarks Get a wallets pack balance (number of a specific packs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check pack balance\n   * const address = \"{{wallet_address}}\"\";\n   * // The token ID of the pack you want to check the wallets balance of\n   * const tokenId = \"0\"\n   *\n   * const balance = await module.balanceOf(address, tokenId);\n   * console.log(balance);\n   * ```\n   */\n  public async balanceOf(address: string, tokenId: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address, tokenId);\n  }\n\n  public async balance(tokenId: string): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress(), tokenId);\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n\n  public async setApproval(operator: string, approved = true) {\n    await this.sendTransaction(\"setApprovalForAll\", [operator, approved]);\n  }\n\n  /**\n   * Transfer Pack\n   *\n   * @remarks Transfer a pack from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the pack to\n   * const toAddress = \"0x...\";\n   *\n   * // The token ID of the pack you want to send\n   * const tokenId = \"0\";\n   *\n   * // The number of packs you want to send\n   * const amount = 1;\n   *\n   * await module.transfer(toAddress, tokenId, amount);\n   * ```\n   */\n  public async transfer(to: string, tokenId: string, amount: BigNumber) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      await this.getSignerAddress(),\n      to,\n      tokenId,\n      amount,\n      [0],\n    ]);\n  }\n\n  // owner functions\n  /**\n   * Create Pack\n   *\n   * @remarks Create a new pack with its own rewards.\n   *\n   * @example\n   * ```javascript\n   * // Data to create the pack\n   * const pack = {\n   *   // The address of the contract that holds the rewards you want to include\n   *   assetContract: \"0x...\",\n   *   // The metadata of the pack\n   *   metadata: {\n   *     name: \"Cool Pack\",\n   *     description: \"This is a cool pack\",\n   *     // This can be an image url or image file\n   *     image: readFileSync(\"path/to/image.png\"),\n   *   },\n   *   // The NFTs you want to include in the pack\n   *   assets: [\n   *     {\n   *       tokenId: 0, // The token ID of the asset you want to add\n   *       amount: 1, // The amount of the asset you want to add\n   *     }, {\n   *       tokenId: 1,\n   *       amount: 1,\n   *     }\n   *   ],\n   * };\n   *\n   * await module.create(pack);\n   * ```\n   *\n   * @param args - Args for the pack creation\n   * @returns - The newly created pack metadata\n   */\n  public async create(args: IPackCreateArgs): Promise<PackMetadata> {\n    const asset = ERC1155__factory.connect(\n      args.assetContract,\n      this.providerOrSigner,\n    );\n\n    const from = await this.getSignerAddress();\n    const ids = args.assets.map((a) => a.tokenId);\n    const amounts = args.assets.map((a) => a.amount);\n    const uri = await this.sdk.getStorage().uploadMetadata(args.metadata);\n\n    const packParams = ethers.utils.defaultAbiCoder.encode(\n      [\"string\", \"uint256\", \"uint256\"],\n      [uri, args.secondsUntilOpenStart || 0, args.rewardsPerOpen || 1],\n    );\n\n    // TODO: make it gasless\n    const tx = await asset.safeBatchTransferFrom(\n      from,\n      this.address,\n      ids,\n      amounts,\n      packParams,\n      await this.getCallOverrides(),\n    );\n\n    const receipt = await tx.wait();\n    const log = this.parseLogs<PackCreatedEvent>(\"PackCreated\", receipt.logs);\n    if (log.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = log[0].args.packId;\n    return await this.get(packId.toString());\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs,\n    data: BytesLike = [0],\n  ) {\n    await this.sendTransaction(\"safeTransferFrom\", [\n      from,\n      to,\n      args.tokenId,\n      args.amount,\n      data,\n    ]);\n  }\n\n  public async transferBatchFrom(\n    from: string,\n    to: string,\n    args: IPackBatchArgs[],\n    data: BytesLike = [0],\n  ) {\n    const ids = args.map((a) => a.tokenId);\n    const amounts = args.map((a) => a.amount);\n    await this.sendTransaction(\"safeBatchTransferFrom\", [\n      from,\n      to,\n      ids,\n      amounts,\n      data,\n    ]);\n  }\n\n  public async getLinkBalance(): Promise<CurrencyValue> {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      chainlink.linkTokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async depositLink(amount: BigNumberish) {\n    const chainId = await this.getChainID();\n    const chainlink = ChainlinkVrf[chainId];\n    const erc20 = ERC20__factory.connect(\n      chainlink.linkTokenAddress,\n      this.providerOrSigner,\n    );\n    // TODO: make it gasless\n    const tx = await erc20.transfer(\n      this.address,\n      amount,\n      await this.getCallOverrides(),\n    );\n    await tx.wait();\n  }\n\n  public async withdrawLink(to: string, amount: BigNumberish) {\n    try {\n      // old version of the contract\n      const _contract = new Contract(\n        this.address,\n        [\n          {\n            inputs: [\n              {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n              },\n            ],\n            name: \"transferLink\",\n            outputs: [],\n            stateMutability: \"nonpayable\",\n            type: \"function\",\n          },\n        ],\n        this.providerOrSigner,\n      );\n      await this.sendContractTransaction(_contract, \"transferLink\", [\n        to,\n        amount,\n      ]);\n    } catch (e) {\n      // new version of the contract\n      const chainId = await this.getChainID();\n      const chainlink = ChainlinkVrf[chainId];\n      await this.sendTransaction(\"transferERC20\", [\n        chainlink.linkTokenAddress,\n        to,\n        amount,\n      ]);\n    }\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(metadata: MetadataURIOrObject) {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  /**\n   * `getOwned` is a convenience method for getting all owned tokens\n   * for a particular wallet.\n   *\n   * @param _address - The address to check for token ownership\n   * @returns An array of PackMetadataWithBalance objects that are owned by the address\n   */\n  public async getOwned(_address?: string): Promise<PackMetadataWithBalance[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const maxId = await this.readOnlyContract.nextTokenId();\n    const balances = await this.readOnlyContract.balanceOfBatch(\n      Array(maxId.toNumber()).fill(address),\n      Array.from(Array(maxId.toNumber()).keys()),\n    );\n\n    const ownedBalances = balances\n      .map((b, i) => {\n        return {\n          tokenId: i,\n          balance: b,\n        };\n      })\n      .filter((b) => b.balance.gt(0));\n    return await Promise.all(\n      ownedBalances.map(async ({ tokenId, balance }) => {\n        const token = await this.get(tokenId.toString());\n        return { ...token, ownedByAddress: balance };\n      }),\n    );\n  }\n}\n","import {\n  ERC20__factory,\n  NFT,\n  NFT__factory,\n  SignatureMint721,\n  SignatureMint721__factory,\n} from \"@3rdweb/contracts\";\nimport { MintedBatchEvent, MintedEvent } from \"@3rdweb/contracts/dist/NFT\";\nimport {\n  MintRequestStructOutput,\n  TokenMintedEvent,\n  MintWithSignatureEvent,\n} from \"@3rdweb/contracts/dist/SignatureMint721\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, BigNumberish, Signer } from \"ethers\";\nimport { hexlify, toUtf8Bytes } from \"ethers/lib/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  ModuleType,\n  NATIVE_TOKEN_ADDRESS,\n  RestrictedTransferError,\n  Role,\n  RolesMap,\n} from \"../common\";\nimport { invariant } from \"../common/invariant\";\nimport { NFTMetadata, NFTMetadataOwner } from \"../common/nft\";\nimport { ModuleWithRoles } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { ITransferable } from \"../interfaces/contracts/ITransferable\";\nimport { ISignatureMinter } from \"../interfaces/modules/ISignatureMinter\";\nimport { NewSignaturePayload } from \"../types/signature-minting/NewSignaturePayload\";\nimport { SignaturePayload } from \"../types/signature-minting/SignaturePayload\";\n\nconst MintRequest = [\n  { name: \"to\", type: \"address\" },\n  { name: \"uri\", type: \"string\" },\n  { name: \"price\", type: \"uint256\" },\n  { name: \"currency\", type: \"address\" },\n  { name: \"validityStartTimestamp\", type: \"uint128\" },\n  { name: \"validityEndTimestamp\", type: \"uint128\" },\n  { name: \"uid\", type: \"bytes32\" },\n];\n\n/**\n * Create a collection of one-of-one NFTs.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getNFTModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class NFTModule\n  extends ModuleWithRoles<SignatureMint721>\n  implements ITransferable, ISignatureMinter\n{\n  public static moduleType: ModuleType = ModuleType.NFT;\n\n  public static roles = [\n    RolesMap.admin,\n    RolesMap.minter,\n    RolesMap.transfer,\n  ] as const;\n\n  protected getModuleRoles(): readonly Role[] {\n    return NFTModule.roles;\n  }\n\n  /**\n   * @internal\n   */\n  protected connectContract(): SignatureMint721 {\n    return SignatureMint721__factory.connect(\n      this.address,\n      this.providerOrSigner,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return NFTModule.moduleType;\n  }\n\n  private _shouldCheckVersion = true;\n  private _isV1 = false;\n  private v1Contract?: NFT;\n\n  /**\n   * Check if contract is v1 or v2. If the contract doesn't have nextTokenIdToMint = v1 contract.\n   */\n  async isV1(): Promise<boolean> {\n    if (this._shouldCheckVersion) {\n      try {\n        await this.readOnlyContract.nextTokenIdToMint();\n        this._isV1 = false;\n      } catch (e) {\n        this._isV1 = true;\n        this.v1Contract = NFT__factory.connect(\n          this.address,\n          this.providerOrSigner,\n        );\n      }\n      this._shouldCheckVersion = false;\n    }\n    return this._isV1;\n  }\n\n  /**\n   * Fetches an NFT from storage with the resolved metadata.\n   *\n   * @param tokenId - The id of the token to fetch.\n   * @returns - The NFT metadata.\n   */\n  public async get(tokenId: string): Promise<NFTMetadata> {\n    const storage = this.sdk.getStorage();\n    const uri = await this.readOnlyContract.tokenURI(tokenId);\n    const metadata = JSON.parse(await storage.get(uri));\n    return {\n      ...metadata,\n      id: tokenId,\n      uri,\n      image: storage.resolveFullUrl(metadata.image),\n    };\n  }\n\n  /**\n   * Get All NFTs\n   *\n   * @remarks Get all the data associated with every NFT in this module.\n   *\n   * @example\n   * ```javascript\n   * const nfts = await module.getAll();\n   * console.log(nfts);\n   * ```\n   *\n   * @returns The NFT metadata for all NFTs in the module.\n   */\n  public async getAll(): Promise<NFTMetadata[]> {\n    let maxId: number;\n    if (await this.isV1()) {\n      maxId = (await this.v1Contract?.nextTokenId())?.toNumber() as number;\n    } else {\n      maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    }\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) => this.get(i.toString())),\n    );\n  }\n\n  public async getWithOwner(tokenId: string): Promise<NFTMetadataOwner> {\n    const [owner, metadata] = await Promise.all([\n      this.ownerOf(tokenId),\n      this.get(tokenId),\n    ]);\n\n    return { owner, metadata };\n  }\n\n  public async getAllWithOwner(): Promise<NFTMetadataOwner[]> {\n    let maxId: number;\n    if (await this.isV1()) {\n      maxId = (await this.v1Contract?.nextTokenId())?.toNumber() as number;\n    } else {\n      maxId = (await this.readOnlyContract.nextTokenIdToMint()).toNumber();\n    }\n    return await Promise.all(\n      Array.from(Array(maxId).keys()).map((i) =>\n        this.getWithOwner(i.toString()),\n      ),\n    );\n  }\n\n  /**\n   * Checks the owner of a particular NFT\n   *\n   * @param tokenId - ID of the NFT to get the owner of\n   * @returns the owner of the token, or a zero address if the\n   * token has been burned\n   */\n  public async ownerOf(tokenId: string): Promise<string> {\n    try {\n      return await this.readOnlyContract.ownerOf(tokenId);\n    } catch (e) {\n      return AddressZero;\n    }\n  }\n\n  /**\n   * Get Owned NFTs\n   *\n   * @remarks Get all the data associated with the NFTs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the NFTs of\n   * const address = \"{{wallet_address}}\";\n   * const nfts = await module.getOwned(address);\n   * console.log(nfts);\n   * ```\n   */\n  public async getOwned(_address?: string): Promise<NFTMetadata[]> {\n    const address = _address ? _address : await this.getSignerAddress();\n    const balance = await this.readOnlyContract.balanceOf(address);\n    const indices = Array.from(Array(balance.toNumber()).keys());\n    const tokenIds = await Promise.all(\n      indices.map((i) => this.readOnlyContract.tokenOfOwnerByIndex(address, i)),\n    );\n    return await Promise.all(\n      tokenIds.map((tokenId) => this.get(tokenId.toString())),\n    );\n  }\n\n  public async totalSupply(): Promise<BigNumber> {\n    return await this.readOnlyContract.totalSupply();\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this module owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to check NFT balance\n   * const address = \"{{wallet_address}}\";\n   *\n   * const balance = await module.balanceOf(address);\n   * console.log(balance);\n   * ```\n   *\n   * @returns The balance of the NFTs in the wallet\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    return await this.readOnlyContract.balanceOf(address);\n  }\n\n  public async balance(): Promise<BigNumber> {\n    return await this.balanceOf(await this.getSignerAddress());\n  }\n\n  public async isApproved(address: string, operator: string): Promise<boolean> {\n    return await this.readOnlyContract.isApprovedForAll(address, operator);\n  }\n  // write functions\n  public async setApproval(\n    operator: string,\n    approved = true,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setApprovalForAll\", [\n      operator,\n      approved,\n    ]);\n  }\n\n  /**\n   * Transfer NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to send the NFT to\n   * const toAddress = \"{{wallet_address}}\";\n   *\n   * // The token ID of the NFT you want to send\n   * const tokenId = \"0\";\n   *\n   * await module.transfer(toAddress, tokenId);\n   * ```\n   */\n  public async transfer(\n    to: string,\n    tokenId: string,\n  ): Promise<TransactionReceipt> {\n    if (await this.isTransferRestricted()) {\n      throw new RestrictedTransferError(this.address);\n    }\n\n    const from = await this.getSignerAddress();\n    return await this.sendTransaction(\n      \"safeTransferFrom(address,address,uint256)\",\n      [from, to, tokenId],\n    );\n  }\n\n  // owner functions\n  public async mint(metadata: MetadataURIOrObject): Promise<NFTMetadata> {\n    return await this.mintTo(await this.getSignerAddress(), metadata);\n  }\n\n  private async _v1MintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    invariant(this.v1Contract !== undefined, \"v1 contract is undefined\");\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    const receipt = await this.sendContractTransaction(\n      this.v1Contract,\n      \"mintNFT\",\n      [to, uri],\n    );\n    const events = this.parseLogs<MintedEvent>(\n      \"Minted\",\n      receipt?.logs,\n      this.v1Contract,\n    );\n    if (events.length === 0) {\n      throw new Error(\"No Minted event found, failed to mint\");\n    }\n    return await this.get(events[0].args.tokenId.toString());\n  }\n\n  /**\n   * Mint NFT\n   *\n   * @remarks Mint an NFT to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\n   * const metadata = {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }\n   *\n   * await module.mintTo(toAddress, metadata);\n   * ```\n   */\n  public async mintTo(\n    to: string,\n    metadata: MetadataURIOrObject,\n  ): Promise<NFTMetadata> {\n    if (await this.isV1()) {\n      return await this._v1MintTo(to, metadata);\n    }\n\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    const receipt = await this.sendTransaction(\"mintTo\", [to, uri]);\n    const event = this.parseLogs<TokenMintedEvent>(\n      \"TokenMinted\",\n      receipt?.logs,\n    );\n    if (event.length === 0) {\n      throw new Error(\"TokenMinted event not found\");\n    }\n\n    const tokenId = event[0].args.tokenIdMinted;\n    return await this.get(tokenId.toString());\n  }\n\n  public async mintBatch(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    return await this.mintBatchTo(await this.getSignerAddress(), metadatas);\n  }\n\n  private async _v1MintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    invariant(this.v1Contract !== undefined, \"v1 contract is undefined\");\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const receipt = await this.sendContractTransaction(\n      this.v1Contract,\n      \"mintNFTBatch\",\n      [to, uris],\n    );\n    const events = this.parseLogs<MintedBatchEvent>(\n      \"MintedBatch\",\n      receipt?.logs,\n      this.v1Contract,\n    );\n    if (events.length === 0) {\n      throw new Error(\"No MintedBatch event found, failed to mint\");\n    }\n\n    const tokenIds = events[0].args.tokenIds;\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Mint Many NFTs\n   *\n   * @remarks Mint many NFTs at once to a specified wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet you want to mint the NFT to\n   * const toAddress = \"{{wallet_address}}\"\n   *\n   * // Custom metadata of the NFTs you want to mint.\n   * const metadatas = [{\n   *   name: \"Cool NFT #1\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT #2\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/other/image.png\"),\n   * }];\n   *\n   * await module.mintBatchTo(toAddress, metadatas);\n   * ```\n   */\n  public async mintBatchTo(\n    to: string,\n    metadatas: MetadataURIOrObject[],\n  ): Promise<NFTMetadata[]> {\n    if (await this.isV1()) {\n      return await this._v1MintBatchTo(to, metadatas);\n    }\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(metadatas);\n    const multicall = uris.map((uri) =>\n      this.contract.interface.encodeFunctionData(\"mintTo\", [to, uri]),\n    );\n\n    const receipt = await this.sendTransaction(\"multicall\", [multicall]);\n    const events = this.parseLogs<TokenMintedEvent>(\n      \"TokenMinted\",\n      receipt.logs,\n    );\n    if (events.length === 0 || events.length < metadatas.length) {\n      throw new Error(\"TokenMinted event not found, minting failed\");\n    }\n\n    const tokenIds = events.map((e) => e.args.tokenIdMinted);\n    return await Promise.all(\n      tokenIds.map((tokenId: BigNumber) => this.get(tokenId.toString())),\n    );\n  }\n\n  /**\n   * Burn NFT\n   *\n   * @remarks Burn an NFT, permanently taking it out of circulation and reducing the supply.\n   *\n   * @example\n   * ```javascript\n   * // The token ID of the NFT you want to burn\n   * const tokenId = 0;\n   *\n   * await module.burn(tokenId);\n   * ```\n   */\n  public async burn(tokenId: BigNumberish): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"burn\", [tokenId]);\n  }\n\n  public async transferFrom(\n    from: string,\n    to: string,\n    tokenId: BigNumberish,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"transferFrom\", [from, to, tokenId]);\n  }\n\n  public async setRoyaltyBps(amount: number): Promise<TransactionReceipt> {\n    // TODO: reduce this duplication and provide common functions around\n    // royalties through an interface. Currently this function is\n    // duplicated across 4 modules\n    const { metadata } = await this.getMetadata(false);\n    const encoded: string[] = [];\n    if (!metadata) {\n      throw new Error(\"No metadata found, this module might be invalid!\");\n    }\n\n    metadata.seller_fee_basis_points = amount;\n    const uri = await this.sdk.getStorage().uploadMetadata(\n      {\n        ...metadata,\n      },\n      this.address,\n      await this.getSignerAddress(),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setRoyaltyBps\", [amount]),\n    );\n    encoded.push(\n      this.contract.interface.encodeFunctionData(\"setContractURI\", [uri]),\n    );\n    return await this.sendTransaction(\"multicall\", [encoded]);\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Gets the royalty BPS (basis points) of the contract\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyBps(): Promise<BigNumberish> {\n    return await this.readOnlyContract.royaltyBps();\n  }\n\n  /**\n   * Gets the address of the royalty recipient\n   *\n   * @returns - The royalty BPS\n   */\n  public async getRoyaltyRecipientAddress(): Promise<string> {\n    const metadata = await this.getMetadata();\n    if (metadata.metadata?.fee_recipient !== undefined) {\n      return metadata.metadata.fee_recipient;\n    }\n    return \"\";\n  }\n\n  /**\n   * Set the default primary sales recipient for this contract\n   * @param address - the wallet that should receive the proceeds from primary sales\n   */\n  public async setPrimarySaleRecipient(\n    address: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setDefaultSaleRecipient\", [address]);\n  }\n\n  public async getPrimarySaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  public async getDefaultSaleRecipient(): Promise<string> {\n    return await this.readOnlyContract.defaultSaleRecipient();\n  }\n\n  /**\n   * Set the default primary sales recipient for this contract\n   * @param recipient - the wallet that should receive the proceeds from primary sales\n   */\n  public async setDefaultSaleRecipient(\n    recipient: string,\n  ): Promise<TransactionReceipt> {\n    return await this.sendTransaction(\"setDefaultSaleRecipient\", [recipient]);\n  }\n\n  public async isTransferRestricted(): Promise<boolean> {\n    return this.readOnlyContract.transfersRestricted();\n  }\n\n  public async setRestrictedTransfer(\n    restricted = false,\n  ): Promise<TransactionReceipt> {\n    await this.onlyRoles([\"admin\"], await this.getSignerAddress());\n    return await this.sendTransaction(\"setRestrictedTransfer\", [restricted]);\n  }\n\n  public async mintWithSignature(\n    req: SignaturePayload,\n    signature: string,\n  ): Promise<BigNumber> {\n    const message = { ...this.mapPayload(req), uri: req.uri };\n    const overrides = await this.getCallOverrides();\n    await this.setAllowance(\n      BigNumber.from(message.price),\n      req.currencyAddress,\n      overrides,\n    );\n\n    const receipt = await this.sendTransaction(\n      \"mintWithSignature\",\n      [message, signature],\n      overrides,\n    );\n\n    const t = await this.parseLogs<MintWithSignatureEvent>(\n      \"MintWithSignature\",\n      receipt.logs,\n    );\n    if (t.length === 0) {\n      throw new Error(\"No MintWithSignature event found\");\n    }\n\n    return t[0].args.tokenIdMinted;\n  }\n\n  public async verify(\n    mintRequest: SignaturePayload,\n    signature: string,\n  ): Promise<boolean> {\n    const message = this.mapPayload(mintRequest);\n    const v = await this.readOnlyContract.verify(\n      { ...message, uri: mintRequest.uri },\n      signature,\n    );\n    return v[0];\n  }\n\n  public async generateSignatureBatch(\n    payloads: NewSignaturePayload[],\n  ): Promise<{ payload: SignaturePayload; signature: string }[]> {\n    const resolveId = (mintRequest: NewSignaturePayload): string => {\n      if (mintRequest.id === undefined) {\n        const buffer = Buffer.alloc(16);\n        uuidv4({}, buffer);\n        return hexlify(toUtf8Bytes(buffer.toString(\"hex\")));\n      } else {\n        return hexlify(mintRequest.id as string);\n      }\n    };\n\n    await this.onlyRoles([\"minter\"], await this.getSignerAddress());\n\n    const { metadataUris: uris } = await this.sdk\n      .getStorage()\n      .uploadMetadataBatch(payloads.map((r) => r.metadata));\n\n    const chainId = await this.getChainID();\n    const signer = this.getSigner() as Signer;\n\n    return await Promise.all(\n      payloads.map(async (m, i) => {\n        const id = resolveId(m);\n        const uri = uris[i];\n        return {\n          payload: {\n            ...m,\n            id,\n            uri,\n          },\n          signature: (\n            await this.signTypedDataEmitEvent(\n              signer,\n              {\n                name: \"SignatureMint721\",\n                version: \"1\",\n                chainId,\n                verifyingContract: this.address,\n              },\n              { MintRequest },\n              {\n                uri,\n                ...(this.mapPayload(m) as any),\n                uid: id,\n              },\n            )\n          ).toString(),\n        };\n      }),\n    );\n  }\n\n  public async generateSignature(\n    mintRequest: NewSignaturePayload,\n  ): Promise<{ payload: SignaturePayload; signature: string }> {\n    return (await this.generateSignatureBatch([mintRequest]))[0];\n  }\n\n  /**\n   * Maps a payload to the format expected by the contract\n   *\n   * @internal\n   *\n   * @param mintRequest - The payload to map.\n   * @returns - The mapped payload.\n   */\n  private mapPayload(\n    mintRequest: SignaturePayload | NewSignaturePayload,\n  ): MintRequestStructOutput {\n    return {\n      to: mintRequest.to,\n      price: mintRequest.price,\n      currency: mintRequest.currencyAddress,\n      validityEndTimestamp: mintRequest.mintEndTimeEpochSeconds,\n      validityStartTimestamp: mintRequest.mintStartTimeEpochSeconds,\n      uid: mintRequest.id,\n    } as MintRequestStructOutput;\n  }\n\n  // TODO: write in common place and stop duping\n  private async setAllowance(\n    value: BigNumber,\n    currencyAddress: string,\n    overrides: any,\n  ): Promise<any> {\n    if (\n      currencyAddress === NATIVE_TOKEN_ADDRESS ||\n      currencyAddress === AddressZero\n    ) {\n      overrides[\"value\"] = value;\n    } else {\n      const erc20 = ERC20__factory.connect(\n        currencyAddress,\n        this.providerOrSigner,\n      );\n      const owner = await this.getSignerAddress();\n      const spender = this.address;\n      const allowance = await erc20.allowance(owner, spender);\n\n      if (allowance.lt(value)) {\n        await this.sendContractTransaction(erc20, \"increaseAllowance\", [\n          spender,\n          value.sub(allowance),\n        ]);\n      }\n      return overrides;\n    }\n  }\n}\n","import { ERC20__factory, Royalty, Royalty__factory } from \"@3rdweb/contracts\";\nimport { BigNumber } from \"ethers\";\nimport { ModuleType } from \"../common\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n} from \"../common/currency\";\nimport { Module } from \"../core/module\";\nimport { SplitRecipient } from \"../types/SplitRecipient\";\n\nexport interface ISplitsModule {\n  /**\n   * Returns a list of all recipients with their\n   * respective split percentages.\n   *\n   */\n  getAllRecipients(): Promise<SplitRecipient[]>;\n\n  /**\n   * Get the split percentage of a recipient.\n   *\n   * @param address - The address of the recipient.\n   */\n  getRecipientSplitPercentage(address: string): Promise<SplitRecipient>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency.\n   *\n   * @param address - The address of the recipient to check the balance of.\n   */\n  balanceOf(address: string): Promise<BigNumber>;\n\n  /**\n   * Returns the amount of royalty available for a recipient\n   * to withdraw in the native currency in a specific currency.\n   *\n   * @param walletAddress - The address of the recipient to check the balance of.\n   * @param tokenAddress - The address of the currency to check the balance in.\n   */\n  balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet.\n   *\n   * @param address - The address to withdraw royalties for.\n   */\n  withdraw(address: string): Promise<void>;\n\n  /**\n   * Transaction that will withdraw the split amount of royalty that\n   * the `address` is owed and transfer it to the wallet, in the\n   * currency specified by `tokenAddress`.\n   *\n   * For example: If the native currency of a chain is ETH but the user\n   * wants to withdraw their split in $MATIC, they should pass\n   * the address of the $MATIC token as the `tokenAddress` parameter.\n   *\n   * @param walletAddress - The address to withdraw royalties for.\n   */\n  withdrawToken(walletAddress: string, tokenAddress: string): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients.\n   */\n  distribute(): Promise<void>;\n\n  /**\n   * Distributes all funds to the recipients in the specified currency.\n   *\n   * @param tokenAddress - The address of the currency to distribute the funds in.\n   */\n  distributeToken(tokenAddress: string): Promise<void>;\n}\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getSplitsModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class SplitsModule extends Module<Royalty> implements ISplitsModule {\n  public static moduleType: ModuleType = ModuleType.SPLITS as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): Royalty {\n    return Royalty__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return SplitsModule.moduleType;\n  }\n\n  public async get(): Promise<Currency> {\n    return await getCurrencyMetadata(this.providerOrSigner, this.address);\n  }\n\n  /**\n   * Get Recipients\n   *\n   * @remarks Get the data about the shares of every split recipient on the module\n   *\n   * @example\n   * ```javascript\n   * const recipients = await module.getAllRecepients();\n   * console.log(recipients);\n   * ```\n   */\n  public async getAllRecipients(): Promise<SplitRecipient[]> {\n    const recipients: SplitRecipient[] = [];\n\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.readOnlyContract.payeeCount();\n    // eslint-disable-next-line no-constant-condition\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.readOnlyContract.payee(index);\n        recipients.push(\n          await this.getRecipientSplitPercentage(recipientAddress),\n        );\n        index = index.add(1);\n      } catch (err: any) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\n          \"method\" in err &&\n          (err[\"method\"] as string).toLowerCase().includes(\"payee(uint256)\")\n        ) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return recipients;\n  }\n  /**\n   *\n   * Returns all the recipients and their balances in the native currency.\n   * @returns A map of recipient addresses to their balances in the native currency.\n   *\n   */\n  public async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: BigNumber } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n  /**\n   *\n   * Returns all the recipients and their balances in a non-native currency.\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   *\n   */\n  public async balanceOfTokenAllRecipients(tokenAddress: string) {\n    const recipients = await this.getAllRecipients();\n    const balances: { [key: string]: CurrencyValue } = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(\n        recipient.address,\n        tokenAddress,\n      );\n    }\n    return balances;\n  }\n  public async getRecipientSplitPercentage(\n    address: string,\n  ): Promise<SplitRecipient> {\n    const [totalShares, walletsShares] = await Promise.all([\n      this.readOnlyContract.totalShares(),\n      this.readOnlyContract.shares(address),\n    ]);\n\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage:\n        walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() /\n        1e5,\n    };\n  }\n\n  /**\n   * Get Funds\n   *\n   * @remarks Get the amount of funds in the native currency held by the module thats owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await module.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOf(address: string): Promise<BigNumber> {\n    const walletBalance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    const totalReleased = await this.readOnlyContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n\n    return this._pendingPayment(\n      address,\n      totalReceived,\n      await this.readOnlyContract[\"released(address)\"](address),\n    );\n  }\n\n  /**\n   * Get Token Funds\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the module thats owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await module.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  public async balanceOfToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(tokenAddress, this.providerOrSigner);\n    const walletBalance = await erc20.balanceOf(this.address);\n    const totalReleased = await this.readOnlyContract[\"totalReleased(address)\"](\n      tokenAddress,\n    );\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(\n      walletAddress,\n      totalReceived,\n      await this.readOnlyContract[\"released(address,address)\"](\n        tokenAddress,\n        walletAddress,\n      ),\n    );\n    return await getCurrencyValue(this.providerOrSigner, tokenAddress, value);\n  }\n\n  public async withdraw(address: string): Promise<void> {\n    await this.sendTransaction(\"release(address)\", [address]);\n  }\n\n  private async _pendingPayment(\n    address: string,\n    totalReceived: BigNumber,\n    alreadyReleased: BigNumber,\n  ): Promise<BigNumber> {\n    const addressReceived = totalReceived.mul(\n      await this.readOnlyContract.shares(address),\n    );\n    const totalRoyaltyAvailable = addressReceived.div(\n      await this.readOnlyContract.totalShares(),\n    );\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  public async withdrawToken(\n    walletAddress: string,\n    tokenAddress: string,\n  ): Promise<void> {\n    await this.sendTransaction(\"release(address,address)\", [\n      tokenAddress,\n      walletAddress,\n    ]);\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await module.distribute();\n   * ```\n   */\n  public async distribute(): Promise<void> {\n    await this.sendTransaction(\"distribute()\", []);\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await module.distributeToken(tokenAddress);\n   * ```\n   */\n  public async distributeToken(tokenAddress: string): Promise<void> {\n    await this.sendTransaction(\"distribute(address)\", [tokenAddress]);\n  }\n}\n","import {\n  ERC20__factory,\n  VotingGovernor,\n  VotingGovernor__factory,\n} from \"@3rdweb/contracts\";\nimport { TransactionReceipt } from \"@ethersproject/providers\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  Currency,\n  CurrencyValue,\n  getCurrencyMetadata,\n  getCurrencyValue,\n  ModuleType,\n} from \"../common\";\nimport { Module } from \"../core/module\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { VoteType } from \"../enums\";\nimport { Proposal, ProposalExecutable } from \"../types/vote\";\n\nexport interface VoteSettings {\n  votingDelay: string;\n  votingPeriod: string;\n  votingTokenAddress: string;\n  votingTokenMetadata: Currency;\n  votingQuorumFraction: string;\n  proposalTokenThreshold: string;\n}\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *\n * // You can switch out this provider with any wallet or provider setup you like.\n * const provider = ethers.Wallet.createRandom();\n * const sdk = new ThirdwebSDK(provider);\n * const module = sdk.getVoteModule(\"{{module_address}}\");\n * ```\n *\n * @public\n */\nexport class VoteModule extends Module<VotingGovernor> {\n  public static moduleType: ModuleType = ModuleType.VOTE as const;\n\n  /**\n   * @internal\n   */\n  protected connectContract(): VotingGovernor {\n    return VotingGovernor__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  protected getModuleType(): ModuleType {\n    return VoteModule.moduleType;\n  }\n\n  public async settings(): Promise<VoteSettings> {\n    const [\n      votingDelay,\n      votingPeriod,\n      votingTokenAddress,\n      votingQuorumFraction,\n      proposalTokenThreshold,\n    ] = await Promise.all([\n      this.readOnlyContract.votingDelay(),\n      this.readOnlyContract.votingPeriod(),\n      this.readOnlyContract.token(),\n      this.readOnlyContract.quorumNumerator(),\n      this.readOnlyContract.proposalThreshold(),\n    ]);\n    const votingTokenMetadata = await getCurrencyMetadata(\n      this.providerOrSigner,\n      votingTokenAddress,\n    );\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString(),\n    };\n  }\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  public async get(proposalId: string): Promise<Proposal> {\n    await this.ensureExists(proposalId);\n\n    const all = await this.getAll();\n    const proposals = all.filter(\n      (p) => p.proposalId.toLowerCase() === proposalId.toLowerCase(),\n    );\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this module.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await module.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  public async getAll(): Promise<Proposal[]> {\n    const proposals = await this.readOnlyContract.queryFilter(\n      this.contract.filters.ProposalCreated(),\n    );\n\n    const results: Proposal[] = [];\n    const states = await Promise.all(\n      proposals.map((p) => this.readOnlyContract.state(p.args.proposalId)),\n    );\n    const votes = await Promise.all(\n      proposals.map((p) =>\n        this.readOnlyContract.proposalVotes(p.args.proposalId),\n      ),\n    );\n\n    for (let i = 0; i < proposals.length; i++) {\n      const p = proposals[i].args;\n      const s = states[i];\n      const v = [\n        {\n          type: VoteType.Against,\n          label: \"Against\",\n          count: votes[i].againstVotes,\n        },\n        {\n          type: VoteType.For,\n          label: \"For\",\n          count: votes[i].forVotes,\n        },\n        {\n          type: VoteType.Abstain,\n          label: \"Abstain\",\n          count: votes[i].abstainVotes,\n        },\n      ];\n      const e = [];\n      for (let j = 0; j < p.targets.length; j++) {\n        e.push({\n          to: p.targets[j],\n          value: p[3][j] || 0,\n          data: p.calldatas[j],\n        });\n      }\n      results.push({\n        proposalId: p.proposalId.toString(),\n        proposer: p.proposer,\n        description: p.description,\n        startBlock: p.startBlock,\n        endBlock: p.endBlock,\n        state: s,\n        votes: v,\n        executions: e.map((exec) => ({\n          toAddress: exec.to,\n          nativeTokenValue: exec.value,\n          transactionData: exec.data,\n        })),\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token module (which you would need to setup in code)\n   *     transactionData: tokenModule.contract.interface.encodeFunctionData(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await module.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal.\n   */\n  public async propose(\n    description: string,\n    executions?: ProposalExecutable[],\n  ): Promise<BigNumber> {\n    if (!executions) {\n      executions = [\n        { toAddress: this.address, nativeTokenValue: 0, transactionData: \"0x\" },\n      ];\n    }\n    const tos = executions.map((p) => p.toAddress);\n    const values = executions.map((p) => p.nativeTokenValue);\n    const datas = executions.map((p) => p.transactionData);\n    const receipt = await this.sendTransaction(\"propose\", [\n      tos,\n      values,\n      datas,\n      description,\n    ]);\n\n    const event = this.parseEventLogs(\"ProposalCreated\", receipt?.logs);\n    return event.proposalId;\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await module.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  public async vote(proposalId: string, voteType: VoteType, reason = \"\") {\n    await this.ensureExists(proposalId);\n\n    await this.sendTransaction(\"castVoteWithReason\", [\n      proposalId,\n      voteType,\n      reason,\n    ]);\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await module.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  public async hasVoted(\n    proposalId: string,\n    account?: string,\n  ): Promise<boolean> {\n    if (!account) {\n      account = await this.getSignerAddress();\n    }\n    return this.readOnlyContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await module.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  public async execute(proposalId: string) {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    await this.sendTransaction(\"execute\", [\n      tos,\n      values,\n      datas,\n      descriptionHash,\n    ]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await module.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  public async canExecute(proposalId: string): Promise<boolean> {\n    await this.ensureExists(proposalId);\n\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map((p) => p.toAddress);\n    const values = proposal.executions.map((p) => p.nativeTokenValue);\n    const datas = proposal.executions.map((p) => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contract.callStatic.execute(\n        tos,\n        values,\n        datas,\n        descriptionHash,\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balance(): Promise<CurrencyValue> {\n    const balance = await this.readOnlyContract.provider.getBalance(\n      this.address,\n    );\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance.toString(),\n      displayValue: ethers.utils.formatUnits(balance, 18),\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  public async balanceOfToken(tokenAddress: string): Promise<CurrencyValue> {\n    const erc20 = ERC20__factory.connect(\n      tokenAddress,\n      this.readOnlyContract.provider,\n    );\n    return await getCurrencyValue(\n      this.providerOrSigner,\n      tokenAddress,\n      await erc20.balanceOf(this.address),\n    );\n  }\n\n  public async setModuleMetadata(\n    metadata: MetadataURIOrObject,\n  ): Promise<TransactionReceipt> {\n    const uri = await this.sdk.getStorage().uploadMetadata(metadata);\n    return await this.sendTransaction(\"setContractURI\", [uri]);\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  private async ensureExists(proposalId: string): Promise<void> {\n    await this.readOnlyContract.state(proposalId);\n  }\n}\n","import {\n  DuplicateFileNameError,\n  FetchError,\n  UploadError,\n} from \"../common/error\";\nimport { MetadataURIOrObject } from \"../core/types\";\nimport { IStorage, UploadMetadataBatchResult } from \"../interfaces/IStorage\";\nimport FileOrBuffer from \"../types/FileOrBuffer\";\nimport { BufferOrStringWithName } from \"../types/BufferOrStringWithName\";\n\nif (!globalThis.FormData) {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  globalThis.FormData = require(\"form-data\");\n}\n\nconst thirdwebIpfsServerUrl = \"https://upload.nftlabs.co\";\nconst pinataIpfsUrl = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n// const thirdwebIpfsServerUrl = \"http://localhost:3002\";\n\n/**\n * @internal\n */\ninterface CidWithFileName {\n  // base cid of the directory\n  cid: string;\n\n  // file name of the file without cid\n  fileNames: string[];\n}\n\nexport class IpfsStorage implements IStorage {\n  private gatewayUrl: string;\n\n  constructor(gatewayUrl: string) {\n    this.gatewayUrl = `${gatewayUrl.replace(/\\/$/, \"\")}/`;\n  }\n\n  public async upload(\n    data: string | FileOrBuffer,\n    contractAddress?: string,\n    signerAddress?: string,\n  ): Promise<string> {\n    if (typeof data === \"string\") {\n      // always 0 indexed because there's only 1 file\n      const cid = await this.uploadBatch([data], contractAddress, 0);\n      return `${cid}0`;\n    } else if (data instanceof Buffer) {\n      // always 0 indexed because there's only 1 file\n      const cid = await this.uploadBatch([data], contractAddress, 0);\n      return `${cid}0`;\n    }\n\n    // if it's file type, we're doing legacy upload\n\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n      \"X-Public-Address\": signerAddress || \"\",\n    };\n    const formData = new FormData();\n    formData.append(\"file\", data as any);\n    try {\n      const res = await fetch(`${thirdwebIpfsServerUrl}/upload`, {\n        method: \"POST\",\n        body: formData as any,\n        headers,\n      });\n      if (res.status !== 200) {\n        throw new Error(\n          `Failed to upload to IPFS [status code = ${res.status}]`,\n        );\n      }\n\n      const body = await res.json();\n      return body.IpfsUri;\n    } catch (e) {\n      throw new UploadError(`Failed to upload to IPFS: ${e}`);\n    }\n  }\n\n  public async uploadBatch(\n    files:\n      | Buffer[]\n      | string[]\n      | FileOrBuffer[]\n      | File[]\n      | BufferOrStringWithName[],\n    contractAddress?: string,\n    fileStartNumber = 0,\n  ): Promise<string> {\n    const { cid } = await this.uploadBatchWithCid(\n      files,\n      contractAddress,\n      fileStartNumber,\n    );\n\n    return `ipfs://${cid}/`;\n  }\n\n  private async uploadBatchWithCid(\n    files:\n      | Buffer[]\n      | string[]\n      | FileOrBuffer[]\n      | File[]\n      | BufferOrStringWithName[],\n    contractAddress?: string,\n    fileStartNumber = 0,\n  ): Promise<CidWithFileName> {\n    const token = await this.getUploadToken(contractAddress || \"\");\n    const metadata = {\n      name: `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const data = new FormData();\n    const fileNames: string[] = [];\n    files.forEach((file, i) => {\n      let fileName = \"\";\n      let fileData = file;\n      // if it is a file, we passthrough the file extensions,\n      // if it is a buffer or string, the filename would be fileStartNumber + index\n      // if it is a buffer or string with names, the filename would be the name\n      if (file instanceof File) {\n        let extensions = \"\";\n        if (file.name) {\n          const extensionStartIndex = file.name.lastIndexOf(\".\");\n          if (extensionStartIndex > -1) {\n            extensions = file.name.substring(extensionStartIndex);\n          }\n        }\n        fileName = `${i + fileStartNumber}${extensions}`;\n      } else if (file instanceof Buffer || typeof file === \"string\") {\n        fileName = `${i + fileStartNumber}`;\n      } else if (file && file.name && file?.data) {\n        fileData = file?.data;\n        fileName = `${file.name}`;\n      } else {\n        // default behavior\n        fileName = `${i + fileStartNumber}`;\n      }\n\n      const filepath = `files/${fileName}`;\n      if (fileNames.indexOf(fileName) > -1) {\n        throw new DuplicateFileNameError(fileName);\n      }\n      fileNames.push(fileName);\n      if (typeof window === \"undefined\") {\n        data.append(\"file\", fileData as any, { filepath } as any);\n      } else {\n        // browser does blob things, filepath is parsed differently on browser vs node.\n        // pls pinata?\n        data.append(\"file\", new Blob([fileData as any]), filepath);\n      }\n    });\n\n    data.append(\"pinataMetadata\", JSON.stringify(metadata));\n    const res = await fetch(pinataIpfsUrl, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: data as any,\n    });\n    const body = await res.json();\n    if (!res.ok) {\n      console.log(body);\n      throw new UploadError(\"Failed to upload files to IPFS\");\n    }\n    return {\n      cid: body.IpfsHash,\n      fileNames,\n    };\n  }\n\n  public async getUploadToken(contractAddress: string): Promise<string> {\n    const headers = {\n      \"X-App-Name\": `CONSOLE-TS-SDK-${contractAddress}`,\n    };\n    const res = await fetch(`${thirdwebIpfsServerUrl}/grant`, {\n      method: \"GET\",\n      headers,\n    });\n    if (!res.ok) {\n      throw new FetchError(`Failed to get upload token`);\n    }\n    const body = await res.text();\n    return body;\n  }\n\n  public async get(hash: string): Promise<string> {\n    let uri = hash;\n    if (hash) {\n      uri = this.resolveFullUrl(hash);\n    }\n    const result = await fetch(uri);\n    if (!result.ok) {\n      throw new Error(`Status code (!= 200) =${result.status}`);\n    }\n\n    return await result.text();\n  }\n\n  /**\n   * This function recurisely traverses an object and hashes any\n   * `Buffer` or `File` objects into the returned map.\n   *\n   * @param object - The object to recurse over\n   * @param files - The running array of files or buffer to upload\n   * @returns - The final map of all hashes to files\n   */\n  public buildFilePropertiesMap(\n    object: Record<string, any>,\n    files: (File | Buffer)[],\n  ): (File | Buffer)[] {\n    const keys = Object.keys(object).sort();\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const shouldUpload = val instanceof File || val instanceof Buffer;\n      if (shouldUpload) {\n        files.push(val);\n      }\n\n      if (typeof val === \"object\") {\n        this.buildFilePropertiesMap(val, files);\n      }\n    }\n    return files;\n  }\n\n  /**\n   * Pre-processes metadata and uploads all file properties\n   * to storage in *bulk*, then performs a string replacement of\n   * all file properties -> the resulting ipfs uri. This is\n   * called internally by `uploadMetadataBatch`.\n   *\n   * @internal\n   *\n   * @param metadata - The metadata to recursively process\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  public async batchUploadProperties(\n    metadatas: MetadataURIOrObject[],\n  ): Promise<any> {\n    if (typeof metadatas === \"string\") {\n      return metadatas;\n    }\n    const filesToUpload = this.buildFilePropertiesMap(metadatas, []);\n    if (filesToUpload.length === 0) {\n      return metadatas;\n    }\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      filesToUpload,\n      \"\",\n      0,\n    );\n\n    const cids = [];\n    // recurse ordered array\n    for (const filename of fileNames) {\n      cids.push(`${cid}/${filename}`);\n    }\n\n    const finalMetadata = await this.replaceFilePropertiesWithHashes(\n      metadatas,\n      cids,\n    );\n    return finalMetadata;\n  }\n\n  /**\n   * Given a map of file hashes to ipfs uris, this function will hash\n   * all properties recursively and replace them with the ipfs uris\n   * from the map passed in. If a hash is missing from the map, the function\n   * will throw an error.\n   *\n   * @internal\n   *\n   * @param object - The object to recursively process\n   * @param cids - The array of file hashes to ipfs uris in the recurse order\n   * @returns - The processed metadata with properties pointing at ipfs in place of `File | Buffer`\n   */\n  private async replaceFilePropertiesWithHashes(\n    object: Record<string, any>,\n    cids: string[],\n  ) {\n    const keys = Object.keys(object).sort();\n    for (const key in keys) {\n      const val = object[keys[key]];\n      const isFile = val instanceof File || val instanceof Buffer;\n      if (typeof val === \"object\" && !isFile) {\n        await this.replaceFilePropertiesWithHashes(val, cids);\n        continue;\n      }\n\n      if (!isFile) {\n        continue;\n      }\n\n      object[keys[key]] = `ipfs://${cids.splice(0, 1)[0]}`;\n    }\n    return object;\n  }\n\n  public async uploadMetadata(\n    metadata: MetadataURIOrObject,\n    contractAddress?: string,\n    _signerAddress?: string,\n  ): Promise<string> {\n    if (typeof metadata === \"string\") {\n      return metadata;\n    }\n\n    // since there's only single object, always use the first index\n    const { metadataUris } = await this.uploadMetadataBatch(\n      [metadata],\n      contractAddress,\n      0,\n    );\n    return metadataUris[0];\n  }\n\n  /**\n   * @internal\n   */\n  public async uploadMetadataBatch(\n    metadatas: MetadataURIOrObject[],\n    contractAddress?: string,\n    startFileNumber?: number,\n  ): Promise<UploadMetadataBatchResult> {\n    // we only want to upload if the metadata object is not a string\n    const metadataObjects = metadatas.filter((m) => typeof m !== \"string\");\n    const metadataToUpload: string[] = (\n      await this.batchUploadProperties(metadataObjects)\n    ).map((m: any) => JSON.stringify(m));\n\n    // batch upload non-string metadata object\n    if (metadataToUpload.length === 0) {\n      return {\n        baseUri: \"\",\n        metadataUris: metadatas.filter(\n          (m) => typeof m === \"string\",\n        ) as string[],\n      };\n    }\n\n    const { cid, fileNames } = await this.uploadBatchWithCid(\n      metadataToUpload,\n      contractAddress,\n      startFileNumber,\n    );\n\n    const baseUri = `ipfs://${cid}/`;\n    const uris = [];\n    for (const metadata of metadatas) {\n      if (typeof metadata === \"string\") {\n        uris.push(metadata);\n      } else {\n        uris.push(`${baseUri}${fileNames.splice(0, 1)[0]}`);\n      }\n    }\n\n    return {\n      baseUri,\n      metadataUris: uris,\n    };\n  }\n\n  /**\n   * Resolves the full url for a file using the configured gateway\n   *\n   * @param ipfsHash - the ipfs:// uri\n   * @returns - The fully formed IPFS url with the gateway url\n   * @internal\n   */\n  resolveFullUrl(ipfsHash: string): string {\n    if (typeof ipfsHash !== \"string\") {\n      return \"\";\n    }\n    return ipfsHash && ipfsHash.toLowerCase().includes(\"ipfs://\")\n      ? ipfsHash.replace(\"ipfs://\", this.gatewayUrl)\n      : ipfsHash;\n  }\n\n  public canResolve(uri: string): boolean {\n    const resolved = this.resolveFullUrl(uri);\n    return resolved.toLowerCase() !== uri.toLowerCase();\n  }\n}\n","import { Registry, Registry__factory } from \"@3rdweb/contracts\";\nimport { ContractMetadata, getContractMetadata } from \"../common/contract\";\nimport { Module } from \"./module\";\n\n/**\n * @public\n */\nexport interface IAppModule {\n  address: string;\n  version: number;\n  metadata?: ContractMetadata;\n}\n\n/**\n * The RegistryModule. This should always be created via `getRegistryModule()` on the main SDK.\n * @internal\n */\nexport class RegistryModule extends Module<Registry> {\n  /**\n   * @internal\n   */\n  protected connectContract(): Registry {\n    return Registry__factory.connect(this.address, this.providerOrSigner);\n  }\n\n  /**\n   * @internal\n   */\n  public async getProtocolContracts(address?: string): Promise<IAppModule[]> {\n    const deployer = address || (await this.getSignerAddress());\n    const maxVersion = await this.readOnlyContract.getProtocolControlCount(\n      deployer,\n    );\n    const versions = Array.from(Array(maxVersion.toNumber()).keys()).reverse();\n    const addresses = await Promise.all(\n      versions.map((v) =>\n        this.readOnlyContract.getProtocolControl(deployer, (v + 1).toString()),\n      ),\n    );\n    const metadatas = await Promise.all(\n      addresses.map((addr) =>\n        getContractMetadata(\n          this.providerOrSigner,\n          addr,\n          this.sdk.getStorage(),\n        ).catch(() => undefined),\n      ),\n    );\n    return versions.map((v, i) => {\n      return {\n        address: addresses[i],\n        version: v,\n        metadata: metadatas[i],\n      };\n    });\n  }\n}\n","import { SignatureMint1155Module } from \"../modules/signature-mint-1155\";\nimport { Forwarder__factory } from \"@3rdweb/contracts\";\nimport { Provider } from \"@ethersproject/providers\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport {\n  BaseContract,\n  BigNumber,\n  BytesLike,\n  ContractReceipt,\n  ethers,\n  Signer,\n} from \"ethers\";\nimport { EventEmitter2 } from \"eventemitter2\";\nimport { JsonConvert } from \"json2typescript\";\nimport MerkleTree from \"merkletreejs\";\nimport type { C } from \"ts-toolbelt\";\nimport {\n  DuplicateLeafsError,\n  getContractMetadata,\n  uploadMetadata,\n} from \"../common\";\nimport {\n  FORWARDER_ADDRESS,\n  getContractAddressByChainId,\n} from \"../common/address\";\nimport { SUPPORTED_CHAIN_ID } from \"../common/chain\";\nimport {\n  BiconomyForwarderAbi,\n  ForwardRequest,\n  getAndIncrementNonce,\n} from \"../common/forwarder\";\nimport { getGasPriceForChain } from \"../common/gas-price\";\nimport { invariant } from \"../common/invariant\";\nimport { signEIP2612Permit } from \"../common/permit\";\nimport { signTypedData } from \"../common/sign\";\nimport { ISDKOptions, IThirdwebSdk } from \"../interfaces\";\nimport { IStorage } from \"../interfaces/IStorage\";\nimport { AppModule } from \"../modules/app\";\nimport { BundleModule } from \"../modules/bundle\";\nimport { BundleDropModule } from \"../modules/bundleDrop\";\nimport { CollectionModule } from \"../modules/collection\";\nimport { DatastoreModule } from \"../modules/datastore\";\nimport { DropModule } from \"../modules/drop\";\nimport { MarketModule } from \"../modules/market\";\nimport { MarketplaceModule } from \"../modules/marketplace\";\nimport { NFTModule } from \"../modules/nft\";\nimport { PackModule } from \"../modules/pack\";\nimport { SplitsModule } from \"../modules/royalty\";\nimport { CurrencyModule, TokenModule } from \"../modules/token\";\nimport { VoteModule } from \"../modules/vote\";\nimport { IpfsStorage } from \"../storage/IpfsStorage\";\nimport { ModuleMetadataNoType } from \"../types/ModuleMetadata\";\nimport { ClaimProof, Snapshot, SnapshotInfo } from \"../types/snapshots\";\nimport { EventType } from \"./events\";\nimport { IAppModule, RegistryModule } from \"./registry\";\nimport {\n  ForwardRequestMessage,\n  GaslessTransaction,\n  MetadataURIOrObject,\n  PermitRequestMessage,\n  ProviderOrSigner,\n  ValidProviderInput,\n} from \"./types\";\n\n/**\n * @internal\n */\nexport type AnyContract =\n  | typeof AppModule\n  | typeof BundleModule\n  | typeof NFTModule\n  | typeof CurrencyModule\n  | typeof MarketModule\n  | typeof PackModule\n  | typeof RegistryModule\n  | typeof DropModule\n  | typeof DatastoreModule\n  | typeof SplitsModule\n  | typeof BundleDropModule\n  | typeof MarketplaceModule\n  | typeof VoteModule\n  | typeof SignatureMint1155Module;\n\n/**\n * The entrypoint to the SDK.\n * @public\n */\nexport class ThirdwebSDK implements IThirdwebSdk {\n  // default options\n  private options: ISDKOptions;\n  private defaultOptions: ISDKOptions = {\n    ipfsGatewayUrl: \"https://cloudflare-ipfs.com/ipfs/\",\n    registryContractAddress: \"\",\n    maxGasPriceInGwei: 300,\n    gasSpeed: \"fastest\",\n    transactionRelayerUrl: \"\",\n    transactionRelayerSendFunction: this.defaultRelayerSendFunction.bind(this),\n    transactionRelayerForwarderAddress: FORWARDER_ADDRESS,\n    readOnlyRpcUrl: \"\",\n    gasless: {\n      biconomy: {\n        apiId: \"\",\n        apiKey: \"\",\n        deadlineSeconds: 3600,\n        gasTier: \"RAPID\",\n      },\n    },\n    gaslessSendFunction: this.defaultGaslessSendFunction.bind(this),\n  };\n\n  private modules = new Map<string, C.Instance<AnyContract>>();\n  private providerOrSigner: ProviderOrSigner;\n\n  private _signer: Signer | null = null;\n\n  private _jsonConvert = new JsonConvert();\n  private storage: IStorage;\n\n  public event = new EventEmitter2();\n\n  /**\n   * The active Signer, you should not need to access this unless you are deploying new modules.\n   * @internal\n   */\n  public get signer(): Signer | null {\n    return this._signer;\n  }\n  private set signer(value: Signer | null) {\n    this._signer = value;\n  }\n\n  private _registry: RegistryModule | null = null;\n  private get registry(): RegistryModule | null {\n    return this._registry;\n  }\n  private set registry(value: RegistryModule | null) {\n    this._registry = value;\n  }\n\n  constructor(\n    providerOrNetwork: ValidProviderInput,\n    opts?: Partial<ISDKOptions>,\n  ) {\n    this.providerOrSigner = this.setProviderOrSigner(providerOrNetwork);\n    this.options = {\n      ...this.defaultOptions,\n      ...opts,\n    };\n    this.storage = new IpfsStorage(this.options.ipfsGatewayUrl);\n  }\n\n  private updateModuleSigners() {\n    for (const [, _module] of this.modules) {\n      if (this.isReadOnly()) {\n        _module.clearSigner();\n      }\n      _module.setProviderOrSigner(this.providerOrSigner);\n    }\n  }\n\n  private getProvider(): Provider | undefined {\n    const provider = Provider.isProvider(this.providerOrSigner)\n      ? this.providerOrSigner\n      : this.providerOrSigner.provider;\n    return provider;\n  }\n\n  private getSigner(): Signer | undefined {\n    if (Signer.isSigner(this.providerOrSigner)) {\n      return this.providerOrSigner;\n    }\n    return undefined;\n  }\n\n  private async getChainID(): Promise<number> {\n    const provider = this.getProvider();\n    invariant(provider, \"getRegistryAddress() -- No Provider\");\n    const { chainId } = await provider.getNetwork();\n    return chainId;\n  }\n\n  private async getRegistryAddress(): Promise<string | undefined> {\n    if (this.options.registryContractAddress) {\n      return this.options.registryContractAddress;\n    }\n    return getContractAddressByChainId(\n      (await this.getChainID()) as SUPPORTED_CHAIN_ID,\n    );\n  }\n  /**\n   *\n   * @param address - The contract address of the given Registry module.\n   * @returns The Registry Module.\n   * @internal\n   */\n  private async getRegistryModule(): Promise<RegistryModule> {\n    const address = await this.getRegistryAddress();\n    invariant(address, \"getRegistryModule() -- No Address\");\n    return (this.registry = this.getOrCreateModule(address, RegistryModule));\n  }\n\n  private getOrCreateModule<T extends AnyContract>(\n    address: string,\n    _Module: T,\n  ): C.Instance<T> {\n    if (this.modules.has(address)) {\n      return this.modules.get(address) as C.Instance<T>;\n    }\n    const _newModule = new _Module(\n      this.providerOrSigner,\n      address,\n      this.options,\n      this,\n    );\n    this.modules.set(address, _newModule);\n    return _newModule as C.Instance<T>;\n  }\n\n  /**\n   * you should not need this unless you are creating new modules\n   * @returns the active registry module forwarder address\n   * @internal\n   */\n  public async getForwarderAddress(): Promise<string> {\n    return await (\n      this.registry || (await this.getRegistryModule())\n    ).readOnlyContract.forwarder();\n  }\n\n  /**\n   * Call this to get the current apps.\n   * @returns All currently registered apps for the connected wallet\n   */\n  public async getApps(address?: string): Promise<IAppModule[]> {\n    return (\n      this.registry || (await this.getRegistryModule())\n    ).getProtocolContracts(address);\n  }\n\n  /**\n   * Call this to create a new app\n   * @param metadata - metadata URI or a JSON object\n   * @returns The transaction receipt\n   */\n  public async createApp(\n    metadata: MetadataURIOrObject,\n  ): Promise<ContractReceipt> {\n    const registryContract = (this.registry || (await this.getRegistryModule()))\n      .contract;\n    const gasPrice = await this.getGasPrice();\n    const txOpts: Record<string, any> = {};\n    // could technically be `0` so simple falsy check does not suffice\n    if (typeof gasPrice === \"number\") {\n      txOpts.gasPrice = parseUnits(gasPrice.toString(), \"gwei\");\n    }\n\n    const uri = await uploadMetadata(\n      metadata,\n      registryContract.address,\n      (await this.signer?.getAddress()) || undefined,\n    );\n\n    const txn = await registryContract.deployProtocol(uri, txOpts);\n    return await txn.wait();\n  }\n\n  /**\n   *\n   * @param speed - what speed to prefer, default: \"fastest\"\n   * @param maxGas - how much gas to use at most, default: 300\n   * @returns the optiomal gas price\n   */\n  public async getGasPrice(\n    speed?: string,\n    maxGasGwei?: number,\n  ): Promise<number | null> {\n    const _speed = speed ? speed : this.options.gasSpeed;\n    const _maxGas = maxGasGwei ? maxGasGwei : this.options.maxGasPriceInGwei;\n    return await getGasPriceForChain(await this.getChainID(), _speed, _maxGas);\n  }\n\n  /**\n   *\n   * @param providerOrSignerOrNetwork - A valid \"ethers\" Provider, Signer or a Network address to create a Provider with.\n   * @returns The Provider / Signer that was passed in, or a default ethers provider constructed with the passed Network.\n   */\n  public setProviderOrSigner(providerOrSignerOrNetwork: ValidProviderInput) {\n    if (\n      Provider.isProvider(providerOrSignerOrNetwork) ||\n      Signer.isSigner(providerOrSignerOrNetwork)\n    ) {\n      // sdk instantiated with a provider / signer\n      this.providerOrSigner = providerOrSignerOrNetwork;\n    } else {\n      // sdk instantiated with a network name / network url\n      this.providerOrSigner = ethers.getDefaultProvider(\n        providerOrSignerOrNetwork,\n      );\n    }\n    // if we're setting a signer then also update that\n    if (Signer.isSigner(providerOrSignerOrNetwork)) {\n      this.signer = providerOrSignerOrNetwork;\n    } else {\n      this.signer = null;\n    }\n    this.updateModuleSigners();\n    return this.providerOrSigner;\n  }\n\n  /**\n   *\n   * @public\n   * @returns Whether the SDK is in read-only mode. (Meaning it has not been passed a valid \"Signer.\")\n   */\n  public isReadOnly(): boolean {\n    return !Signer.isSigner(this.signer);\n  }\n\n  /**\n   * @public\n   * @returns The contract metadata for the given contract address.\n   */\n  public async getContractMetadata(\n    address: string,\n  ): Promise<ModuleMetadataNoType> {\n    return {\n      ...(await getContractMetadata(\n        this.providerOrSigner,\n        address,\n        this.getStorage(),\n        true,\n      )),\n      address,\n    };\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given App module.\n   * @returns The App Module.\n   */\n  public getAppModule(address: string): AppModule {\n    return this.getOrCreateModule(address, AppModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given NFT module.\n   * @returns The NFT Module.\n   */\n  public getNFTModule(address: string): NFTModule {\n    return this.getOrCreateModule(address, NFTModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Collection module.\n   * @returns The Bundle Module.\n   * @deprecated Use the new {@link ThirdwebSDK.getBundleModule} function instead.\n   */\n  public getCollectionModule(address: string): CollectionModule {\n    return this.getBundleModule(address);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Bundle module.\n   * @returns The Bundle Module.\n   */\n  public getBundleModule(address: string): BundleModule {\n    return this.getOrCreateModule(address, BundleModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Pack module.\n   * @returns The Pack Module.\n   */\n  public getPackModule(address: string): PackModule {\n    return this.getOrCreateModule(address, PackModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Currency module.\n   * @returns The Currency Module.\n   *\n   * @deprecated - see {@link TokenModule}\n   */\n  public getCurrencyModule(address: string): CurrencyModule {\n    return this.getOrCreateModule(address, CurrencyModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Token module.\n   * @returns The Token Module.\n   */\n  public getTokenModule(address: string): TokenModule {\n    return this.getOrCreateModule(address, TokenModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Datastore module.\n   * @returns The Datastore Module.\n   */\n  public getDatastoreModule(address: string): DatastoreModule {\n    return this.getOrCreateModule(address, DatastoreModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Market module.\n   * @returns The Market Module.\n   */\n  public getMarketModule(address: string): MarketModule {\n    return this.getOrCreateModule(address, MarketModule);\n  }\n\n  /**\n   *\n   * @param address - The contract address of the given Drop module.\n   * @returns The Drop Module.\n   */\n  public getDropModule(address: string): DropModule {\n    return this.getOrCreateModule(address, DropModule);\n  }\n\n  /**\n   * @beta\n   *\n   * @param address - The contract address of the given BundleDrop module.\n   * @returns The Drop Module.\n   */\n  public getBundleDropModule(address: string): BundleDropModule {\n    return this.getOrCreateModule(address, BundleDropModule);\n  }\n\n  /**\n   * @beta\n   *\n   * @param address - The contract address of the given Marketplace module.\n   * @returns The Marketplace Module.\n   */\n  public getMarketplaceModule(address: string): MarketplaceModule {\n    return this.getOrCreateModule(address, MarketplaceModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Royalty module.\n   * @returns The Splits Module.\n   */\n  public getSplitsModule(address: string): SplitsModule {\n    return this.getOrCreateModule(address, SplitsModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given Vote module.\n   * @returns The Vote Module.\n   */\n  public getVoteModule(address: string): VoteModule {\n    return this.getOrCreateModule(address, VoteModule);\n  }\n\n  /**\n   * @alpha\n   *\n   * @param address - The contract address of the given BundleSignature module.\n   * @returns The BundleSignature Module.\n   */\n  public getBundleSignatureModule(address: string): SignatureMint1155Module {\n    return this.getOrCreateModule(address, SignatureMint1155Module);\n  }\n\n  /**\n   * Used for SDK that requires js bridging like Unity SDK.\n   * Convenient function to let the caller calls into the SDK using routing scheme rather than function call.\n   *\n   * @internal\n   * @param route - sdk execution route\n   * @param payload - request arguments for the function\n   * @returns\n   */\n  public invokeRoute(route: string, payload: Record<string, any>) {\n    const parts = route.split(\".\");\n\n    if (parts.length > 0 && parts[0] === \"thirdweb\") {\n      if (parts.length === 4) {\n        // thirdweb.module_name.address.function_name\n        const moduleName = parts[1];\n        const moduleAddress = parts[2];\n        const funcName = parts[3];\n        return (this.getModuleByName(moduleName, moduleAddress) as any)[\n          funcName\n        ](...(payload.arguments || []));\n      } else if (parts.length === 3) {\n        // reserved for: thirdweb.bridge.function_name\n        throw new Error(\"reserved for thirdweb.bridge.function_name\");\n      } else if (parts.length === 2) {\n        // main sdk functions: thirdweb.function_name\n        const funcName = parts[1];\n        return (this as any)[funcName](...(payload.arguments || []));\n      }\n    }\n\n    throw new Error(\"uknown route\");\n  }\n\n  // used for invoke route for unity sdk.\n  private getModuleByName(name: string, address: string) {\n    if (name === \"currency\") {\n      return this.getCurrencyModule(address);\n    } else if (name === \"nft\") {\n      return this.getNFTModule(address);\n    } else if (name === \"market\") {\n      return this.getMarketModule(address);\n    } else if (name === \"bundle\" || name === \"collection\") {\n      return this.getCollectionModule(address);\n    } else if (name === \"drop\") {\n      return this.getDropModule(address);\n    } else if (name === \"splits\") {\n      return this.getSplitsModule(address);\n    } else if (name === \"pack\") {\n      return this.getPackModule(address);\n    } else if (name === \"datastore\") {\n      return this.getDatastoreModule(address);\n    } else if (name === \"app\" || name === \"project\") {\n      return this.getAppModule(address);\n    }\n    throw new Error(\"unsupported module\");\n  }\n\n  private async defaultGaslessSendFunction(\n    contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    if (\n      this.options.gasless.biconomy.apiId &&\n      this.options.gasless.biconomy.apiKey\n    ) {\n      return this.biconomySendFunction(contract, transaction);\n    }\n    return this.defenderSendFunction(contract, transaction);\n  }\n\n  private async biconomySendFunction(\n    _contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer && provider, \"signer and provider must be set\");\n\n    const forwarder = new ethers.Contract(\n      getContractAddressByChainId(\n        transaction.chainId,\n        \"biconomyForwarder\",\n      ) as string,\n      BiconomyForwarderAbi,\n      provider,\n    );\n    const batchId = 0;\n    const batchNonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n      batchId,\n    ]);\n\n    const request = {\n      from: transaction.from,\n      to: transaction.to,\n      token: ethers.constants.AddressZero,\n      txGas: transaction.gasLimit.toNumber(),\n      tokenGasPrice: \"0\",\n      batchId,\n      batchNonce: batchNonce.toNumber(),\n      deadline: Math.floor(\n        Date.now() / 1000 +\n          (this.options.gasless.biconomy.deadlineSeconds ?? 3600),\n      ),\n      data: transaction.data,\n    };\n\n    const hashToSign = ethers.utils.arrayify(\n      ethers.utils.solidityKeccak256(\n        [\n          \"address\",\n          \"address\",\n          \"address\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"uint256\",\n          \"bytes32\",\n        ],\n        [\n          request.from,\n          request.to,\n          request.token,\n          request.txGas,\n          request.tokenGasPrice,\n          request.batchId,\n          request.batchNonce,\n          request.deadline,\n          ethers.utils.keccak256(request.data),\n        ],\n      ),\n    );\n\n    this.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message: hashToSign,\n      signature: \"\",\n    });\n    const signature = await signer.signMessage(hashToSign);\n    this.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message: hashToSign,\n      signature,\n    });\n    const response = await fetch(\n      this.options.transactionRelayerUrl ||\n        \"https://api.biconomy.io/api/v2/meta-tx/native\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          from: transaction.from,\n          apiId: this.options.gasless.biconomy.apiId,\n          params: [request, signature],\n          to: transaction.to,\n          gasLimit: transaction.gasLimit.toHexString(),\n          gasType: this.options.gasless.biconomy.gasTier,\n        }),\n        headers: {\n          \"x-api-key\": this.options.gasless.biconomy.apiKey,\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n      },\n    );\n\n    if (response.ok) {\n      const resp = await response.json();\n      if (!resp.txHash) {\n        throw new Error(\n          `relay transaction failed: ${resp.log || resp.message}`,\n        );\n      }\n      return resp.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n\n  private async defenderSendFunction(\n    contract: BaseContract,\n    transaction: GaslessTransaction,\n  ): Promise<string> {\n    const signer = this.getSigner();\n    const provider = this.getProvider();\n    invariant(signer, \"provider is not set\");\n    invariant(provider, \"provider is not set\");\n    const forwarderAddress = this.options.transactionRelayerForwarderAddress;\n    const forwarder = Forwarder__factory.connect(forwarderAddress, provider);\n    const nonce = await getAndIncrementNonce(forwarder, \"getNonce\", [\n      transaction.from,\n    ]);\n    const domain = {\n      name: \"GSNv2 Forwarder\",\n      version: \"0.0.1\",\n      chainId: transaction.chainId,\n      verifyingContract: forwarderAddress,\n    };\n\n    const types = {\n      ForwardRequest,\n    };\n\n    let message: ForwardRequestMessage | PermitRequestMessage = {\n      from: transaction.from,\n      to: transaction.to,\n      value: BigNumber.from(0).toString(),\n      gas: BigNumber.from(transaction.gasLimit).toString(),\n      nonce: BigNumber.from(nonce).toString(),\n      data: transaction.data,\n    };\n\n    let signature: BytesLike;\n\n    this.event.emit(EventType.Signature, {\n      status: \"submitted\",\n      message,\n      signature: \"\",\n    });\n\n    // if the executing function is \"approve\" and matches with erc20 approve signature\n    // and if the token supports permit, then we use permit for gasless instead of approve.\n    if (\n      transaction.functionName === \"approve\" &&\n      transaction.functionArgs.length === 2\n    ) {\n      const spender = transaction.functionArgs[0];\n      const amount = transaction.functionArgs[1];\n\n      // TODO: support DAI permit by signDAIPermit\n      const { message: permit, signature: sig } = await signEIP2612Permit(\n        signer,\n        contract.address,\n        transaction.from,\n        spender,\n        amount,\n      );\n\n      const { r, s, v } = ethers.utils.splitSignature(sig);\n      message = {\n        to: contract.address,\n        owner: permit.owner,\n        spender: permit.spender,\n        value: BigNumber.from(permit.value).toString(),\n        nonce: BigNumber.from(permit.nonce).toString(),\n        deadline: BigNumber.from(permit.deadline).toString(),\n        r,\n        s,\n        v,\n      };\n\n      signature = sig;\n    } else {\n      const { signature: sig } = await signTypedData(\n        signer,\n        domain,\n        types,\n        message,\n      );\n      signature = sig;\n    }\n\n    this.event.emit(EventType.Signature, {\n      status: \"completed\",\n      message,\n      signature,\n    });\n\n    // TODO: isolate http request logic in here. `transactionRelayerSendFunction` is deprecated using it for backward compatibility reasons.\n    const txHash = await this.options.transactionRelayerSendFunction(\n      message,\n      signature,\n    );\n\n    return txHash;\n  }\n\n  private async defaultRelayerSendFunction(\n    message: ForwardRequestMessage | PermitRequestMessage,\n    signature: BytesLike,\n  ): Promise<string> {\n    let messageType = \"forward\";\n\n    // if has owner property then it's permit :)\n    if ((message as PermitRequestMessage)?.owner) {\n      messageType = \"permit\";\n    }\n\n    const body = JSON.stringify({\n      request: message,\n      signature,\n      type: messageType,\n    });\n\n    const response = await fetch(this.options.transactionRelayerUrl, {\n      method: \"POST\",\n      body,\n    });\n    if (response.ok) {\n      const resp = await response.json();\n      const result = JSON.parse(resp.result);\n      return result.txHash;\n    }\n    throw new Error(\"relay transaction failed\");\n  }\n\n  public async createSnapshot(leafs: string[]): Promise<SnapshotInfo> {\n    const hasDuplicates = new Set(leafs).size < leafs.length;\n    if (hasDuplicates) {\n      throw new DuplicateLeafsError();\n    }\n\n    const { default: keccak256 } = await import(\"keccak256\");\n\n    const hashedLeafs = leafs.map((l) => keccak256(l));\n    const tree = new MerkleTree(hashedLeafs, keccak256, {\n      sort: true,\n    });\n\n    const snapshot: Snapshot = {\n      merkleRoot: tree.getHexRoot(),\n      claims: leafs.map((l): ClaimProof => {\n        const proof = tree.getHexProof(keccak256(l));\n        return {\n          address: l,\n          proof,\n        };\n      }),\n    };\n\n    const serializedSnapshot = JSON.stringify(\n      this._jsonConvert.serializeObject(snapshot, Snapshot),\n    );\n    const uri = await this.storage.upload(serializedSnapshot);\n\n    return {\n      merkleRoot: tree.getHexRoot(),\n      snapshotUri: uri,\n      snapshot,\n    };\n  }\n\n  /**\n   * Accessor for the storage instance used by the SDK\n   *\n   * @returns - The Storage instance.\n   */\n  public getStorage(): IStorage {\n    return this.storage;\n  }\n\n  /**\n   * Allows you to override the storage used across the SDK.\n   *\n   * @param storage - The Storage instance to use.\n   */\n  public overrideStorage(storage: IStorage): void {\n    this.storage = storage;\n  }\n}\n\n/**\n * Deprecated, please use ThirdwebSDK instead.\n * @public\n * @deprecated use ThirdwebSDK instead\n */\nexport const NFTLabsSDK = ThirdwebSDK;\n","/**\n * The {@link https://thirdweb.com | thirdweb} typescript sdk.\n *\n * @remarks\n * Please keep in mind that the thirdweb typescript sdk and {@link https://thirdweb.com/dashboard | Admin Dashboard} are currently in Early Access.\n *\n * Should you find bugs or in the case you need help please reach out to us in {@link https://discord.gg/thirdweb | Discord}. (We also have 🍪 )\n *\n *\n * @example\n * To get you started here's how you would instantiate the SDK and fetch some NFTs\n *\n * 1. Install the sdk\n * ```shell\n * npm install @3rdweb/sdk\n * ```\n *\n * 2. Get your NFT contract address from the {@link https://thirdweb.com/dashboard | Admin Dashboard}.\n *\n * 3. Write the tiniest amount of code!\n * ```typescript\n *  1 | import { ThirdwebSDK } from \"@3rdweb/sdk\";\n *  2 | import type { NFTModule, NFTMetadataOwner } from \"@3rdweb/sdk\";\n *  3 |\n *  5 | const contractAddress = \"0x...\"; // your contract address from step 2\n *  6 |\n *  7 | const sdk = new ThirdwebSDK();\n *  8 |\n *  9 | const nftModule: NFTModule = sdk.getNFTModule(contractAddress);\n * 10 |\n * 11 | const nftListWithOwnerAddress: NFTMetadataOwner[] = await nftModule.getAllWithOwner();\n * 12 |\n * 13 | console.log(nftListWithOwnerAddress);\n * ```\n * ```\n * Output\n * => [\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       {\n *          owner: \"0x...\",\n *          metadata: {\n *            name: \"...\",\n *            description: \"...\",\n *            image: \"...\"\n *          },\n *       },\n *       ...\n *    ]\n * ```\n *\n * @packageDocumentation\n */\n\nimport fetch from \"node-fetch\";\n\nexport * from \"./common\";\nexport type { InvariantError } from \"./common/invariant\";\nexport * from \"./core\";\nexport type { Module, ModuleWithRoles } from \"./core/module\";\nexport type { IAppModule } from \"./core/registry\";\nexport * from \"./core/types\";\nexport * from \"./enums\";\nexport * from \"./factories\";\nexport * from \"./interfaces\";\nexport * from \"./modules\";\nexport * from \"./storage\";\nexport * from \"./types\";\nexport * from \"./utils\";\n\nif (!globalThis.fetch) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  globalThis.fetch = fetch;\n}\n","import { MerkleTree } from \"merkletreejs\";\nimport { SHA256 } from \"crypto-js\";\n\n/**\n * Convenience function to generate a merkle root from a list of strings.\n *\n * @param items - Any list of strings that will be hashed and added to the tree.\n * @returns - A merkle root (in hexadecimal).\n */\nexport function generateRoot(items: string[]): string {\n  const tree = new MerkleTree(items, SHA256, {\n    hashLeaves: true,\n    sortLeaves: true,\n  });\n  return tree.getRoot().toString(\"hex\");\n}\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","NotFoundError","identifier","_Error","InvalidAddressError","address","_Error2","MissingRoleError","role","_Error3","AssetNotFoundError","message","_Error4","UploadError","_Error5","FileNameMissingError","_Error6","DuplicateFileNameError","fileName","_Error7","NotEnoughTokensError","contractAddress","quantity","available","_Error8","MissingOwnerRoleError","_Error9","QuantityAboveLimitError","_Error10","FetchError","innerError","DuplicateLeafsError","_Error12","AuctionAlreadyStartedError","id","_Error13","FunctionDeprecatedError","_Error14","ListingNotFoundError","marketplaceContractAddress","listingId","_Error15","WrongListingTypeError","actualType","expectedType","_Error16","RestrictedTransferError","assetAddress","_Error17","AdminRoleMissingError","_Error18","AuctionHasNotEndedError","endTime","_Error19","toString","recursiveResolveGatewayUrl","json","storage","resolveFullUrl","uploadToIPFS","data","signerAddress","headers","formData","FormData","append","fetch","body","res","IpfsUri","uploadMetadata","metadata","_fileHandler","shouldUpload","val","File","Buffer","JSON","stringify","require","ChainId","InterfaceId_IERC721","arrayify","InterfaceId_IERC1155","contractUriABI","inputs","outputs","internalType","stateMutability","getContractMetadata","provider","resolveGateway","contract","Contract","contractURI","uri","get","meta","parse","entity","console","description","isContract","getCode","SUPPORTED_CHAIN_IDS","Mainnet","Rinkeby","Polygon","Mumbai","Fantom","FantomTestnet","Avalanche","AvalancheFujiTestnet","NATIVE_TOKEN_ADDRESS","NATIVE_TOKENS","symbol","decimals","wrapped","Hardhat","getCurrencyMetadata","providerOrSigner","asset","isNativeToken","Signer","isSigner","getNetwork","nativeToken","getNativeTokenByChainId","chainId","erc20","ERC20__factory","connect","all","getCurrencyValue","price","displayValue","formatUnits","tokenAddress","toLowerCase","AddressZero","getCurrencyBalance","walletAddress","getProvider","getBalance","balance","balanceOf","ModuleType","ChainlinkVrf","vrfCoordinator","linkTokenAddress","keyHash","fees","ethers","utils","parseEther","tokenUriABI","getMetadataWithoutContract","tokenId","getTokenMetadata","getTokenUri","getTokenMetadataUsingStorage","tokenURI","EventType","RolesMap","admin","minter","pauser","transfer","editor","lister","_role","getRoleHash","hexZeroPad","getGasStationUrl","getGasPriceForChain","speed","maxGasPrice","gasStationUrl","gas","Math","max","min","invariant","condition","signTypedData","signer","domain","types","payload","_TypedDataEncoder","getPayload","signature","_provider$provider","isWalletConnect","getAddress","send","_signTypedData","_context","_err$message","includes","joinSignature","splitSignature","Module","options","sdk","ipfsGatewayUrl","_providerOrSigner","_signer","readOnlyContract","setProviderOrSigner","connectContract","readOnlyRpcUrl","getDefaultProvider","exists","getMetadata","resolveUrls","getModuleType","getStorage","setMetadata","sendTransaction","clearSigner","getProviderOrSigner","getSigner","hasValidSigner","getSignerAddress","getChainID","getCallOverrides","gasSpeed","maxGasPriceInGwei","gasPriceChain","gasPrice","parseUnits","emitTransactionEvent","status","transactionHash","event","emit","Transaction","args","callOverrides","sendContractTransaction","transactionRelayerUrl","gasless","biconomy","apiKey","sendGaslessTransaction","txHash","waitForTransaction","receipt","sendTransactionByFunction","tx","hash","wait","func","functions","from","to","BigNumber","gt","encodeFunctionData","estimateGas","gasEstimate","mul","lt","gasLimit","functionName","functionArgs","gaslessSendFunction","signTypedDataEmitEvent","Signature","parseEventLogs","eventName","logs","log","decodeEventLog","topics","e","parseLogs","topic","getEventTopic","filter","x","indexOf","map","l","parseLog","ModuleWithRoles","_Module","getModuleRoles","getRoleMembers","roles","roleHash","getRoleMemberCount","count","toNumber","Array","getRoleMember","getAllRoleMembers","setAllRoleMembers","rolesWithAddresses","every","_this","currentRoles","encoded","sort","currentAddresses","toAdd","addresses","toRemove","getRevokeRoleFunctionName","revokeAllRolesFromAddress","rolesRemoved","_currentRoles$role","_this2","grantRole","revokeRole","revokeFunctionName","prepareMetadata","_this3","upload","prepareBatchMetadata","m","_this4","onlyRoles","_this5","a","MintRequest","SignatureMint1155Module","SignatureMint1155__factory","moduleType","totalSupply","supply","quantityOwnedByAddress","getAll","nextTokenIdToMint","maxId","isApproved","operator","assetContract","assetId","isApprovedForAll","ERC721__factory","approved","getApproved","isTokenApproved","setApproval","amount","transferFrom","createAndMint","createAndMintTo","constants","MaxUint256","createAndMintBatch","createAndMintBatchTo","metadatas","amounts","uploadMetadataBatch","metadataUris","index","mintAdditionalCopiesTo","mintAdditionalCopiesBatchTo","ids","burn","burnFrom","burnBatch","burnBatchFrom","account","transferBatchFrom","setDefaultRoyaltyInfo","recipientAddress","fee","fee_recipient","seller_fee_basis_points","setTokenRoyaltyInfo","setModuleMetadata","getOwned","_address","balanceOfBatch","fill","ownedBalances","b","item","ownedByAddress","getDefaultRoyaltyInfo","getTokenRoyaltyInfo","getRoyaltyInfoForToken","isTransferRestricted","transfersRestricted","setRestrictedTransfer","restricted","mintWithSignature","req","mapPayload","overrides","setAllowance","pricePerToken","currencyAddress","t","tokenIdMinted","verify","mintRequest","generateSignatureBatch","payloads","resolveId","buffer","alloc","uuidv4","hexlify","toUtf8Bytes","r","uris","version","verifyingContract","uid","generateSignature","royaltyRecipient","royaltyBps","primarySaleRecipient","currency","validityEndTimestamp","mintEndTimeEpochSeconds","validityStartTimestamp","mintStartTimeEpochSeconds","owner","spender","allowance","sub","BUNDLE_SIGNATURE","CONTRACT_ADDRESSES","registry","biconomyForwarder","getContractAddressByChainId","contractName","ForwardRequest","BiconomyForwarderAbi","_nonces","_noncesSyncTimestamp","getAndIncrementNonce","forwarder","forwarderFunction","forwarderArgs","join","timestamp","shouldSync","Date","now","nonceResult","isArray","nonce","add","NAME_ABI","DOMAIN_SEPARATOR_ABI","constant","payable","NONCES_ABI","getSignerNonce","nonces","getNonce","getDomainSeperator","DOMAIN_SEPARATOR","getTokenName","getChainDomainSeperator","contractDomainSeparator","polygonDomain","salt","toHexString","hashDomain","signEIP2612Permit","deadline","getChainId","Permit","CommonModuleMetadata","image","externalLink","__decorate","JsonProperty","String","PropertyConvertingMode","IGNORE_NULLABLE","JsonObject","BundleDropModuleMetadata","sellerFeeBasisPoints","primarySaleFeeBasisPoints","feeRecipient","primarySaleRecipientAddress","Number","BundleModuleMetadata","CurrencyModuleMetadata","DatastoreModuleMetadata","DropModuleMetadata","maxSupply","baseTokenUri","MarketModuleMetadata","marketFeeBasisPoints","MarketplaceModuleMetadata","NftModuleMetadata","defaultSaleRecipientAddress","PackModuleMetadata","SplitsModuleMetadata","recipientSplits","isRoyalty","Boolean","TokenModuleMetadata","VoteModuleMetadata","proposalStartWaitTimeInSeconds","proposalVotingTimeInSeconds","votingDelay","votingPeriod","votingTokenAddress","votingQuorumFraction","minimumNumberOfTokensNeededToPropose","DEFAULT_BLOCK_TIMES_FALLBACK","secondsBetweenBlocks","synced","timeInEpochSeconds","secondsUntil","floor","estimateSecondsBetweenBlocks","blockTimes","getBlock","latest","number","current","sum","reduce","latestBlock","blocksUntil","ceil","TokenModule","Coin__factory","getValue","allowanceOf","getVoteBalance","getVoteBalanceOf","getVotes","getDelegation","getDelegationOf","delegates","delegateTo","delegateeAddress","mint","mintTo","mintBatchTo","getAllHolderBalances","queryFilter","filters","Transfer","txns","balances","transferBatch","transferFromBatch","fromAddress","CURRENCY","CurrencyModule","AppModule","_shouldCheckVersion","_isV1","jsonConvert","JsonConvert","ProtocolControl__factory","getModuleAddress","getAllModulesOfType","getNFTAddress","NFT","getBundleAddress","BUNDLE","getPackAddress","PACK","getCurrencyAddress","getMarketAddress","MARKET","getDropAddress","DROP","getDatastoreAddress","DATASTORE","getRoyaltyTreasury","getAllContractMetadata","d","getPackModules","getNFTModules","getCollectionModules","getBundleModules","getCurrencyModules","getDatastoreModules","getMarketModules","getDropModules","getAllModuleMetadata","filterByModuleType","moduleTypesToGet","TOKEN","BUNDLE_DROP","VOTE","moduleAddresses","acc","curr","concat","getForwarder","setForwarder","setRoyaltyTreasury","treasury","_context24","_e$message","setModuleRoyaltyTreasury","moduleAddress","moduleContract","createInterface","callStatic","setContractURI","_context25","_e$message2","isValidRoyaltyRecipient","getSplitsModule","withdrawFunds","lastTransaction","isNative","isV1","royalty","Royalty__factory","_prepareMetadata","_deployModule","factory","getGasPrice","txOpts","ContractFactory","abi","bytecode","deploy","deployed","addModule","addModuleTx","verifyMetadata","shouldUpdateRecipient","isValidFeeRecipient","deployBundleModule","serializedMetadata","serializeObject","metadataUri","COLLECTION","NFTCollection__factory","getBundleModule","deploySplitsModule","SPLITS","s","shares","Splits__factory","deployRoyaltySplitsModule","deployNftModule","nativeTokenWrapperAddress","SignatureMint721__factory","getNFTModule","deployCurrencyModule","getCurrencyModule","deployTokenModule","getTokenModule","deployMarketModule","Market__factory","getMarketModule","deployPackModule","Pack__factory","getPackModule","deployDropModule","isAddress","LazyMintERC721__factory","getDropModule","deployBundleSignatureModule","royaltyTreasury","getBundleSignatureModule","deployBundleDropModule","LazyMintERC1155__factory","getBundleDropModule","deployDatastoreModule","DataStore__factory","getDatastoreModule","deployVoteModule","votingTimeInBlocks","timeBetweenBlocks","getPastTotalSupply","VotingGovernor__factory","getVoteModule","shouldUpgradeToV2","hasRole","shouldUpgradeModuleList","upgradeModuleList","moduleMetadatas","getTransactionCount","txData","txs","upgradeToV2","upgradeOptions","isV1UpgradedOrV2","splitsAddress","splitsModuleAddress","splitsRecipients","projectBalance","treasuryBalance","balanceOfToken","IERC20__factory","deployMarketplaceModule","MARKETPLACE","Marketplace__factory","getMarketplaceModule","ListingType","ClaimConditionType","ProposalState","VoteType","ClaimEligibility","BundleModule","tokenState","creator","underlyingType","nextTokenId","createBatch","metadataWithSupply","supplies","tokenIds","createWithToken","tokenContract","tokenAmount","token","increaseAllowance","createWithErc20","createWithNFT","unwrapNFT","unwrapToken","createWithERC721","mintBatch","setRoyaltyBps","getRoyaltyBps","getRoyaltyRecipientAddress","isMetadataEqual","old","changed","oldKeys","changedKeys","ClaimConditionPhase","createSnapshotFunc","_conditionStartTime","_currencyAddress","_price","_maxQuantity","_quantityLimitPerTransaction","_merkleRootHash","_merkleCondition","_snapshot","createSnapshot","_waitInSeconds","setPrice","setConditionStartTime","when","getTime","setMaxQuantity","maxQuantity","setMaxQuantityPerTransaction","gte","setMerkleRoot","root","setSnapshot","getSnapshot","buildPublicClaimCondition","startTimestamp","maxMintSupply","waitTimeSecondsLimitPerTransaction","quantityLimitPerTransaction","currentMintSupply","merkleRoot","setWaitTimeBetweenClaims","waitInSeconds","ClaimConditionFactory","phases","buildConditions","sorted","c","publicClaimConditions","eq","buildConditionsForDropV1","conditions","fromPublicClaimConditions","phase","newClaimPhase","startTime","maxQuantityPerTransaction","deleteClaimPhase","cleared","splice","removeClaimPhase","_index","allSnapshots","p","ClaimProof","proof","Snapshot","claims","OLD_CLAIM_ABI","anonymous","indexed","BundleDropModule","_isNewClaim","BundleDrop__factory","transformResultToClaimCondition","pm","cv","maxClaimableSupply","supplyClaimed","availableSupply","waitTimeInSecondsBetweenClaims","currencyContract","currencyMetadata","getActiveClaimCondition","getIndexOfActiveCondition","getClaimConditionAtIndex","getAllClaimConditions","claimConditions","totalConditionCount","getDefaultSaleRecipient","defaultSaleRecipient","getSaleRecipient","saleRecipient","lazyMintBatch","startFileNumber","baseUri","endsWith","endingIndex","lte","setSaleRecipient","recipient","setDefaultSaleRecipient","setClaimCondition","merkleInfo","snapshotUri","oldMerkle","existingMerkle","merkle","updateClaimConditions","getClaimConditionFactory","bind","setPublicClaimConditions","_conditions","prepareClaim","proofs","mintCondition","addressToClaim","startsWith","snapshot","snapshotData","deserializeObject","find","totalPrice","claim","claimData","isNewClaim","claimTo","getClaimConditionsFactory","getAllClaimerAddresses","ClaimedTokens","Set","claimer","getClaimIneligibilityReasons","addressToCheck","reasons","activeConditionIndex","claimCondition","_context34","NoActiveClaimPhase","NotEnoughSupply","stripZeros","merkleLower","getClaimerProofs","keccak256","AddressNotAllowed","getTimestampForNextValidClaim","timestampForNextClaim","div","AlreadyClaimed","WaitBeforeNextClaimTransaction","NotEnoughTokens","canClaim","_addressToClaim","checkVersion","VERSION","DatastoreModule","getUint","setUint","ABI_V1_22_0","ABI_V1_24_0","DropModule","_isV0","_version","v1Module","DropV1Module","DropV2__factory","ownerOf","queryParams","isV0","start","getAllUnclaimed","nextTokenIdToClaim","unmintedId","getAllClaimed","indices","tokenOfOwnerByIndex","transformResultToMintCondition","getActiveMintCondition","mc","getAllMintConditions","_this6","maxTotalSupply","totalUnclaimedSupply","totalClaimedSupply","lazyMint","setMintConditions","setClaimConditions","defaultMerkleRoot","getMintConditionsFactory","setPublicMintConditions","startTimestampInSeconds","_context31","events","startingIndex","startTokenId","_receipt","_this7","hasDelayedReveal","_receipt2","hashDelayRevealPassword","batchTokenIndex","password","solidityKeccak256","createDelayedRevealBatch","placeholder","placeholderUri","getBaseURICount","baseUriId","encryptDecrypt","encryptedBaseUri","reveal","batchId","decryptedUri","getBatchesToReveal","isZero","countRangeArray","_this8","baseURIIndices","uriIndicesWithZeroStart","uriIndices","tokenUris","tokenMetadatas","encryptedBaseURI","encryptedBaseUris","batchUri","placeholderMetadata","_","hexDataLength","canCreateBatch","_this9","Drop__factory","_this10","nextMintTokenId","_this11","_this12","_this13","getLastStartedMintConditionIndex","mintConditions","pinToIpfs","files","uploadBatch","lazyMintAmount","_addressToClaim2","_this14","setBaseTokenUri","setMaxTotalSupply","MarketModule","transformResultToListing","listing","seller","tokenMetadata","tokensPerBuyer","saleStart","saleEnd","MAX_SAFE_INTEGER","getListing","getAllListings","listings","getListingsByAsset","getListingsBySeller","getListingsByAssetContract","filterSeller","filterTokenContract","filterTokenId","getMarketFeeBps","marketFeeBps","list","secondsUntilStart","secondsUntilEnd","erc165","ERC165__factory","supportsInterface","ERC1155__factory","restrictedListerRoleOnly","unlistAll","unlist","setRestrictedListerRoleOnly","buy","setMarketFeeBps","MarketplaceModule","_isNewBuy","createDirectListing","validateNewListingParam","assetContractAddress","handleTokenApproval","buyoutPricePerToken","currencyToAccept","currencyContractAddress","listingType","Direct","quantityToList","reservePricePerToken","secondsUntilEndTime","listingDurationInSeconds","startTimeInSeconds","createAuctionListing","Auction","makeDirectListingOffer","offer","getDirectListing","quantityDesired","makeAuctionListingBid","bid","validateAuctionListing","getBidBufferBps","bidBuffer","getWinningBid","winningBid","isWinningBid","reservePrice","winningPrice","newBidPrice","getAuctionWinner","AuctionClosed","auction","winningBidder","mapDirectListing","getAuctionListing","mapAuctionListing","tokenOwner","buyoutPrice","buyoutCurrencyValuePerToken","sellerAddress","startTimeInEpochSeconds","reservePriceCurrencyValuePerToken","endTimeInEpochSeconds","isTokenApprovedForMarketplace","isStillValidDirectListing","param","validateDirectListing","mapOffer","offeror","quantityWanted","buyerAddress","currencyValue","getActiveOffer","offers","bidBufferBps","getTimeBufferInSeconds","timeBuffer","acceptDirectListingOffer","addressOfOfferor","buyoutAuctionListing","buyoutDirectListing","_buyout","isNewBuy","updateDirectListing","updateAuctionListing","cancelDirectListing","cancelAuctionListing","closeAuctionListing","closeFor","_context29","setBidBufferBps","setTimeBufferInSeconds","buyoutListing","getAllListingsNoFilter","rawListings","_filter$seller","_filter$tokenContract2","_filter$tokenId","_filter$tokenContract","totalListings","isRestrictedListerRoleOnly","isRestricted","allowListingFromSpecificAssetOnly","isV2","allowListingFromAnyAsset","addr","UnderlyingType","NFTModule","v1Contract","NFT__factory","_this$v1Contract","_yield$this$v1Contrac","getWithOwner","getAllWithOwner","_this$v1Contract2","_yield$this$v1Contrac2","_v1MintTo","_v1MintBatchTo","multicall","setPrimarySaleRecipient","getPrimarySaleRecipient","PackModule","open","packId","requestId","opener","once","PackOpenFulfilled","_packId","_opener","_requestId","rewardContract","rewardIds","fulfillEvent","rewardId","getPack","currentSupply","openStart","getNFTs","getPackWithRewards","packReward","source","reward","amountsPacked","assets","packParams","defaultAbiCoder","encode","secondsUntilOpenStart","rewardsPerOpen","safeBatchTransferFrom","getLinkBalance","chainlink","depositLink","withdrawLink","_contract","SplitsModule","getAllRecipients","recipients","payeeCount","totalRecipients","payee","getRecipientSplitPercentage","_context2","balanceOfAllRecipients","balanceOfTokenAllRecipients","totalShares","splitPercentage","walletBalance","totalReceived","_pendingPayment","withdraw","alreadyReleased","addressReceived","totalRoyaltyAvailable","withdrawToken","distribute","distributeToken","VoteModule","settings","quorumNumerator","proposalThreshold","proposalTokenThreshold","votingTokenMetadata","proposalId","ensureExists","proposals","ProposalCreated","results","states","proposalVotes","votes","v","Against","label","againstVotes","For","forVotes","Abstain","abstainVotes","j","targets","calldatas","proposer","startBlock","endBlock","executions","exec","toAddress","nativeTokenValue","transactionData","propose","tos","datas","vote","voteType","reason","hasVoted","execute","proposal","descriptionHash","canExecute","IpfsStorage","gatewayUrl","replace","thirdwebIpfsServerUrl","fileStartNumber","uploadBatchWithCid","cid","getUploadToken","fileNames","file","fileData","extensions","extensionStartIndex","lastIndexOf","substring","filepath","window","Blob","Authorization","ok","IpfsHash","text","buildFilePropertiesMap","batchUploadProperties","filesToUpload","cids","replaceFilePropertiesWithHashes","isFile","_signerAddress","metadataObjects","metadataToUpload","ipfsHash","canResolve","RegistryModule","Registry__factory","getProtocolContracts","deployer","getProtocolControlCount","versions","getProtocolControl","ThirdwebSDK","providerOrNetwork","opts","defaultOptions","registryContractAddress","transactionRelayerSendFunction","defaultRelayerSendFunction","transactionRelayerForwarderAddress","apiId","deadlineSeconds","gasTier","defaultGaslessSendFunction","modules","Map","_jsonConvert","EventEmitter2","_registry","updateModuleSigners","_module","isReadOnly","Provider","isProvider","getRegistryAddress","getRegistryModule","getOrCreateModule","has","_newModule","set","getForwarderAddress","getApps","createApp","registryContract","_this$signer","deployProtocol","txn","maxGasGwei","_speed","_maxGas","providerOrSignerOrNetwork","getAppModule","getCollectionModule","invokeRoute","route","parts","split","funcName","getModuleByName","arguments","transaction","biconomySendFunction","defenderSendFunction","batchNonce","request","txGas","tokenGasPrice","hashToSign","signMessage","params","gasType","response","resp","Forwarder__factory","forwarderAddress","permit","sig","messageType","leafs","size","hashedLeafs","tree","MerkleTree","getHexRoot","getHexProof","serializedSnapshot","overrideStorage","NFTLabsSDK","$enum","getKeyOrDefault","moduleName","getValueOrDefault","toUpperCase","items","SHA256","hashLeaves","sortLeaves","getRoot","ipfsUrl"],"mappings":"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"}